(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2168686,      40996]
NotebookOptionsPosition[   2158409,      40814]
NotebookOutlinePosition[   2158854,      40831]
CellTagsIndexPosition[   2158811,      40828]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Interpreter", "[", "\"\<PhysicalQuantity\>\"", "]"}], "[", 
  "\"\<torque\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877433243396615*^9, 3.877433260401342*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"43737183-6aec-4e82-9722-13c34d408f06"],

Cell[BoxData[
 TemplateBox[{"\"Torque\""},
  "QuantityVariable",
  DisplayFunction->(TooltipBox[
    StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
    RowBox[{"Quantity variable:", " torque"}], TooltipStyle -> 
    "TextStyling"]& )]], "Output",
 CellChangeTimes->{{3.877433253587048*^9, 3.877433262713334*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"283cf7dd-f699-42ab-92ec-e859be79dd35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Entity", "[", 
  RowBox[{"\"\<PhysicalQuantity\>\"", ",", "\"\<Torque\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8774332687740026`*^9, 3.87743327498061*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"82c46a48-f0a3-4d0b-b303-db4662159e20"],

Cell[BoxData[
 TemplateBox[{"\"torque\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
   "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
   "\"physical quantity\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.877433275777266*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"e73baa35-4de5-49c6-a870-3a59ed916fe9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"torque\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
    "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
    "\"physical quantity\""},
   "Entity"], "[", "\"\<Dataset\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8774332806671295`*^9, 3.8774332837766294`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"1d4cee03-75de-442a-ab5b-029d5e5797da"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      EntityProperty["PhysicalQuantity", "Abbreviations"] -> 
       Missing["NotAvailable"], 
       EntityProperty["PhysicalQuantity", "AlgebraicTypes"] -> {
        "positive real", "pseudovector", "scalar"}, 
       EntityProperty["PhysicalQuantity", "AlternateNames"] -> {
        "rotational force", "turning effect"}, 
       EntityProperty["PhysicalQuantity", "BasePhysicalQuantity"] -> 
       Missing["NotAvailable"], 
       EntityProperty["PhysicalQuantity", "CanonicalUnit"] -> 
       Quantity[1, "Meters" "Newtons"], 
       EntityProperty["PhysicalQuantity", "Classes"] -> {}, 
       EntityProperty[
        "PhysicalQuantity", "Dimensions"] -> {{"LengthUnit", 2}, {
         "MassUnit", 1}, {"TimeUnit", -2}}, 
       EntityProperty["PhysicalQuantity", "EntityClasses"] -> {}, 
       EntityProperty["PhysicalQuantity", "Instances"] -> {
         Entity["PhysicalQuantity", "CoggingTorque"], 
         Entity["PhysicalQuantity", "FrictionTorque"], 
         Entity["PhysicalQuantity", "HysteresisTorque"], 
         Entity["PhysicalQuantity", "ViscousDragTorque"]}, 
       EntityProperty["PhysicalQuantity", "Name"] -> "torque", 
       EntityProperty["PhysicalQuantity", "NamedSIUnit"] -> Missing["None"], 
       EntityProperty["PhysicalQuantity", "PhysicalPropertyType"] -> 
       Missing["NotAvailable"], 
       EntityProperty["PhysicalQuantity", "QuantityVariable"] -> 
       QuantityVariable["\[Tau]", "Torque"], 
       EntityProperty["PhysicalQuantity", "SIBaseUnit"] -> 
       Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
       EntityProperty["PhysicalQuantity", "SIUnit"] -> 
       Quantity[1, "Meters" "Newtons"], 
       EntityProperty["PhysicalQuantity", "StandardIdentifiers"] -> <|
        "ISO 31/III-1978" -> "3-12.2", "ISO 31-3:1992" -> "3-12.3", 
         "ISO 80000-4:2006" -> "4-13.2", "ISO 80000-4:2019" -> "4-12.2", 
         "Wikidata" -> "Q48103"|>, 
       EntityProperty["PhysicalQuantity", "StandardSymbols"] -> <|
        "ISO" -> {"T", 
           Subscript["M", "Q"]}, "Wikidata" -> {"T", 
           Subscript["M", "Q"]}, "Wikipedia" -> {"\[Tau]"}|>, 
       EntityProperty["PhysicalQuantity", "Symbols"] -> {"T", "\[Tau]", 
         Subscript["M", "Q"]}|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 18, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 18, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
     "Path" -> {}, "DisplayedRowCount" -> 18, "DisplayedColumnCount" -> 1, 
     "DataRowCount" -> 18, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes["\"abbreviations\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"algebraic types\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "pseudovector", "scalar"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"positive real", "pseudovector", "scalar"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"alternate names\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"rotational force", "turning effect"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"rotational force", "turning effect"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"base physical quantity\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"canonical unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"classes\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"dimensions\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Dimensions"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Dimensions"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"entity classes\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"instances\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Instances"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["PhysicalQuantity", "CoggingTorque"], 
                    Entity["PhysicalQuantity", "FrictionTorque"], 
                    Entity["PhysicalQuantity", "HysteresisTorque"], 
                    Entity["PhysicalQuantity", "ViscousDragTorque"]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Entity["PhysicalQuantity", "CoggingTorque"], 
                    Entity["PhysicalQuantity", "FrictionTorque"], 
                    Entity["PhysicalQuantity", "HysteresisTorque"], 
                    Entity["PhysicalQuantity", "ViscousDragTorque"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Instances"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"name\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["torque", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"named SI unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, "Item",
                 False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, "Item",
                 False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"physical property type\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"quantity variable\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 
                 TemplateBox[{"\"\[Tau]\"", "\"Torque\""}, "QuantityVariable",
                   DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    RowBox[{"Quantity variable:", " torque"}], TooltipStyle -> 
                    "TextStyling"]& )], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"SI base unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"SI unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"standard identifiers\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "StandardIdentifiers"]]},
                 "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"ISO 31/III-1978" -> "3-12.2", "ISO 31-3:1992" -> 
                    "3-12.3", "ISO 80000-4:2006" -> "4-13.2", 
                    "ISO 80000-4:2019" -> "4-12.2", "Wikidata" -> "Q48103"|>, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[<|"ISO 31/III-1978" -> "3-12.2", "ISO 31-3:1992" -> 
                    "3-12.3", "ISO 80000-4:2006" -> "4-13.2", 
                    "ISO 80000-4:2019" -> "4-12.2", "Wikidata" -> "Q48103"|>, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "StandardIdentifiers"]]},
                 "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"standard symbols\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[<|"ISO" -> {"T", 
                    Subscript["M", "Q"]}, "Wikidata" -> {"T", 
                    Subscript["M", "Q"]}, "Wikipedia" -> {"\[Tau]"}|>, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[<|"ISO" -> {"T", 
                    Subscript["M", "Q"]}, "Wikidata" -> {"T", 
                    Subscript["M", "Q"]}, "Wikipedia" -> {"\[Tau]"}|>, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"symbols\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"T", "\[Tau]", 
                    Subscript["M", "Q"]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"T", "\[Tau]", 
                    Subscript["M", "Q"]}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{919., {255.13403309800196`, 260.86596690199804`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{919., {255.13403309800196`, 260.86596690199804`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877433284744762*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"c7fca097-ed56-42f8-85f1-c82939f19da6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Entity", "[", "\"\<PhysicalQuantity\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877433302479712*^9, 
  3.8774333056820807`*^9}},ExpressionUUID->"c674e0f9-ceba-4b9a-8de6-\
5c5f373853a6"],

Cell[CellGroupData[{

Cell["Coherent SI Unit", "Section",
 CellChangeTimes->{{3.8774333743899918`*^9, 
  3.8774333768121405`*^9}},ExpressionUUID->"317c07db-5daf-47a9-8d35-\
6cfc80d3d6e3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResourceObject", "[", "\"\<SI Brochure Data\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8774333782515693`*^9, 3.87743339055158*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"a1ddf5e6-7c43-4e84-b514-3f7835f621f8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ResourceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {
                10.869015724668278`, {0., 10.869015724668278`}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            StyleBox[
             GraphicsBox[
              RasterBox[CompressedData["
1:eJztmslOXEcUhpHjhZd5hbxFttlE8tZRHsBWiOUNkbClJC+THfMk5kkMQiDm
eZ7EPAsQ80yFv5WWkhsKn7p0dw38n3SQDZfuqvM1deucut99+O3dr6+ysrI+
v3n48u797z/k5r7/86dvH/7zc87nTx9zsn95m/Ml+2N27vcfvnn45h//xOuH
UIQQQghxgry8PIaHQb9hB/2GHfQbdtBv2EG/YQchhNheh15q0G/YQb9hB/2G
HfQbdtBv2EEIIXHJxPry41/DT4YP+LoOxxm3qS/fr4+bJxegX/qN4lr+6VcP
/dJvFNfyT7966Jd+o7iWf/rVQ7/0G8W1/NOvHvql3yiu5Z9+9dAv/UZxLf/0
q4d+6TeKa/mnXz30S79RXMs//eqhX/qN4lr+6VcP/dJvFNfyT7966Jd+o2Qi
nybQrx76pd8o9Eu/z7neFPrVQ7/0G4V+6fc515tCv3rol36j+O43DvRLvy5C
vzLol35dhH5lvCS/ptCvPehXBv3qoV970K8M+tVDv/agXxn0q4d+7RGC30xA
v3ro1x70K4N+9dCvPehXBv3qoV970K8M+tVDv/agXxm++iWEEGKXr90/TCJ0
fMyVj2O2hY+58nHMtvAxVz6O2RY+5srHMdvCx1z5OGZbMFeEkOdye3urenp6
GAHE3d3d//ze3Nyk9F7BsBdwSb/hBv2GHfQbdjzmF/ur4uJio9epqKhQLS0t
jDSGqZOSkpKEy8e4vr5Wk5OTqqysTPx67e3tam9vT7JFJ0Lu7+/V2tqaamho
EHuAs6mpqYTDrwH/c3NzqrKyUvz6zc3NanNzMwOzDxfUNUtLS6qmpkacdzia
n5/X/s1K3q+2tlb8fvX19WplZSXxGSQy4vw9wcny8vKjtW4c1tfXVVNTk/j9
q6qq1MLCQsreP0SwlmJNNbkfwsHGxkbaxrS7u6va2tqM9mDT09OP7uleKpeX
l2p0dDSxF5LmETlH7jPFwcGB6uzsVPn5+aLxlZaWqvHxcXV1dZWxMbrG2dmZ
GhwcVIWFhaKcIbfI8eHhobUxn5ycqN7eXlVQUCAac1FRkRoaGlLn5+fWxpxp
jo+PE31haY5wHXKK3LoCfMEb/Pk6h1Rjusb58NnH+ot1GOuxL2tQqjHdo/h4
78J+amZmJrG/cnUPkWpQ/6MPYLL3RI583nuiPlpcXFTV1dXieSNH6awBUgnq
fNT7qPul80P/AjkJqXZEHlZXV416bnV1dc72SuJ8bjF39B1dnE8q2draSvTO
pXlJ9kri9OBSTZz7Dua6vb1te+gZZ39/X3V0dIjzVF5ebq1Xgl7TxMSEeN+I
wNwwx5fO0dGR6u7uFteH6PuMjY0l+kDp5uLiQo2MjIjP6TAHzAVzIv8F/Z2B
gQFxfwf1IvpB6agXT09PVX9/v3gsuA5jxxzI05j2Z5O9EvSJnktyLZH2JDBG
jDUTa0loJM9XcN+V5DrZK0HfyJQ4ewGMzefa1RWwb8YZNvbR0vxLeyU7Ozuq
tbXVaC8f9zydPA3qRpxpoy6W+tCdl+I8u7GxUfw6LtfiIQJnJr3A5PMOCJPn
UXzqpYUI1mA84yf1JQ0+N+gWOH/q6uoS73t1+zO8RkhnWaGB8+S+vj5xrwSB
2hW/E/JZdGig7zQ8PPxk3wk/wzW4lvhJsm/872cU8W98T/IsOPED1Kuzs7OJ
YO1KCCGEkHTyN+h5kMI=
               "], {{0, 0}, {120., 120.}}, {0, 255}, ColorFunction -> 
               RGBColor], AspectRatio -> 1, Axes -> False, Background -> None,
               Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
                Dynamic[
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])]}, PlotRange -> {{0, 120.}, {0, 120.}}], 
             StripOnInput -> False, CacheGraphics -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"SI Brochure Data\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/\
2d3a41b3-6123-481f-8316-e8c1bab191f2/"}, "HyperlinkURL"]}, "RowDefault"], 
                  "SummaryItem"]}], 
               TagBox["\"\"", "SummaryItem"]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Data from the SI Brochure published by the BIPM\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {
                10.869015724668278`, {0., 10.869015724668278`}}], Appearance -> 
              None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            StyleBox[
             GraphicsBox[
              RasterBox[CompressedData["
1:eJztmslOXEcUhpHjhZd5hbxFttlE8tZRHsBWiOUNkbClJC+THfMk5kkMQiDm
eZ7EPAsQ80yFv5WWkhsKn7p0dw38n3SQDZfuqvM1deucut99+O3dr6+ysrI+
v3n48u797z/k5r7/86dvH/7zc87nTx9zsn95m/Ml+2N27vcfvnn45h//xOuH
UIQQQghxgry8PIaHQb9hB/2GHfQbdtBv2EG/YQchhNheh15q0G/YQb9hB/2G
HfQbdtBv2EEIIXHJxPry41/DT4YP+LoOxxm3qS/fr4+bJxegX/qN4lr+6VcP
/dJvFNfyT7966Jd+o7iWf/rVQ7/0G8W1/NOvHvql3yiu5Z9+9dAv/UZxLf/0
q4d+6TeKa/mnXz30S79RXMs//eqhX/qN4lr+6VcP/dJvFNfyT7966Jd+o2Qi
nybQrx76pd8o9Eu/z7neFPrVQ7/0G4V+6fc515tCv3rol36j+O43DvRLvy5C
vzLol35dhH5lvCS/ptCvPehXBv3qoV970K8M+tVDv/agXxn0q4d+7RGC30xA
v3ro1x70K4N+9dCvPehXBv3qoV970K8M+tVDv/agXxm++iWEEGKXr90/TCJ0
fMyVj2O2hY+58nHMtvAxVz6O2RY+5srHMdvCx1z5OGZbMFeEkOdye3urenp6
GAHE3d3d//ze3Nyk9F7BsBdwSb/hBv2GHfQbdjzmF/ur4uJio9epqKhQLS0t
jDSGqZOSkpKEy8e4vr5Wk5OTqqysTPx67e3tam9vT7JFJ0Lu7+/V2tqaamho
EHuAs6mpqYTDrwH/c3NzqrKyUvz6zc3NanNzMwOzDxfUNUtLS6qmpkacdzia
n5/X/s1K3q+2tlb8fvX19WplZSXxGSQy4vw9wcny8vKjtW4c1tfXVVNTk/j9
q6qq1MLCQsreP0SwlmJNNbkfwsHGxkbaxrS7u6va2tqM9mDT09OP7uleKpeX
l2p0dDSxF5LmETlH7jPFwcGB6uzsVPn5+aLxlZaWqvHxcXV1dZWxMbrG2dmZ
GhwcVIWFhaKcIbfI8eHhobUxn5ycqN7eXlVQUCAac1FRkRoaGlLn5+fWxpxp
jo+PE31haY5wHXKK3LoCfMEb/Pk6h1Rjusb58NnH+ot1GOuxL2tQqjHdo/h4
78J+amZmJrG/cnUPkWpQ/6MPYLL3RI583nuiPlpcXFTV1dXieSNH6awBUgnq
fNT7qPul80P/AjkJqXZEHlZXV416bnV1dc72SuJ8bjF39B1dnE8q2draSvTO
pXlJ9kri9OBSTZz7Dua6vb1te+gZZ39/X3V0dIjzVF5ebq1Xgl7TxMSEeN+I
wNwwx5fO0dGR6u7uFteH6PuMjY0l+kDp5uLiQo2MjIjP6TAHzAVzIv8F/Z2B
gQFxfwf1IvpB6agXT09PVX9/v3gsuA5jxxzI05j2Z5O9EvSJnktyLZH2JDBG
jDUTa0loJM9XcN+V5DrZK0HfyJQ4ewGMzefa1RWwb8YZNvbR0vxLeyU7Ozuq
tbXVaC8f9zydPA3qRpxpoy6W+tCdl+I8u7GxUfw6LtfiIQJnJr3A5PMOCJPn
UXzqpYUI1mA84yf1JQ0+N+gWOH/q6uoS73t1+zO8RkhnWaGB8+S+vj5xrwSB
2hW/E/JZdGig7zQ8PPxk3wk/wzW4lvhJsm/872cU8W98T/IsOPED1Kuzs7OJ
YO1KCCGEkHTyN+h5kMI=
               "], {{0, 0}, {120., 120.}}, {0, 255}, ColorFunction -> 
               RGBColor], AspectRatio -> 1, Axes -> False, Background -> None,
               Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
                Dynamic[
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])]}, PlotRange -> {{0, 120.}, {0, 120.}}], 
             StripOnInput -> False, CacheGraphics -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"SI Brochure Data\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/\
2d3a41b3-6123-481f-8316-e8c1bab191f2/"}, "HyperlinkURL"]}, "RowDefault"], 
                  "SummaryItem"]}], 
               TagBox["\"\"", "SummaryItem"]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Data from the SI Brochure published by the BIPM\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"Mathematics\"", "\"Chemistry\"", 
                    "\"Engineering\"", "\"Physical Sciences\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"ContentTypes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"Text\"", "\"Numerical Data\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Keywords: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{",", "\",\"", "\"metrology\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Documentation: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "\"https://datarepository.wolframcloud.com/resources/\
2d3a41b3-6123-481f-8316-e8c1bab191f2/\"", 
                    "https://datarepository.wolframcloud.com/resources/\
2d3a41b3-6123-481f-8316-e8c1bab191f2/"}, "HyperlinkURL"], "SummaryItem"]}], 
               ""}, {
               RowBox[{
                 TagBox["\"Data Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  DynamicModuleBox[{
                   ResourceSystemClient`Private`typesetstorage$$ = 
                    ResourceSystemClient`Private`typesetstorageLocation, 
                    ResourceSystemClient`Private`info$$ = <|
                    "RepositoryLocation" -> 
                    URL["https://www.wolframcloud.com/obj/resourcesystem/api/\
1.0"], "MyAccount" -> False, "Name" -> "SI Brochure Data", "UUID" -> 
                    "2d3a41b3-6123-481f-8316-e8c1bab191f2", 
                    "ContentElementLocations" -> <||>, "ResourceType" -> 
                    "DataResource", "ContentSize" -> Missing["NotAvailable"], 
                    "ContentElements" -> {
                    "base-quantities-and-dimensions", 
                    "base-quantities-and-units", 
                    "coherent-derived-units-in-the-SI-expressed-terms-of-base-\
units", "coherent-derived-units-whose-names-and-symbols-include-SI-coherent-\
derived-units-with-special-names-and-symbols", "Dataset", 
                    "defining-constants-of-the-SI", "RawData", "SI-prefixes", 
                    "SI-units-with-special-names-and-symbols"}, "Version" -> 
                    "1.0.0", "Description" -> 
                    "Data from the SI Brochure published by the BIPM", 
                    "ContentTypes" -> {"Text", "Numerical Data"}, 
                    "Categories" -> {
                    "Mathematics", "Chemistry", "Engineering", 
                    "Physical Sciences"}, "Keywords" -> {"metrology"}, 
                    "Attributes" -> {
                    "Computable", "LocalCopyable", "CloudCopyable", 
                    "Multipart"}, "LatestUpdate" -> 
                    DateObject[{2022, 11, 4}, "Day"], "DefaultReturnFormat" -> 
                    "wdf", "AutoUpdate" -> Automatic, 
                    "Compatibility" -> <|
                    "WolframLanguageVersionRequired" -> "10.0"|>, 
                    "ContentElementAccessType" -> "Dataset", 
                    "ContributorInformation" -> <|
                    "PublisherID" -> "PeterBurbery", "DisplayName" -> 
                    "Peter Burbery", "ContributedBy" -> 
                    "Peter Cullen Burbery"|>, 
                    "DatedElementVersions" -> <|
                    DateObject[{
                    2022, 11, 4, 14, 18, 28.991675`8.21484828905595}, 
                    "Instant", "Gregorian", -5.] -> "1.0.0"|>, 
                    "DefaultContentElement" -> "Dataset", "Details" -> 
                    Missing[], "DocumentationLink" -> 
                    URL["https://datarepository.wolframcloud.com/resources/\
2d3a41b3-6123-481f-8316-e8c1bab191f2/"], 
                    "InformationElements" -> <|
                    "Dataset" -> 
                    Dataset[<|
                    "hyperfine-transition-frequency-of-Cs" -> <|
                    "numerical-value" -> 9192631770, "unit" -> "Hz"|>, 
                    "speed-of-light-in-vacuum" -> <|
                    "numerical-value" -> 299792458, "unit" -> 
                    "m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
                    "Planck-constant" -> <|
                    "numerical-value" -> 6.6260701500000015`*^-34, "unit" -> 
                    "J s"|>, 
                    "elementary-charge" -> <|
                    "numerical-value" -> 1.6021766340000001`*^-19, "unit" -> 
                    "C"|>, "Boltzmann-constant" -> <|
                    "numerical-value" -> 1.380649*^-23, "unit" -> 
                    "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
                    "Avogadro-constant" -> <|
                    "numerical-value" -> 6.02214076*^23, "unit" -> 
                    "\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)"|>, 
                    "luminous-efficacy" -> <|
                    "numerical-value" -> 683, "unit" -> 
                    "lm \!\(\*SuperscriptBox[\(W\), \(-1\)]\)"|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"numerical-value", "unit"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 7], <||>], 
                    "defining-constants-of-the-SI" -> 
                    Dataset[<|
                    "hyperfine-transition-frequency-of-Cs" -> <|
                    "numerical-value" -> 9192631770, "unit" -> "Hz"|>, 
                    "speed-of-light-in-vacuum" -> <|
                    "numerical-value" -> 299792458, "unit" -> 
                    "m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
                    "Planck-constant" -> <|
                    "numerical-value" -> 6.6260701500000015`*^-34, "unit" -> 
                    "J s"|>, 
                    "elementary-charge" -> <|
                    "numerical-value" -> 1.6021766340000001`*^-19, "unit" -> 
                    "C"|>, "Boltzmann-constant" -> <|
                    "numerical-value" -> 1.380649*^-23, "unit" -> 
                    "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
                    "Avogadro-constant" -> <|
                    "numerical-value" -> 6.02214076*^23, "unit" -> 
                    "\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)"|>, 
                    "luminous-efficacy" -> <|
                    "numerical-value" -> 683, "unit" -> 
                    "lm \!\(\*SuperscriptBox[\(W\), \(-1\)]\)"|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"numerical-value", "unit"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 7], <||>], 
                    "base-quantities-and-units" -> 
                    Dataset[<|
                    "time" -> <|
                    "quantity-name" -> "time", "typical-quantity-symbol" -> 
                    "t", "unit-name" -> "second", "unit-symbol" -> "s"|>, 
                    "length" -> <|
                    "quantity-name" -> "length", "typical-quantity-symbol" -> 
                    "l", "unit-name" -> "meter", "unit-symbol" -> "m"|>, 
                    "mass" -> <|
                    "quantity-name" -> "mass", "typical-quantity-symbol" -> 
                    "l", "unit-name" -> "kilogram", "unit-symbol" -> "kg"|>, 
                    "electric-current" -> <|
                    "quantity-name" -> "electric-current", 
                    "typical-quantity-symbol" -> "i", "unit-name" -> "ampere",
                     "unit-symbol" -> "A"|>, 
                    "thermodynamic-temperature" -> <|
                    "quantity-name" -> "thermodynamic-temperature", 
                    "typical-quantity-symbol" -> "T", "unit-name" -> "kelvin",
                     "unit-symbol" -> "K"|>, 
                    "amount-of-substance" -> <|
                    "quantity-name" -> "amount-of-substance", 
                    "typical-quantity-symbol" -> "n", "unit-name" -> "mole", 
                    "unit-symbol" -> "mol"|>, 
                    "luminous-intensity" -> <|
                    "quantity-name" -> "luminous-intensity", 
                    "typical-quantity-symbol" -> 
                    "\!\(\*SubscriptBox[\(I\), \(v\)]\)", "unit-name" -> 
                    "candela", "unit-symbol" -> "cd"|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    
                    TypeSystem`Struct[{
                    "quantity-name", "typical-quantity-symbol", "unit-name", 
                    "unit-symbol"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 7], <||>], 
                    "base-quantities-and-dimensions" -> 
                    Dataset[<|
                    "time" -> <|
                    "typical-symbol-for-quantity" -> "t", 
                    "symbol-for-dimension" -> "T"|>, 
                    "length" -> <|
                    "typical-symbol-for-quantity" -> "l", 
                    "symbol-for-dimension" -> "L"|>, 
                    "mass" -> <|
                    "typical-symbol-for-quantity" -> "m", 
                    "symbol-for-dimension" -> "M"|>, 
                    "electric-current" -> <|
                    "typical-symbol-for-quantity" -> "i", 
                    "symbol-for-dimension" -> "I"|>, 
                    "thermodynamic-temperature" -> <|
                    "typical-symbol-for-quantity" -> "T", 
                    "symbol-for-dimension" -> "\[CapitalTheta]"|>, 
                    "amount-of-substance" -> <|
                    "typical-symbol-for-quantity" -> "n", 
                    "symbol-for-dimension" -> "N"|>, 
                    "luminous-intensity" -> <|
                    "typical-symbol-for-quantity" -> 
                    "\!\(\*SubscriptBox[\(I\), \(v\)]\)", 
                    "symbol-for-dimension" -> "J"|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    
                    TypeSystem`Struct[{
                    "typical-symbol-for-quantity", "symbol-for-dimension"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 7], <||>], 
                    "SI-units-with-special-names-and-symbols" -> 
                    Dataset[<|
                    "plane-angle" -> <|
                    "special-name-of-unit" -> "radian", 
                    "unit-expressed-terms-of-base-units" -> "rad=m/m", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "solid-angle" -> <|
                    "special-name-of-unit" -> "steradian", 
                    "unit-expressed-terms-of-base-units" -> 
                    "sr=\!\(\*SuperscriptBox[\(m\), \
\(2\)]\)/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "frequency" -> <|
                    "special-name-of-unit" -> "hertz", 
                    "unit-expressed-terms-of-base-units" -> 
                    "Hz=\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "force" -> <|
                    "special-name-of-unit" -> "newton", 
                    "unit-expressed-terms-of-base-units" -> 
                    "N=kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "pressure-or-stress" -> <|
                    "special-name-of-unit" -> "pascal", 
                    "unit-expressed-terms-of-base-units" -> 
                    "Pa=kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "energy-or-work-or-amount-of-heat" -> <|
                    "special-name-of-unit" -> "joule", 
                    "unit-expressed-terms-of-base-units" -> 
                    "J=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "N m"|>, 
                    "power-or-radiant-flux" -> <|
                    "special-name-of-unit" -> "watt", 
                    "unit-expressed-terms-of-base-units" -> 
                    "W=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "J/s"|>, 
                    "electric-charge" -> <|
                    "special-name-of-unit" -> "coulomb", 
                    "unit-expressed-terms-of-base-units" -> "C=A s", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "electric-potential-difference" -> <|
                    "special-name-of-unit" -> "volt", 
                    "unit-expressed-terms-of-base-units" -> 
                    "V=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "W/A"|>, 
                    "capacitance" -> <|
                    "special-name-of-unit" -> "farad", 
                    "unit-expressed-terms-of-base-units" -> 
                    "F=\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "C/V"|>, 
                    "electric-resistance" -> <|
                    "special-name-of-unit" -> "ohm", 
                    "unit-expressed-terms-of-base-units" -> 
                    "\[CapitalOmega]=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "V/A"|>, 
                    "electric-conductance" -> <|
                    "special-name-of-unit" -> "siemens", 
                    "unit-expressed-terms-of-base-units" -> 
                    "S=\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\) \!\(\*SuperscriptBox[\(s\), \(3\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "A/V"|>, 
                    "magnetic-flux" -> <|
                    "special-name-of-unit" -> "weber", 
                    "unit-expressed-terms-of-base-units" -> 
                    "Wb=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "V s"|>, 
                    "magnetic-flux-density" -> <|
                    "special-name-of-unit" -> "tesla", 
                    "unit-expressed-terms-of-base-units" -> 
                    
                    "T=kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> 
                    "Wb/\!\(\*SuperscriptBox[\(m\), \(2\)]\)"|>, 
                    "inductance" -> <|
                    "special-name-of-unit" -> "henry", 
                    "unit-expressed-terms-of-base-units" -> 
                    "H=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "Wb/A"|>, 
                    "Celsius-temperature" -> <|
                    "special-name-of-unit" -> "degree Celsius", 
                    "unit-expressed-terms-of-base-units" -> "\[Degree]C=K", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "luminous-flux" -> <|
                    "special-name-of-unit" -> "lumen", 
                    "unit-expressed-terms-of-base-units" -> "lm=cd sr", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "illuminance" -> <|
                    "special-name-of-unit" -> "lux", 
                    "unit-expressed-terms-of-base-units" -> 
                    "lx=cd sr \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> 
                    "lm/\!\(\*SuperscriptBox[\(m\), \(2\)]\)"|>, 
                    "activity-referred-to-a-radionuclide" -> <|
                    "special-name-of-unit" -> "becquerel", 
                    "unit-expressed-terms-of-base-units" -> 
                    "Bq=\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
                    "absorbed-dose-or-kerma" -> <|
                    "special-name-of-unit" -> "gray", 
                    "unit-expressed-terms-of-base-units" -> 
                    "Gy=\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "J/kg"|>, 
                    "dose-equivalent" -> <|
                    "special-name-of-unit" -> "sievert", 
                    "unit-expressed-terms-of-base-units" -> 
                    "Sv=\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> "J/kg"|>, 
                    "catalytic-activity" -> <|
                    "special-name-of-unit" -> "katal", 
                    "unit-expressed-terms-of-base-units" -> 
                    "kat=mol \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                    "unit-expressed-in-terms-of-other-SI-units" -> ""|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    
                    TypeSystem`Struct[{
                    "special-name-of-unit", 
                    "unit-expressed-terms-of-base-units", 
                    "unit-expressed-in-terms-of-other-SI-units"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 22], <||>], 
                    "coherent-derived-units-in-the-SI-expressed-terms-of-base-\
units" -> Dataset[<|"area" -> <|
                    "typical-symbol" -> "A", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(m\), \(2\)]\)"|>, 
                    "volume" -> <|
                    "typical-symbol" -> "V", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(m\), \(3\)]\)"|>, 
                    "speed-or-velocity" -> <|
                    "typical-symbol" -> "v", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
                    "acceleration" -> <|
                    "typical-symbol" -> "a", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "m \!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
                    "wavenumber" -> <|
                    "typical-symbol" -> "\[Sigma]", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(m\), \(-1\)]\)"|>, 
                    "density-or-mass-density" -> <|
                    "typical-symbol" -> "\[Rho]", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
                    "surface-density" -> <|
                    "typical-symbol" -> 
                    "\!\(\*SubscriptBox[\(\[Rho]\), \(A\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
                    "specific-volume" -> <|
                    "typical-symbol" -> "\[Nu]", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(m\), \(3\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)"|>, 
                    "current-density" -> <|
                    "typical-symbol" -> "j", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "A \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
                    "magnetic-field-strength" -> <|
                    "typical-symbol" -> "H", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "A \!\(\*SuperscriptBox[\(m\), \(-1\)]\)"|>, 
                    "amount-of-substance-concentration" -> <|
                    "typical-symbol" -> "c", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "mol \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
                    "mass-concentration" -> <|
                    "typical-symbol" -> "\[Rho]-or-\[Gamma]", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
                    "luminance" -> <|
                    "typical-symbol" -> "\!\(\*SubscriptBox[\(L\), \(v\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "cd \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    
                    TypeSystem`Struct[{
                    "typical-symbol", 
                    "derived-unit-expressed-in-terms-of-base-units"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 13], <||>], 
                    "coherent-derived-units-whose-names-and-symbols-include-\
SI-coherent-derived-units-with-special-names-and-symbols" -> 
                    Dataset[<|
                    "dynamic-viscosity" -> <|
                    "name-of-coherent-derived-unit" -> "pascal second", 
                    "symbol" -> "Pa s", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
                    "moment-of-force" -> <|
                    "name-of-coherent-derived-unit" -> "newton meter", 
                    "symbol" -> "N m", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
                    "surface-tension" -> <|
                    "name-of-coherent-derived-unit" -> "newton per meter", 
                    "symbol" -> "N \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
                    "angular-velocity-or-angular-frequency" -> <|
                    "name-of-coherent-derived-unit" -> "radian per second", 
                    "symbol" -> "rad \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
                    "angular-acceleration" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "radian per second squared", "symbol" -> 
                    "rad/\!\(\*SuperscriptBox[\(s\), \(2\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
                    "heat-flux-density-or-irradiance" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "watt per square meter", "symbol" -> 
                    "W/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
                    "heat-capacity-or-entropy" -> <|
                    "name-of-coherent-derived-unit" -> "joule per kelvin", 
                    "symbol" -> "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(K\), \
\(-1\)]\)"|>, "specific-heat-capacity-or-specific-entropy" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "joule per kilogram kelvin", "symbol" -> 
                    "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(K\), \
\(-1\)]\)"|>, "specific-energy" -> <|
                    "name-of-coherent-derived-unit" -> "joule per kilogram", 
                    "symbol" -> "J \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
                    "thermal-conductivity" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "watt per meter kelvin", "symbol" -> 
                    "W \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
                    "energy-density" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "joule per cubic meter", "symbol" -> 
                    "J \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    
                    "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
                    "electric-field-strength" -> <|
                    "name-of-coherent-derived-unit" -> "volt per meter", 
                    "symbol" -> "V \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-1\)]\)"|>, 
                    "electric-charge-density" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "coulomb per cubic meter", "symbol" -> 
                    "C \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "A s \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
                    "surface-charge-density" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "coulomb per square meter", "symbol" -> 
                    "C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
                    "electric-flux-density-or-electric-displacement" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "coulomb per square meter", "symbol" -> 
                    "C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
                    "permittivity" -> <|
                    "name-of-coherent-derived-unit" -> "farad per meter", 
                    "symbol" -> "F \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-3\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)"|>, 
                    "permeability" -> <|
                    "name-of-coherent-derived-unit" -> "henry per meter", 
                    "symbol" -> "H \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-2\)]\)"|>, 
                    "molar-energy" -> <|
                    "name-of-coherent-derived-unit" -> "joule per mole", 
                    "symbol" -> "J \!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \
\(-1\)]\)"|>, "molar-entropy-or-molar-heat-capacity" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "joule per mole kelvin", "symbol" -> 
                    "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
                    "exposure(x-and-\[Gamma]-rays)" -> <|
                    "name-of-coherent-derived-unit" -> "coulomb per kilogram",
                     "symbol" -> "C \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "A s \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)"|>, 
                    "absorbed-dose-rate" -> <|
                    "name-of-coherent-derived-unit" -> "gray per second", 
                    "symbol" -> "Gy \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
                    "radiant-intensity" -> <|
                    "name-of-coherent-derived-unit" -> "watt per steradian", 
                    "symbol" -> "W \!\(\*SuperscriptBox[\(sr\), \(-1\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
                    "radiance" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "watt per square meter steradian", "symbol" -> 
                    "W \!\(\*SuperscriptBox[\(sr\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
                    "catalytic-activity-concentration" -> <|
                    "name-of-coherent-derived-unit" -> 
                    "katal per cubic meter", "symbol" -> 
                    "kat \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                    "derived-unit-expressed-in-terms-of-base-units" -> 
                    "mol \!\(\*SuperscriptBox[\(s\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    
                    TypeSystem`Struct[{
                    "name-of-coherent-derived-unit", "symbol", 
                    "derived-unit-expressed-in-terms-of-base-units"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 24], <||>], "SI-prefixes" -> 
                    Dataset[<|
                    "\!\(\*SuperscriptBox[\(10\), \(3\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(3\)]\)", 
                    "name" -> "kilo", "symbol" -> "k"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(6\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(6\)]\)", 
                    "name" -> "mega", "symbol" -> "M"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(9\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(9\)]\)", 
                    "name" -> "giga", "symbol" -> "G"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(12\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(12\)]\)", 
                    "name" -> "tera", "symbol" -> "T"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(15\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(15\)]\)", 
                    "name" -> "peta", "symbol" -> "P"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(18\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(18\)]\)", 
                    "name" -> "exa", "symbol" -> "E"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(21\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(21\)]\)", 
                    "name" -> "zetta", "symbol" -> "Z"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(24\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(24\)]\)", 
                    "name" -> "yotta", "symbol" -> "Y"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-3\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-3\)]\)", 
                    "name" -> "milli", "symbol" -> "m"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-6\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-6\)]\)", 
                    "name" -> "micro", "symbol" -> "\[Mu]"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-9\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-9\)]\)", 
                    "name" -> "nano", "symbol" -> "n"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-12\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-12\)]\)", 
                    "name" -> "pico", "symbol" -> "p"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-15\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-15\)]\)", 
                    "name" -> "femto", "symbol" -> "f"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-18\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-18\)]\)", 
                    "name" -> "atto", "symbol" -> "a"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-21\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-21\)]\)", 
                    "name" -> "zepto", "symbol" -> "z"|>, 
                    "\!\(\*SuperscriptBox[\(10\), \(-24\)]\)" -> <|
                    "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-24\)]\)", 
                    "name" -> "yocto", "symbol" -> "y"|>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"factor", "name", "symbol"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[String]}], 16], <||>], "Length" -> 7, 
                    "Dimensions" -> {7, 2}|>, "LicensingInformation" -> <||>, 
                    "Originator" -> Missing["NoInput"], "PublisherUUID" -> 
                    "66a2fe7a-2713-4e79-8dfa-60404b231fa9", 
                    "RelatedSymbols" -> {
                    "UnitSimplify", "NondimensionalizationTransform"}, 
                    "ReleaseDate" -> DateObject[{2022, 11, 4}, "Day"], 
                    "SeeAlso" -> {"PlanckUnitConversion"}, "ShortName" -> 
                    "SI-Brochure-Data", "SourceMetadata" -> <|"Citation" -> {
                    TextData[{
                    ButtonBox[
                    "NIST SI Brochure", BaseStyle -> "Hyperlink", ButtonData -> {
                    URL[
                    "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\
NIST.SP.330-2019.pdf"], None}, ButtonNote -> 
                    "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\
NIST.SP.330-2019.pdf"], "."}]}|>, "ResourceLocations" -> {
                    LocalObject[
                    "file:///C:/Users/burbery1/AppData/Roaming/Wolfram/\
Objects/Resources/2d3/2d3a41b3-6123-481f-8316-e8c1bab191f2"]}, 
                    "DownloadedVersion" -> None|>}, 
                   DynamicBox[
                    ToBoxes[
                    ResourceSystemClient`Private`info$$ = 
                    ResourceSystemClient`Private`resourceInfo[
                    "2d3a41b3-6123-481f-8316-e8c1bab191f2"]; If[
                    AssociationQ[ResourceSystemClient`Private`info$$], 
                    ResourceSystemClient`Private`typesetstorage$$[
                    Lookup[
                    ResourceSystemClient`Private`info$$, 
                    "ContentElementLocations", None]], 
                    Missing["NotAvailable"]], StandardForm], 
                    ImageSizeCache -> {4., {0., 0.}}], 
                   DynamicModuleValues :> {}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"2d3a41b3-6123-481f-8316-e8c1bab191f2\"", "SummaryItem"]}],
                ""}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.0.0\"", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"Missing", "[", "\"NotAvailable\"", "]"}], 
                  "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   RowBox[{
                    "\"base-quantities-and-dimensions\"", ",", 
                    "\"base-quantities-and-units\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",",
                     "\"SI-prefixes\"", ",", 
                    "\"SI-units-with-special-names-and-symbols\""}], 
                   Short[#, 2]& ], "SummaryItem"]}], ""}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ResourceObject[<|
   "Name" -> "SI Brochure Data", "UUID" -> 
    "2d3a41b3-6123-481f-8316-e8c1bab191f2", "ResourceType" -> "DataResource", 
    "Version" -> "1.0.0", "Description" -> 
    "Data from the SI Brochure published by the BIPM", "RepositoryLocation" -> 
    URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
    "ContentSize" -> Missing["NotAvailable"], 
    "ContentElements" -> {
     "base-quantities-and-dimensions", "base-quantities-and-units", 
      "coherent-derived-units-in-the-SI-expressed-terms-of-base-units", 
      "coherent-derived-units-whose-names-and-symbols-include-SI-coherent-\
derived-units-with-special-names-and-symbols", "Dataset", 
      "defining-constants-of-the-SI", "RawData", "SI-prefixes", 
      "SI-units-with-special-names-and-symbols"}|>, {
   ResourceSystemBase -> 
    "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8774333877042627`*^9, 3.877433392992119*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"0feef5a7-4fe6-4286-8da8-b948027a523d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResourceData", "[", 
  RowBox[{
   RowBox[{"ResourceObject", "[", "\"\<SI Brochure Data\>\"", "]"}], ",", 
   "All"}], "]"}]], "Input",
 CellChangeTimes->{{3.8774333782515693`*^9, 3.877433416788539*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"0a2b98a3-c456-4db9-99d3-dbfd05845e32"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"base-quantities-and-dimensions\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "time" -> <|
           "typical-symbol-for-quantity" -> "t", "symbol-for-dimension" -> 
            "T"|>, "length" -> <|
           "typical-symbol-for-quantity" -> "l", "symbol-for-dimension" -> 
            "L"|>, "mass" -> <|
           "typical-symbol-for-quantity" -> "m", "symbol-for-dimension" -> 
            "M"|>, "electric-current" -> <|
           "typical-symbol-for-quantity" -> "i", "symbol-for-dimension" -> 
            "I"|>, "thermodynamic-temperature" -> <|
           "typical-symbol-for-quantity" -> "T", "symbol-for-dimension" -> 
            "\[CapitalTheta]"|>, 
          "amount-of-substance" -> <|
           "typical-symbol-for-quantity" -> "n", "symbol-for-dimension" -> 
            "N"|>, "luminous-intensity" -> <|
           "typical-symbol-for-quantity" -> 
            "\!\(\*SubscriptBox[\(I\), \(v\)]\)", "symbol-for-dimension" -> 
            "J"|>|>, "AllowEmbedding" -> True, "InitialShape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[0]} -> 
           1, {All, "typical-symbol-for-quantity"} -> 
           1, {All, "symbol-for-dimension"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[280.], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "typical-symbol-for-quantity" -> 
                TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
                "symbol-for-dimension" -> 
                TypeSystem`PackageScope`AtomShape[33.6]|>], 
              DirectedInfinity[1], 2, {All}]]], 7, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "typical-symbol-for-quantity", "symbol-for-dimension"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 7], "Meta" -> <||>, "RowTarget" -> 20, 
        "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[0]} -> 
           1, {All, "typical-symbol-for-quantity"} -> 
           1, {All, "symbol-for-dimension"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[280.], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "typical-symbol-for-quantity" -> 
                TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
                "symbol-for-dimension" -> 
                TypeSystem`PackageScope`AtomShape[33.6]|>], 
              DirectedInfinity[1], 2, {All}]]], 7, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "typical-symbol-for-quantity", "symbol-for-dimension"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 7], "Path" -> {}, "DisplayedRowCount" -> 
        7, "DisplayedColumnCount" -> 2, "DataRowCount" -> 7, 
        "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["typical-symbol-for-quantity", 
                    Style[
                    "typical-symbol-for-quantity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "typical-symbol-for-quantity"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "typical-symbol-for-quantity"}, "ColumnHeader", True],
                   "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["symbol-for-dimension", 
                    Style[
                    "symbol-for-dimension", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "symbol-for-dimension"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "symbol-for-dimension"}, "ColumnHeader", True], 
                  "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["time", 
                    Style[
                    "time", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["time"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["t", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"], 
                    Key["typical-symbol-for-quantity"]}, "Item", False], 
                  "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["T", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"], 
                    Key["symbol-for-dimension"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["length", 
                    Style[
                    "length", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["length"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["l", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"], 
                    Key["typical-symbol-for-quantity"]}, "Item", False], 
                  "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["L", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"], 
                    Key["symbol-for-dimension"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["mass", 
                    Style[
                    "mass", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["mass"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["m", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"], 
                    Key["typical-symbol-for-quantity"]}, "Item", False], 
                  "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["M", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"], 
                    Key["symbol-for-dimension"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-current", 
                    Style[
                    "electric-current", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-current"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["i", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"], 
                    Key["typical-symbol-for-quantity"]}, "Item", False], 
                  "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["I", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"], 
                    Key["symbol-for-dimension"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["thermodynamic-temperature", 
                    Style[
                    "thermodynamic-temperature", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["thermodynamic-temperature"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["T", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"], 
                    Key["typical-symbol-for-quantity"]}, "Item", False], 
                  "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\[CapitalTheta]", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"], 
                    Key["symbol-for-dimension"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["amount-of-substance", 
                    Style[
                    "amount-of-substance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["amount-of-substance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["n", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"], 
                    Key["typical-symbol-for-quantity"]}, "Item", False], 
                  "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["N", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"], 
                    Key["symbol-for-dimension"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["luminous-intensity", 
                    Style[
                    "luminous-intensity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["luminous-intensity"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"]}, "RowHeader", False], "Mouse"],
                  ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SubscriptBox[\(I\), \(v\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"], 
                    Key["typical-symbol-for-quantity"]}, "Item", False], 
                  "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"], 
                    Key["symbol-for-dimension"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{734., {113.63403309800196`, 119.36596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{734., {113.63403309800196`, 119.36596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"base-quantities-and-units\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "time" -> <|
           "quantity-name" -> "time", "typical-quantity-symbol" -> "t", 
            "unit-name" -> "second", "unit-symbol" -> "s"|>, 
          "length" -> <|
           "quantity-name" -> "length", "typical-quantity-symbol" -> "l", 
            "unit-name" -> "meter", "unit-symbol" -> "m"|>, 
          "mass" -> <|
           "quantity-name" -> "mass", "typical-quantity-symbol" -> "l", 
            "unit-name" -> "kilogram", "unit-symbol" -> "kg"|>, 
          "electric-current" -> <|
           "quantity-name" -> "electric-current", "typical-quantity-symbol" -> 
            "i", "unit-name" -> "ampere", "unit-symbol" -> "A"|>, 
          "thermodynamic-temperature" -> <|
           "quantity-name" -> "thermodynamic-temperature", 
            "typical-quantity-symbol" -> "T", "unit-name" -> "kelvin", 
            "unit-symbol" -> "K"|>, 
          "amount-of-substance" -> <|
           "quantity-name" -> "amount-of-substance", 
            "typical-quantity-symbol" -> "n", "unit-name" -> "mole", 
            "unit-symbol" -> "mol"|>, 
          "luminous-intensity" -> <|
           "quantity-name" -> "luminous-intensity", "typical-quantity-symbol" -> 
            "\!\(\*SubscriptBox[\(I\), \(v\)]\)", "unit-name" -> "candela", 
            "unit-symbol" -> "cd"|>|>, "AllowEmbedding" -> True, 
        "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[1]} -> 
           1, {All, "quantity-name"} -> 1, {All, "typical-quantity-symbol"} -> 
           1, {All, "unit-name"} -> 1, {All, "unit-symbol"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[280.], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "quantity-name" -> TypeSystem`PackageScope`AtomShape[280.], 
                "typical-quantity-symbol" -> 
                TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
                "unit-name" -> 
                TypeSystem`PackageScope`AtomShape[89.60000000000001], 
                "unit-symbol" -> TypeSystem`PackageScope`AtomShape[33.6]|>], 
              DirectedInfinity[1], 4, {All}]]], 7, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "quantity-name", "typical-quantity-symbol", "unit-name", 
            "unit-symbol"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 7], "Meta" -> <||>, "RowTarget" -> 20, 
        "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[1]} -> 
           1, {All, "quantity-name"} -> 1, {All, "typical-quantity-symbol"} -> 
           1, {All, "unit-name"} -> 1, {All, "unit-symbol"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[280.], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "quantity-name" -> TypeSystem`PackageScope`AtomShape[280.], 
                "typical-quantity-symbol" -> 
                TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
                "unit-name" -> 
                TypeSystem`PackageScope`AtomShape[89.60000000000001], 
                "unit-symbol" -> TypeSystem`PackageScope`AtomShape[33.6]|>], 
              DirectedInfinity[1], 4, {All}]]], 7, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "quantity-name", "typical-quantity-symbol", "unit-name", 
            "unit-symbol"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 7], "Path" -> {}, "DisplayedRowCount" -> 
        7, "DisplayedColumnCount" -> 4, "DataRowCount" -> 7, 
        "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["quantity-name", 
                    Style[
                    "quantity-name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "quantity-name"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "quantity-name"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["typical-quantity-symbol", 
                    Style[
                    "typical-quantity-symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "typical-quantity-symbol"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "typical-quantity-symbol"}, "ColumnHeader", True], 
                  "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["unit-name", 
                    Style[
                    "unit-name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "unit-name"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "unit-name"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["unit-symbol", 
                    Style[
                    "unit-symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "unit-symbol"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "unit-symbol"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["time", 
                    Style[
                    "time", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["time"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["time", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"], 
                    Key["quantity-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["t", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"], 
                    Key["typical-quantity-symbol"]}, "Item", False], "Mouse"],
                  ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["second", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"], 
                    Key["unit-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{89.60000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["s", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["time"], 
                    Key["unit-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["length", 
                    Style[
                    "length", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["length"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["length", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"], 
                    Key["quantity-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["l", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"], 
                    Key["typical-quantity-symbol"]}, "Item", False], "Mouse"],
                  ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"], 
                    Key["unit-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{89.60000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["m", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["length"], 
                    Key["unit-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["mass", 
                    Style[
                    "mass", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["mass"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["mass", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"], 
                    Key["quantity-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["l", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"], 
                    Key["typical-quantity-symbol"]}, "Item", False], "Mouse"],
                  ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kilogram", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"], 
                    Key["unit-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{89.60000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kg", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass"], 
                    Key["unit-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-current", 
                    Style[
                    "electric-current", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-current"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["electric-current", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"], 
                    Key["quantity-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["i", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"], 
                    Key["typical-quantity-symbol"]}, "Item", False], "Mouse"],
                  ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["ampere", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"], 
                    Key["unit-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{89.60000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-current"], 
                    Key["unit-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["thermodynamic-temperature", 
                    Style[
                    "thermodynamic-temperature", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["thermodynamic-temperature"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["thermodynamic-temperature", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"], 
                    Key["quantity-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["T", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"], 
                    Key["typical-quantity-symbol"]}, "Item", False], "Mouse"],
                  ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kelvin", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"], 
                    Key["unit-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{89.60000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["K", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermodynamic-temperature"], 
                    Key["unit-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["amount-of-substance", 
                    Style[
                    "amount-of-substance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["amount-of-substance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["amount-of-substance", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"], 
                    Key["quantity-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["n", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"], 
                    Key["typical-quantity-symbol"]}, "Item", False], "Mouse"],
                  ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["mole", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"], 
                    Key["unit-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{89.60000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["mol", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance"], 
                    Key["unit-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["luminous-intensity", 
                    Style[
                    "luminous-intensity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["luminous-intensity"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"]}, "RowHeader", False], "Mouse"],
                  ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["luminous-intensity", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"], 
                    Key["quantity-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SubscriptBox[\(I\), \(v\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"], 
                    Key["typical-quantity-symbol"]}, "Item", False], "Mouse"],
                  ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["candela", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"], 
                    Key["unit-name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{89.60000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["cd", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-intensity"], 
                    Key["unit-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{1056., {113.63403309800196`, 119.36596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{1056., {113.63403309800196`, 119.36596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"coherent-derived-units-in-the-SI-expressed-terms-of-base-\
units\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "area" -> <|
           "typical-symbol" -> "A", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(m\), \(2\)]\)"|>, 
          "volume" -> <|
           "typical-symbol" -> "V", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(m\), \(3\)]\)"|>, 
          "speed-or-velocity" -> <|
           "typical-symbol" -> "v", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
          "acceleration" -> <|
           "typical-symbol" -> "a", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "m \!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
          "wavenumber" -> <|
           "typical-symbol" -> "\[Sigma]", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(m\), \(-1\)]\)"|>, 
          "density-or-mass-density" -> <|
           "typical-symbol" -> "\[Rho]", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
          "surface-density" -> <|
           "typical-symbol" -> "\!\(\*SubscriptBox[\(\[Rho]\), \(A\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
          "specific-volume" -> <|
           "typical-symbol" -> "\[Nu]", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(m\), \(3\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)"|>, 
          "current-density" -> <|
           "typical-symbol" -> "j", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "A \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
          "magnetic-field-strength" -> <|
           "typical-symbol" -> "H", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "A \!\(\*SuperscriptBox[\(m\), \(-1\)]\)"|>, 
          "amount-of-substance-concentration" -> <|
           "typical-symbol" -> "c", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "mol \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
          "mass-concentration" -> <|
           "typical-symbol" -> "\[Rho]-or-\[Gamma]", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
          "luminance" -> <|
           "typical-symbol" -> "\!\(\*SubscriptBox[\(L\), \(v\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "cd \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>|>, "AllowEmbedding" -> 
        True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[2]} -> 
           1, {All, "typical-symbol"} -> 
           1, {All, "derived-unit-expressed-in-terms-of-base-units"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[257.6], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "typical-symbol" -> 
                TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
                "derived-unit-expressed-in-terms-of-base-units" -> 
                TypeSystem`PackageScope`AtomShape[560.]|>], 
              DirectedInfinity[1], 2, {All}]]], 13, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "typical-symbol", 
            "derived-unit-expressed-in-terms-of-base-units"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 13], "Meta" -> <||>, "RowTarget" -> 20,
         "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[2]} -> 
           1, {All, "typical-symbol"} -> 
           1, {All, "derived-unit-expressed-in-terms-of-base-units"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[257.6], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "typical-symbol" -> 
                TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
                "derived-unit-expressed-in-terms-of-base-units" -> 
                TypeSystem`PackageScope`AtomShape[560.]|>], 
              DirectedInfinity[1], 2, {All}]]], 13, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "typical-symbol", 
            "derived-unit-expressed-in-terms-of-base-units"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 13], "Path" -> {}, "DisplayedRowCount" -> 
        13, "DisplayedColumnCount" -> 2, "DataRowCount" -> 13, 
        "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["typical-symbol", 
                    Style[
                    "typical-symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "typical-symbol"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "typical-symbol"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["derived-unit-expressed-in-terms-of-base-units", 
                    Style[
                    "derived-unit-expressed-in-terms-of-base-units", 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "derived-unit-expressed-in-terms-of-base-units"}, 
                    1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "derived-unit-expressed-in-terms-of-base-units"}, 
                   "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["area", 
                    Style[
                    "area", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["area"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["area"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["A", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["area"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["area"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["volume", 
                    Style[
                    "volume", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["volume"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["volume"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["V", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["volume"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(m\), \(3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["volume"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["speed-or-velocity", 
                    Style[
                    "speed-or-velocity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["speed-or-velocity"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-or-velocity"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["v", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-or-velocity"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-or-velocity"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["acceleration", 
                    Style[
                    "acceleration", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["acceleration"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["acceleration"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["a", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["acceleration"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["m \!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["acceleration"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["wavenumber", 
                    Style[
                    "wavenumber", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["wavenumber"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["wavenumber"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\[Sigma]", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["wavenumber"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["wavenumber"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["density-or-mass-density", 
                    Style[
                    "density-or-mass-density", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["density-or-mass-density"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["density-or-mass-density"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\[Rho]", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["density-or-mass-density"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kg \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["density-or-mass-density"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["surface-density", 
                    Style[
                    "surface-density", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["surface-density"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-density"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SubscriptBox[\(\[Rho]\), \(A\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-density"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kg \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-density"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["specific-volume", 
                    Style[
                    "specific-volume", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["specific-volume"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-volume"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\[Nu]", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-volume"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "\!\(\*SuperscriptBox[\(m\), \(3\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-volume"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["current-density", 
                    Style[
                    "current-density", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["current-density"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["current-density"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["j", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["current-density"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["current-density"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["magnetic-field-strength", 
                    Style[
                    "magnetic-field-strength", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["magnetic-field-strength"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-field-strength"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["H", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-field-strength"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-field-strength"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["amount-of-substance-concentration", 
                    Style[
                    "amount-of-substance-concentration", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["amount-of-substance-concentration"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance-concentration"]}, "RowHeader", 
                   False], "Mouse"], ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["c", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance-concentration"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["mol \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["amount-of-substance-concentration"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["mass-concentration", 
                    Style[
                    "mass-concentration", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["mass-concentration"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass-concentration"]}, "RowHeader", False], "Mouse"],
                  ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\[Rho]-or-\[Gamma]", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass-concentration"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kg \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["mass-concentration"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["luminance", 
                    Style[
                    "luminance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["luminance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminance"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{257.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SubscriptBox[\(L\), \(v\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminance"], 
                    Key["typical-symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["cd \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminance"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{1134., {194.63403309800196`, 200.36596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{1134., {194.63403309800196`, 200.36596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"coherent-derived-units-whose-names-and-symbols-include-SI-\
coherent-derived-units-with-special-names-and-symbols\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "dynamic-viscosity" -> <|
           "name-of-coherent-derived-unit" -> "pascal second", "symbol" -> 
            "Pa s", "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
          "moment-of-force" -> <|
           "name-of-coherent-derived-unit" -> "newton meter", "symbol" -> 
            "N m", "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\
\), \(-2\)]\)"|>, 
          "surface-tension" -> <|
           "name-of-coherent-derived-unit" -> "newton per meter", "symbol" -> 
            "N \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
          "angular-velocity-or-angular-frequency" -> <|
           "name-of-coherent-derived-unit" -> "radian per second", "symbol" -> 
            "rad \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
          "angular-acceleration" -> <|
           "name-of-coherent-derived-unit" -> "radian per second squared", 
            "symbol" -> "rad/\!\(\*SuperscriptBox[\(s\), \(2\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
          "heat-flux-density-or-irradiance" -> <|
           "name-of-coherent-derived-unit" -> "watt per square meter", 
            "symbol" -> "W/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
          "heat-capacity-or-entropy" -> <|
           "name-of-coherent-derived-unit" -> "joule per kelvin", "symbol" -> 
            "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\
\), \(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
          "specific-heat-capacity-or-specific-entropy" -> <|
           "name-of-coherent-derived-unit" -> "joule per kilogram kelvin", 
            "symbol" -> 
            "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
          "specific-energy" -> <|
           "name-of-coherent-derived-unit" -> "joule per kilogram", "symbol" -> 
            "J \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\)"|>, 
          "thermal-conductivity" -> <|
           "name-of-coherent-derived-unit" -> "watt per meter kelvin", 
            "symbol" -> 
            "W \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \!\(\*SuperscriptBox[\(K\
\), \(-1\)]\)", "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\
\(K\), \(-1\)]\)"|>, 
          "energy-density" -> <|
           "name-of-coherent-derived-unit" -> "joule per cubic meter", 
            "symbol" -> "J \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
          "electric-field-strength" -> <|
           "name-of-coherent-derived-unit" -> "volt per meter", "symbol" -> 
            "V \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\
\(A\), \(-1\)]\)"|>, 
          "electric-charge-density" -> <|
           "name-of-coherent-derived-unit" -> "coulomb per cubic meter", 
            "symbol" -> "C \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "A s \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
          "surface-charge-density" -> <|
           "name-of-coherent-derived-unit" -> "coulomb per square meter", 
            "symbol" -> "C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
          "electric-flux-density-or-electric-displacement" -> <|
           "name-of-coherent-derived-unit" -> "coulomb per square meter", 
            "symbol" -> "C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
          "permittivity" -> <|
           "name-of-coherent-derived-unit" -> "farad per meter", "symbol" -> 
            "F \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-3\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)"|>, 
          "permeability" -> <|
           "name-of-coherent-derived-unit" -> "henry per meter", "symbol" -> 
            "H \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\
\(A\), \(-2\)]\)"|>, 
          "molar-energy" -> <|
           "name-of-coherent-derived-unit" -> "joule per mole", "symbol" -> 
            "J \!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\
\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \(-1\)]\)"|>, 
          "molar-entropy-or-molar-heat-capacity" -> <|
           "name-of-coherent-derived-unit" -> "joule per mole kelvin", 
            "symbol" -> 
            "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\
\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
          "exposure(x-and-\[Gamma]-rays)" -> <|
           "name-of-coherent-derived-unit" -> "coulomb per kilogram", 
            "symbol" -> "C \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "A s \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)"|>, 
          "absorbed-dose-rate" -> <|
           "name-of-coherent-derived-unit" -> "gray per second", "symbol" -> 
            "Gy \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-3\)]\)"|>, 
          "radiant-intensity" -> <|
           "name-of-coherent-derived-unit" -> "watt per steradian", "symbol" -> 
            "W \!\(\*SuperscriptBox[\(sr\), \(-1\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\
\), \(-3\)]\)"|>, 
          "radiance" -> <|
           "name-of-coherent-derived-unit" -> 
            "watt per square meter steradian", "symbol" -> 
            "W \!\(\*SuperscriptBox[\(sr\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
          "catalytic-activity-concentration" -> <|
           "name-of-coherent-derived-unit" -> "katal per cubic meter", 
            "symbol" -> "kat \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
            "derived-unit-expressed-in-terms-of-base-units" -> 
            "mol \!\(\*SuperscriptBox[\(s\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>|>, "AllowEmbedding" -> True, 
        "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[3]} -> 
           1, {All, "name-of-coherent-derived-unit"} -> 1, {All, "symbol"} -> 
           1, {All, "derived-unit-expressed-in-terms-of-base-units"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[515.2], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "name-of-coherent-derived-unit" -> 
                TypeSystem`PackageScope`AtomShape[280.], "symbol" -> 
                TypeSystem`PackageScope`AtomShape[560.], 
                "derived-unit-expressed-in-terms-of-base-units" -> 
                TypeSystem`PackageScope`AtomShape[560.]|>], 
              DirectedInfinity[1], 3, {All}]]], 20, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "name-of-coherent-derived-unit", "symbol", 
            "derived-unit-expressed-in-terms-of-base-units"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 24], "Meta" -> <||>, "RowTarget" -> 20,
         "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[3]} -> 
           1, {All, "name-of-coherent-derived-unit"} -> 1, {All, "symbol"} -> 
           1, {All, "derived-unit-expressed-in-terms-of-base-units"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[515.2], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "name-of-coherent-derived-unit" -> 
                TypeSystem`PackageScope`AtomShape[280.], "symbol" -> 
                TypeSystem`PackageScope`AtomShape[560.], 
                "derived-unit-expressed-in-terms-of-base-units" -> 
                TypeSystem`PackageScope`AtomShape[560.]|>], 
              DirectedInfinity[1], 3, {All}]]], 20, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "name-of-coherent-derived-unit", "symbol", 
            "derived-unit-expressed-in-terms-of-base-units"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 24], "Path" -> {}, "DisplayedRowCount" -> 
        20, "DisplayedColumnCount" -> 3, "DataRowCount" -> 24, 
        "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["name-of-coherent-derived-unit", 
                    Style[
                    "name-of-coherent-derived-unit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "name-of-coherent-derived-unit"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "name-of-coherent-derived-unit"}, "ColumnHeader", 
                   True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["symbol", 
                    Style[
                    "symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "symbol"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "symbol"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["derived-unit-expressed-in-terms-of-base-units", 
                    Style[
                    "derived-unit-expressed-in-terms-of-base-units", 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "derived-unit-expressed-in-terms-of-base-units"}, 
                    1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "derived-unit-expressed-in-terms-of-base-units"}, 
                   "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["dynamic-viscosity", 
                    Style[
                    "dynamic-viscosity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["dynamic-viscosity"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["dynamic-viscosity"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["pascal second", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["dynamic-viscosity"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Pa s", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["dynamic-viscosity"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["dynamic-viscosity"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["moment-of-force", 
                    Style[
                    "moment-of-force", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["moment-of-force"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["moment-of-force"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["newton meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["moment-of-force"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["N m", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["moment-of-force"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["moment-of-force"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["surface-tension", 
                    Style[
                    "surface-tension", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["surface-tension"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-tension"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["newton per meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-tension"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["N \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-tension"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-tension"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["angular-velocity-or-angular-frequency", 
                    Style[
                    "angular-velocity-or-angular-frequency", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["angular-velocity-or-angular-frequency"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-velocity-or-angular-frequency"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["radian per second", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-velocity-or-angular-frequency"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["rad \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-velocity-or-angular-frequency"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-velocity-or-angular-frequency"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["angular-acceleration", 
                    Style[
                    "angular-acceleration", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["angular-acceleration"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-acceleration"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["radian per second squared", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-acceleration"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["rad/\!\(\*SuperscriptBox[\(s\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-acceleration"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["angular-acceleration"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["heat-flux-density-or-irradiance", 
                    Style[
                    "heat-flux-density-or-irradiance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["heat-flux-density-or-irradiance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-flux-density-or-irradiance"]}, "RowHeader", 
                   False], "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["watt per square meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-flux-density-or-irradiance"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["W/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-flux-density-or-irradiance"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-flux-density-or-irradiance"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["heat-capacity-or-entropy", 
                    Style[
                    "heat-capacity-or-entropy", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["heat-capacity-or-entropy"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-capacity-or-entropy"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["joule per kelvin", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-capacity-or-entropy"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-capacity-or-entropy"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["heat-capacity-or-entropy"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["specific-heat-capacity-or-specific-entropy", 
                    Style[
                    "specific-heat-capacity-or-specific-entropy", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["specific-heat-capacity-or-specific-entropy"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-heat-capacity-or-specific-entropy"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["joule per kilogram kelvin", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-heat-capacity-or-specific-entropy"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-heat-capacity-or-specific-entropy"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-heat-capacity-or-specific-entropy"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["specific-energy", 
                    Style[
                    "specific-energy", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["specific-energy"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-energy"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["joule per kilogram", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-energy"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-energy"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["specific-energy"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["thermal-conductivity", 
                    Style[
                    "thermal-conductivity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["thermal-conductivity"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermal-conductivity"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["watt per meter kelvin", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermal-conductivity"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "W \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermal-conductivity"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["thermal-conductivity"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["energy-density", 
                    Style[
                    "energy-density", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["energy-density"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-density"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["joule per cubic meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-density"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-density"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-density"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-field-strength", 
                    Style[
                    "electric-field-strength", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-field-strength"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-field-strength"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["volt per meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-field-strength"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["V \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-field-strength"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-field-strength"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-charge-density", 
                    Style[
                    "electric-charge-density", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-charge-density"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge-density"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["coulomb per cubic meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge-density"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge-density"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A s \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge-density"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["surface-charge-density", 
                    Style[
                    "surface-charge-density", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["surface-charge-density"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-charge-density"]}, "RowHeader", False], 
                  "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["coulomb per square meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-charge-density"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-charge-density"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["surface-charge-density"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    "electric-flux-density-or-electric-displacement", 
                    Style[
                    "electric-flux-density-or-electric-displacement", 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-flux-density-or-electric-displacement"]}, 
                    1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-flux-density-or-electric-displacement"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["coulomb per square meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-flux-density-or-electric-displacement"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-flux-density-or-electric-displacement"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-flux-density-or-electric-displacement"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["permittivity", 
                    Style[
                    "permittivity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["permittivity"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permittivity"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["farad per meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permittivity"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["F \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permittivity"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-3\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permittivity"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["permeability", 
                    Style[
                    "permeability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["permeability"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permeability"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["henry per meter", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permeability"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["H \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permeability"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["permeability"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["molar-energy", 
                    Style[
                    "molar-energy", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["molar-energy"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-energy"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["joule per mole", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-energy"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J \!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-energy"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \
\(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-energy"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["molar-entropy-or-molar-heat-capacity", 
                    Style[
                    "molar-entropy-or-molar-heat-capacity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["molar-entropy-or-molar-heat-capacity"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-entropy-or-molar-heat-capacity"]}, "RowHeader",
                    False], "Mouse"], ImageSize -> {{515.2, Full}, Automatic},
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["joule per mole kelvin", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-entropy-or-molar-heat-capacity"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-entropy-or-molar-heat-capacity"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["molar-entropy-or-molar-heat-capacity"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["exposure(x-and-\[Gamma]-rays)", 
                    Style[
                    "exposure(x-and-\[Gamma]-rays)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["exposure(x-and-\[Gamma]-rays)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["exposure(x-and-\[Gamma]-rays)"]}, "RowHeader", 
                   False], "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["coulomb per kilogram", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["exposure(x-and-\[Gamma]-rays)"], 
                    Key["name-of-coherent-derived-unit"]}, "Item", False], 
                  "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["exposure(x-and-\[Gamma]-rays)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A s \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["exposure(x-and-\[Gamma]-rays)"], 
                    Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                   "Item", False], "Mouse"], 
                 ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Deploy[
                 Pane[
                  Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 24, 1], {1, 24 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 24, 1], {1, 24 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[24, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[24, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 24, 1], {1, 24 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 24, 1], {1, 24 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                  ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                RGBColor[
                 0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
                Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
               SpanFromLeft}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{1967., {299.63403309800196`, 305.36596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{1967., {299.63403309800196`, 305.36596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"Dataset\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "hyperfine-transition-frequency-of-Cs" -> <|
           "numerical-value" -> 9192631770, "unit" -> "Hz"|>, 
          "speed-of-light-in-vacuum" -> <|
           "numerical-value" -> 299792458, "unit" -> 
            "m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
          "Planck-constant" -> <|
           "numerical-value" -> 6.6260701500000015`*^-34, "unit" -> "J s"|>, 
          "elementary-charge" -> <|
           "numerical-value" -> 1.6021766340000001`*^-19, "unit" -> "C"|>, 
          "Boltzmann-constant" -> <|
           "numerical-value" -> 1.380649*^-23, "unit" -> 
            "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
          "Avogadro-constant" -> <|
           "numerical-value" -> 6.02214076*^23, "unit" -> 
            "\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)"|>, 
          "luminous-efficacy" -> <|
           "numerical-value" -> 683, "unit" -> 
            "lm \!\(\*SuperscriptBox[\(W\), \(-1\)]\)"|>|>, "AllowEmbedding" -> 
        True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[4]} -> 
           1, {All, "numerical-value"} -> 1, {All, "unit"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[403.20000000000005`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "numerical-value" -> TypeSystem`PackageScope`AtomShape[60], 
                "unit" -> TypeSystem`PackageScope`AtomShape[
                 358.40000000000003`]|>], 
              DirectedInfinity[1], 2, {All}]]], 7, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"numerical-value", "unit"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[String]}], 7], "Meta" -> <||>, "RowTarget" -> 20, 
        "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[4]} -> 
           1, {All, "numerical-value"} -> 1, {All, "unit"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[403.20000000000005`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "numerical-value" -> TypeSystem`PackageScope`AtomShape[60], 
                "unit" -> TypeSystem`PackageScope`AtomShape[
                 358.40000000000003`]|>], 
              DirectedInfinity[1], 2, {All}]]], 7, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"numerical-value", "unit"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[String]}], 7], "Path" -> {}, "DisplayedRowCount" -> 
        7, "DisplayedColumnCount" -> 2, "DataRowCount" -> 7, 
        "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["numerical-value", 
                    Style[
                    "numerical-value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "numerical-value"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "numerical-value"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["unit", 
                    Style[
                    "unit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "unit"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "unit"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["hyperfine-transition-frequency-of-Cs", 
                    Style[
                    "hyperfine-transition-frequency-of-Cs", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hyperfine-transition-frequency-of-Cs"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["hyperfine-transition-frequency-of-Cs"]}, "RowHeader",
                    False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["9192631770"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["hyperfine-transition-frequency-of-Cs"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Hz", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["hyperfine-transition-frequency-of-Cs"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["speed-of-light-in-vacuum", 
                    Style[
                    "speed-of-light-in-vacuum", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["speed-of-light-in-vacuum"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-of-light-in-vacuum"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["299792458"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-of-light-in-vacuum"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-of-light-in-vacuum"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Planck-constant", 
                    Style[
                    "Planck-constant", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Planck-constant"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Planck-constant"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["0.000000000000000000000000000000000662607"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Planck-constant"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J s", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Planck-constant"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["elementary-charge", 
                    Style[
                    "elementary-charge", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["elementary-charge"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["elementary-charge"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["0.000000000000000000160218"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["elementary-charge"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["elementary-charge"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Boltzmann-constant", 
                    Style[
                    "Boltzmann-constant", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Boltzmann-constant"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Boltzmann-constant"]}, "RowHeader", False], "Mouse"],
                  ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["0.0000000000000000000000138065"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Boltzmann-constant"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Boltzmann-constant"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Avogadro-constant", 
                    Style[
                    "Avogadro-constant", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Avogadro-constant"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Avogadro-constant"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["602214000000000000000000."], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Avogadro-constant"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Avogadro-constant"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["luminous-efficacy", 
                    Style[
                    "luminous-efficacy", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["luminous-efficacy"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-efficacy"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["683"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-efficacy"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["lm \!\(\*SuperscriptBox[\(W\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-efficacy"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{1069., {113.63403309800196`, 119.36596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{1069., {113.63403309800196`, 119.36596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"defining-constants-of-the-SI\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "hyperfine-transition-frequency-of-Cs" -> <|
           "numerical-value" -> 9192631770, "unit" -> "Hz"|>, 
          "speed-of-light-in-vacuum" -> <|
           "numerical-value" -> 299792458, "unit" -> 
            "m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
          "Planck-constant" -> <|
           "numerical-value" -> 6.6260701500000015`*^-34, "unit" -> "J s"|>, 
          "elementary-charge" -> <|
           "numerical-value" -> 1.6021766340000001`*^-19, "unit" -> "C"|>, 
          "Boltzmann-constant" -> <|
           "numerical-value" -> 1.380649*^-23, "unit" -> 
            "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
          "Avogadro-constant" -> <|
           "numerical-value" -> 6.02214076*^23, "unit" -> 
            "\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)"|>, 
          "luminous-efficacy" -> <|
           "numerical-value" -> 683, "unit" -> 
            "lm \!\(\*SuperscriptBox[\(W\), \(-1\)]\)"|>|>, "AllowEmbedding" -> 
        True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[5]} -> 
           1, {All, "numerical-value"} -> 1, {All, "unit"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[403.20000000000005`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "numerical-value" -> TypeSystem`PackageScope`AtomShape[60], 
                "unit" -> TypeSystem`PackageScope`AtomShape[
                 358.40000000000003`]|>], 
              DirectedInfinity[1], 2, {All}]]], 7, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"numerical-value", "unit"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[String]}], 7], "Meta" -> <||>, "RowTarget" -> 20, 
        "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[5]} -> 
           1, {All, "numerical-value"} -> 1, {All, "unit"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[403.20000000000005`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "numerical-value" -> TypeSystem`PackageScope`AtomShape[60], 
                "unit" -> TypeSystem`PackageScope`AtomShape[
                 358.40000000000003`]|>], 
              DirectedInfinity[1], 2, {All}]]], 7, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"numerical-value", "unit"}, {
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[String]}], 7], "Path" -> {}, "DisplayedRowCount" -> 
        7, "DisplayedColumnCount" -> 2, "DataRowCount" -> 7, 
        "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["numerical-value", 
                    Style[
                    "numerical-value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "numerical-value"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "numerical-value"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["unit", 
                    Style[
                    "unit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "unit"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "unit"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["hyperfine-transition-frequency-of-Cs", 
                    Style[
                    "hyperfine-transition-frequency-of-Cs", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hyperfine-transition-frequency-of-Cs"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["hyperfine-transition-frequency-of-Cs"]}, "RowHeader",
                    False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["9192631770"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["hyperfine-transition-frequency-of-Cs"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Hz", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["hyperfine-transition-frequency-of-Cs"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["speed-of-light-in-vacuum", 
                    Style[
                    "speed-of-light-in-vacuum", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["speed-of-light-in-vacuum"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-of-light-in-vacuum"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["299792458"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-of-light-in-vacuum"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["m \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["speed-of-light-in-vacuum"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Planck-constant", 
                    Style[
                    "Planck-constant", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Planck-constant"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Planck-constant"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["0.000000000000000000000000000000000662607"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Planck-constant"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J s", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Planck-constant"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["elementary-charge", 
                    Style[
                    "elementary-charge", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["elementary-charge"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["elementary-charge"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["0.000000000000000000160218"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["elementary-charge"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["elementary-charge"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Boltzmann-constant", 
                    Style[
                    "Boltzmann-constant", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Boltzmann-constant"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Boltzmann-constant"]}, "RowHeader", False], "Mouse"],
                  ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["0.0000000000000000000000138065"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Boltzmann-constant"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Boltzmann-constant"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Avogadro-constant", 
                    Style[
                    "Avogadro-constant", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Avogadro-constant"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Avogadro-constant"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["602214000000000000000000."], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Avogadro-constant"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Avogadro-constant"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["luminous-efficacy", 
                    Style[
                    "luminous-efficacy", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["luminous-efficacy"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-efficacy"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{403.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  RawBoxes["683"], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-efficacy"], 
                    Key["numerical-value"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{60, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["lm \!\(\*SuperscriptBox[\(W\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-efficacy"], 
                    Key["unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{1069., {113.63403309800196`, 119.36596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{1069., {113.63403309800196`, 119.36596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"RawData\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"hyperfine-transition-frequency-of-Cs\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"numerical-value\"\>", "\[Rule]", "9192631770"}], ",", 
         RowBox[{"\<\"unit\"\>", "\[Rule]", "\<\"Hz\"\>"}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"speed-of-light-in-vacuum\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"numerical-value\"\>", "\[Rule]", "299792458"}], ",", 
         RowBox[{"\<\"unit\"\>", 
          "\[Rule]", "\<\"m \\!\\(\\*SuperscriptBox[\\(s\\), \
\\(-1\\)]\\)\"\>"}]}], "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"Planck-constant\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"numerical-value\"\>", "\[Rule]", 
          "6.6260701500000015`*^-34"}], ",", 
         RowBox[{"\<\"unit\"\>", "\[Rule]", "\<\"J s\"\>"}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"elementary-charge\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"numerical-value\"\>", "\[Rule]", 
          "1.6021766340000001`*^-19"}], ",", 
         RowBox[{"\<\"unit\"\>", "\[Rule]", "\<\"C\"\>"}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"Boltzmann-constant\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"numerical-value\"\>", "\[Rule]", "1.380649`*^-23"}], 
         ",", 
         RowBox[{"\<\"unit\"\>", 
          "\[Rule]", "\<\"J \\!\\(\\*SuperscriptBox[\\(K\\), \
\\(-1\\)]\\)\"\>"}]}], "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"Avogadro-constant\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"numerical-value\"\>", "\[Rule]", "6.02214076`*^23"}], 
         ",", 
         RowBox[{"\<\"unit\"\>", 
          "\[Rule]", "\<\"\\!\\(\\*SuperscriptBox[\\(mol\\), \
\\(-1\\)]\\)\"\>"}]}], "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"luminous-efficacy\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"numerical-value\"\>", "\[Rule]", "683"}], ",", 
         RowBox[{"\<\"unit\"\>", 
          "\[Rule]", "\<\"lm \\!\\(\\*SuperscriptBox[\\(W\\), \
\\(-1\\)]\\)\"\>"}]}], "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}],
    ",", 
   RowBox[{"\<\"SI-prefixes\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "\!\(\*SuperscriptBox[\(10\), \(3\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(3\)]\)", "name" -> 
            "kilo", "symbol" -> "k"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(6\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(6\)]\)", "name" -> 
            "mega", "symbol" -> "M"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(9\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(9\)]\)", "name" -> 
            "giga", "symbol" -> "G"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(12\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(12\)]\)", "name" -> 
            "tera", "symbol" -> "T"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(15\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(15\)]\)", "name" -> 
            "peta", "symbol" -> "P"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(18\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(18\)]\)", "name" -> 
            "exa", "symbol" -> "E"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(21\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(21\)]\)", "name" -> 
            "zetta", "symbol" -> "Z"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(24\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(24\)]\)", "name" -> 
            "yotta", "symbol" -> "Y"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-3\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-3\)]\)", "name" -> 
            "milli", "symbol" -> "m"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-6\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-6\)]\)", "name" -> 
            "micro", "symbol" -> "\[Mu]"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-9\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-9\)]\)", "name" -> 
            "nano", "symbol" -> "n"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-12\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-12\)]\)", "name" -> 
            "pico", "symbol" -> "p"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-15\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-15\)]\)", "name" -> 
            "femto", "symbol" -> "f"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-18\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-18\)]\)", "name" -> 
            "atto", "symbol" -> "a"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-21\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-21\)]\)", "name" -> 
            "zepto", "symbol" -> "z"|>, 
          "\!\(\*SuperscriptBox[\(10\), \(-24\)]\)" -> <|
           "factor" -> "\!\(\*SuperscriptBox[\(10\), \(-24\)]\)", "name" -> 
            "yocto", "symbol" -> "y"|>|>, "AllowEmbedding" -> True, 
        "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[6]} -> 1, {All, "factor"} -> 
           1, {All, "name"} -> 1, {All, "symbol"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[347.20000000000005`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "factor" -> 
                TypeSystem`PackageScope`AtomShape[347.20000000000005`], 
                "name" -> TypeSystem`PackageScope`AtomShape[
                 56.00000000000001], "symbol" -> 
                TypeSystem`PackageScope`AtomShape[33.6]|>], 
              DirectedInfinity[1], 3, {All}]]], 16, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"factor", "name", "symbol"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 16], "Meta" -> <||>, "RowTarget" -> 20,
         "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[6]} -> 1, {All, "factor"} -> 
           1, {All, "name"} -> 1, {All, "symbol"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[347.20000000000005`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "factor" -> 
                TypeSystem`PackageScope`AtomShape[347.20000000000005`], 
                "name" -> TypeSystem`PackageScope`AtomShape[
                 56.00000000000001], "symbol" -> 
                TypeSystem`PackageScope`AtomShape[33.6]|>], 
              DirectedInfinity[1], 3, {All}]]], 16, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"factor", "name", "symbol"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 16], "Path" -> {}, "DisplayedRowCount" -> 
        16, "DisplayedColumnCount" -> 3, "DataRowCount" -> 16, 
        "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["factor", 
                    Style[
                    "factor", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "factor"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "factor"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["name", 
                    Style[
                    "name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "name"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "name"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["symbol", 
                    Style[
                    "symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "symbol"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "symbol"}, "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(3\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(3\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(3\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(3\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(3\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["kilo", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(3\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["k", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(3\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(6\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(6\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(6\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(6\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(6\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(6\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["mega", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(6\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["M", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(6\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(9\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(9\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(9\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(9\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(9\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(9\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["giga", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(9\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["G", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(9\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(12\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(12\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(12\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(12\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(12\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(12\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["tera", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(12\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["T", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(12\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(15\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(15\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(15\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(15\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(15\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(15\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["peta", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(15\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["P", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(15\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(18\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(18\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(18\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(18\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(18\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(18\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["exa", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(18\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["E", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(18\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(21\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(21\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(21\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(21\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(21\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(21\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["zetta", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(21\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Z", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(21\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(24\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(24\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(24\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(24\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(24\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(24\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["yotta", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(24\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Y", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(24\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-3\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-3\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-3\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-3\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-3\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["milli", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-3\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["m", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-3\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-6\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-6\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-6\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-6\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-6\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-6\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["micro", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-6\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\[Mu]", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-6\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-9\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-9\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-9\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-9\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-9\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-9\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["nano", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-9\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["n", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-9\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-12\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-12\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-12\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-12\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-12\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-12\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["pico", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-12\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["p", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-12\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-15\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-15\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-15\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-15\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-15\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-15\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["femto", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-15\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["f", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-15\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-18\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-18\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-18\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-18\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-18\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-18\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["atto", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-18\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["a", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-18\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-21\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-21\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-21\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-21\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-21\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-21\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["zepto", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-21\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["z", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-21\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["\!\(\*SuperscriptBox[\(10\), \(-24\)]\)", 
                    Style[
                    "\!\(\*SuperscriptBox[\(10\), \(-24\)]\)", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-24\)]\)"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-24\)]\)"]}, 
                   "RowHeader", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["\!\(\*SuperscriptBox[\(10\), \(-24\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-24\)]\)"], 
                    Key["factor"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["yocto", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-24\)]\)"], 
                    Key["name"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{56.00000000000001, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["y", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["\!\(\*SuperscriptBox[\(10\), \(-24\)]\)"], 
                    Key["symbol"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{33.6, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{827., {235.13403309800196`, 240.86596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{827., {235.13403309800196`, 240.86596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"SI-units-with-special-names-and-symbols\"\>", "\[Rule]", 
    TagBox[
     TagBox[
      DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
       "InitialData" -> <|
         "plane-angle" -> <|
           "special-name-of-unit" -> "radian", 
            "unit-expressed-terms-of-base-units" -> "rad=m/m", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "solid-angle" -> <|
           "special-name-of-unit" -> "steradian", 
            "unit-expressed-terms-of-base-units" -> 
            "sr=\!\(\*SuperscriptBox[\(m\), \(2\)]\)/\!\(\*SuperscriptBox[\(m\
\), \(2\)]\)", "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "frequency" -> <|
           "special-name-of-unit" -> "hertz", 
            "unit-expressed-terms-of-base-units" -> 
            "Hz=\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "force" -> <|
           "special-name-of-unit" -> "newton", 
            "unit-expressed-terms-of-base-units" -> 
            "N=kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "pressure-or-stress" -> <|
           "special-name-of-unit" -> "pascal", 
            "unit-expressed-terms-of-base-units" -> 
            "Pa=kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "energy-or-work-or-amount-of-heat" -> <|
           "special-name-of-unit" -> "joule", 
            "unit-expressed-terms-of-base-units" -> 
            "J=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "N m"|>, 
          "power-or-radiant-flux" -> <|
           "special-name-of-unit" -> "watt", 
            "unit-expressed-terms-of-base-units" -> 
            "W=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "J/s"|>, 
          "electric-charge" -> <|
           "special-name-of-unit" -> "coulomb", 
            "unit-expressed-terms-of-base-units" -> "C=A s", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "electric-potential-difference" -> <|
           "special-name-of-unit" -> "volt", 
            "unit-expressed-terms-of-base-units" -> 
            "V=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "W/A"|>, 
          "capacitance" -> <|
           "special-name-of-unit" -> "farad", 
            "unit-expressed-terms-of-base-units" -> 
            "F=\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "C/V"|>, 
          "electric-resistance" -> <|
           "special-name-of-unit" -> "ohm", 
            "unit-expressed-terms-of-base-units" -> 
            "\[CapitalOmega]=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "V/A"|>, 
          "electric-conductance" -> <|
           "special-name-of-unit" -> "siemens", 
            "unit-expressed-terms-of-base-units" -> 
            "S=\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\) \!\(\*SuperscriptBox[\(s\), \(3\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "A/V"|>, 
          "magnetic-flux" -> <|
           "special-name-of-unit" -> "weber", 
            "unit-expressed-terms-of-base-units" -> 
            "Wb=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\
\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "V s"|>, 
          "magnetic-flux-density" -> <|
           "special-name-of-unit" -> "tesla", 
            "unit-expressed-terms-of-base-units" -> 
            "T=kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\
\(A\), \(-1\)]\)", "unit-expressed-in-terms-of-other-SI-units" -> 
            "Wb/\!\(\*SuperscriptBox[\(m\), \(2\)]\)"|>, 
          "inductance" -> <|
           "special-name-of-unit" -> "henry", 
            "unit-expressed-terms-of-base-units" -> 
            "H=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> "Wb/A"|>, 
          "Celsius-temperature" -> <|
           "special-name-of-unit" -> "degree Celsius", 
            "unit-expressed-terms-of-base-units" -> "\[Degree]C=K", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "luminous-flux" -> <|
           "special-name-of-unit" -> "lumen", 
            "unit-expressed-terms-of-base-units" -> "lm=cd sr", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "illuminance" -> <|
           "special-name-of-unit" -> "lux", 
            "unit-expressed-terms-of-base-units" -> 
            "lx=cd sr \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> 
            "lm/\!\(\*SuperscriptBox[\(m\), \(2\)]\)"|>, 
          "activity-referred-to-a-radionuclide" -> <|
           "special-name-of-unit" -> "becquerel", 
            "unit-expressed-terms-of-base-units" -> 
            "Bq=\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>, 
          "absorbed-dose-or-kerma" -> <|
           "special-name-of-unit" -> "gray", 
            "unit-expressed-terms-of-base-units" -> 
            "Gy=\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\
\), \(-2\)]\)", "unit-expressed-in-terms-of-other-SI-units" -> "J/kg"|>, 
          "dose-equivalent" -> <|
           "special-name-of-unit" -> "sievert", 
            "unit-expressed-terms-of-base-units" -> 
            "Sv=\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\
\), \(-2\)]\)", "unit-expressed-in-terms-of-other-SI-units" -> "J/kg"|>, 
          "catalytic-activity" -> <|
           "special-name-of-unit" -> "katal", 
            "unit-expressed-terms-of-base-units" -> 
            "kat=mol \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
            "unit-expressed-in-terms-of-other-SI-units" -> ""|>|>, 
        "AllowEmbedding" -> True, "InitialShape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[7]} -> 
           1, {All, "special-name-of-unit"} -> 
           1, {All, "unit-expressed-terms-of-base-units"} -> 
           1, {All, "unit-expressed-in-terms-of-other-SI-units"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[392.00000000000006`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "special-name-of-unit" -> 
                TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
                "unit-expressed-terms-of-base-units" -> 
                TypeSystem`PackageScope`AtomShape[560.], 
                "unit-expressed-in-terms-of-other-SI-units" -> 
                TypeSystem`PackageScope`AtomShape[44.800000000000004`]|>], 
              DirectedInfinity[1], 3, {All}]]], 20, 
           DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "special-name-of-unit", "unit-expressed-terms-of-base-units", 
            "unit-expressed-in-terms-of-other-SI-units"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 22], "Meta" -> <||>, "RowTarget" -> 20,
         "ColumnTarget" -> 10, "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[<|{All, 
             TypeSystem`PackageScope`KeyDummy[7]} -> 
           1, {All, "special-name-of-unit"} -> 
           1, {All, "unit-expressed-terms-of-base-units"} -> 
           1, {All, "unit-expressed-in-terms-of-other-SI-units"} -> 1|>, 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[392.00000000000006`], 
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "special-name-of-unit" -> 
                TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
                "unit-expressed-terms-of-base-units" -> 
                TypeSystem`PackageScope`AtomShape[560.], 
                "unit-expressed-in-terms-of-other-SI-units" -> 
                TypeSystem`PackageScope`AtomShape[44.800000000000004`]|>], 
              DirectedInfinity[1], 3, {All}]]], 20, 
           DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          
          TypeSystem`Struct[{
           "special-name-of-unit", "unit-expressed-terms-of-base-units", 
            "unit-expressed-in-terms-of-other-SI-units"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 22], "Path" -> {}, "DisplayedRowCount" -> 
        20, "DisplayedColumnCount" -> 3, "DataRowCount" -> 22, 
        "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
        "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  Mouseover[
                   
                   Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                   Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, Keys}, "KeyDummy", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["special-name-of-unit", 
                    Style[
                    "special-name-of-unit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "special-name-of-unit"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "special-name-of-unit"}, "ColumnHeader", True], 
                  "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["unit-expressed-terms-of-base-units", 
                    Style[
                    "unit-expressed-terms-of-base-units", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "unit-expressed-terms-of-base-units"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "unit-expressed-terms-of-base-units"}, "ColumnHeader",
                    True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["unit-expressed-in-terms-of-other-SI-units", 
                    Style[
                    "unit-expressed-in-terms-of-other-SI-units", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "unit-expressed-in-terms-of-other-SI-units"}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   All, "unit-expressed-in-terms-of-other-SI-units"}, 
                   "ColumnHeader", True], "Mouse"], 
                 ImageSize -> {{1, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["plane-angle", 
                    Style[
                    "plane-angle", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["plane-angle"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["plane-angle"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["radian", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["plane-angle"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["rad=m/m", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["plane-angle"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["plane-angle"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["solid-angle", 
                    Style[
                    "solid-angle", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["solid-angle"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["solid-angle"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["steradian", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["solid-angle"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "sr=\!\(\*SuperscriptBox[\(m\), \
\(2\)]\)/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["solid-angle"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["solid-angle"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["frequency", 
                    Style[
                    "frequency", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["frequency"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["frequency"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["hertz", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["frequency"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Hz=\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["frequency"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["frequency"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["force", 
                    Style[
                    "force", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["force"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["force"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["newton", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["force"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["N=kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["force"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["force"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["pressure-or-stress", 
                    Style[
                    "pressure-or-stress", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["pressure-or-stress"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["pressure-or-stress"]}, "RowHeader", False], "Mouse"],
                  ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["pascal", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["pressure-or-stress"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "Pa=kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["pressure-or-stress"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["pressure-or-stress"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["energy-or-work-or-amount-of-heat", 
                    Style[
                    "energy-or-work-or-amount-of-heat", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["energy-or-work-or-amount-of-heat"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-or-work-or-amount-of-heat"]}, "RowHeader", 
                   False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["joule", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-or-work-or-amount-of-heat"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "J=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-or-work-or-amount-of-heat"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["N m", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["energy-or-work-or-amount-of-heat"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["power-or-radiant-flux", 
                    Style[
                    "power-or-radiant-flux", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["power-or-radiant-flux"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["power-or-radiant-flux"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["watt", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["power-or-radiant-flux"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "W=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["power-or-radiant-flux"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J/s", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["power-or-radiant-flux"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-charge", 
                    Style[
                    "electric-charge", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-charge"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["coulomb", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C=A s", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-charge"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-potential-difference", 
                    Style[
                    "electric-potential-difference", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-potential-difference"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-potential-difference"]}, "RowHeader", 
                   False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["volt", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-potential-difference"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "V=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-potential-difference"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["W/A", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-potential-difference"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["capacitance", 
                    Style[
                    "capacitance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["capacitance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["capacitance"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["farad", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["capacitance"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "F=\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["capacitance"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["C/V", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["capacitance"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-resistance", 
                    Style[
                    "electric-resistance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-resistance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-resistance"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["ohm", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-resistance"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "\[CapitalOmega]=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-resistance"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["V/A", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-resistance"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["electric-conductance", 
                    Style[
                    "electric-conductance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-conductance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-conductance"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["siemens", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-conductance"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "S=\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\) \!\(\*SuperscriptBox[\(s\), \(3\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-conductance"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["A/V", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["electric-conductance"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["magnetic-flux", 
                    Style[
                    "magnetic-flux", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["magnetic-flux"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["weber", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "Wb=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["V s", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["magnetic-flux-density", 
                    Style[
                    "magnetic-flux-density", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["magnetic-flux-density"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux-density"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["tesla", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux-density"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "T=kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux-density"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Wb/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["magnetic-flux-density"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["inductance", 
                    Style[
                    "inductance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["inductance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["inductance"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["henry", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["inductance"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "H=kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["inductance"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Wb/A", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["inductance"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["Celsius-temperature", 
                    Style[
                    "Celsius-temperature", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Celsius-temperature"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Celsius-temperature"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["degree Celsius", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Celsius-temperature"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["\[Degree]C=K", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Celsius-temperature"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["Celsius-temperature"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["luminous-flux", 
                    Style[
                    "luminous-flux", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["luminous-flux"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-flux"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["lumen", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-flux"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["lm=cd sr", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-flux"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["luminous-flux"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["illuminance", 
                    Style[
                    "illuminance", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["illuminance"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["illuminance"]}, "RowHeader", False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["lux", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["illuminance"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["lx=cd sr \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["illuminance"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["lm/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["illuminance"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["activity-referred-to-a-radionuclide", 
                    Style[
                    "activity-referred-to-a-radionuclide", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["activity-referred-to-a-radionuclide"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["activity-referred-to-a-radionuclide"]}, "RowHeader", 
                   False], "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["becquerel", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["activity-referred-to-a-radionuclide"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["Bq=\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["activity-referred-to-a-radionuclide"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["activity-referred-to-a-radionuclide"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover["absorbed-dose-or-kerma", 
                    Style[
                    "absorbed-dose-or-kerma", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["absorbed-dose-or-kerma"]}, 1]]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["absorbed-dose-or-kerma"]}, "RowHeader", False], 
                  "Mouse"], 
                 ImageSize -> {{392.00000000000006`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Annotation["gray", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["absorbed-dose-or-kerma"], 
                    Key["special-name-of-unit"]}, "Item", False], "Mouse"], 
                 ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation[
                 "Gy=\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["absorbed-dose-or-kerma"], 
                    Key["unit-expressed-terms-of-base-units"]}, "Item", 
                   False], "Mouse"], ImageSize -> {{560., Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}], 
               Item[
                Pane[
                 Annotation["J/kg", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key["absorbed-dose-or-kerma"], 
                    Key["unit-expressed-in-terms-of-other-SI-units"]}, "Item",
                    False], "Mouse"], 
                 ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                 ImageMargins -> {{5, 3}, {4, 5}}], 
                ItemSize -> {Full, Automatic}]}, {
               Item[
                Deploy[
                 Pane[
                  Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 22, 1], {1, 22 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 22, 1], {1, 22 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[22, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[22, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 22, 1], {1, 22 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 22, 1], {1, 22 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                  ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                RGBColor[
                 0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
                Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
               SpanFromLeft}}, 
             BaseStyle -> {
              ContextMenu -> 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                 Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                   TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                    True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
               "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
             Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
             Spacings -> {0, 0}, Alignment -> Left, 
             BaseStyle -> {
              FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
               Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
            NumberMarks -> False, ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`datasetData[
               TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                 TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
        DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
         TypeSystem`PackageScope`SubViewPathbar[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`updateState[
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
        Framed[
         Dynamic[
          Replace[
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
           TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
              Blank[]] -> "", 
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
              Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
               Blank[]], 
              Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
               Blank[]]] :> (
             Increment[
              TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
              TypeSystem`NestedGrid`PackagePrivate`path$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
              TypeSystem`NestedGrid`PackagePrivate`pathType$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
              TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
             TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
             TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
              TypeSystem`NestedGrid`PackagePrivate`path$, 
               TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
            Spacer[10], Blank[] :> Spacer[10]}], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
         FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
         Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
       DynamicWrapperBox[
        DynamicBox[ToBoxes[
          Dataset`DatasetContent[
          2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
           "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
           "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
           "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
           "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
           "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
           "BottomBar" -> 
           Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
           "OutputID" -> Hold[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
          StandardForm],
         ImageSizeCache->{1332., {299.63403309800196`, 305.36596690199804`}},
         TrackedSymbols:>{
          TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
        MouseAnnotation[],
        ImageSizeCache->{1332., {299.63403309800196`, 305.36596690199804`}}],
       BaseStyle->{LineBreakWithin -> False},
       DynamicModuleValues:>{},
       Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
        CreateUUID[]),
       UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy,
      DefaultBaseStyle->"Deploy"],
     Dataset`InterpretDataset[1],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.87743340622476*^9, 3.877433417507148*^9}},
 CellLabel->"Out[8]=",ExpressionUUID->"cf7be869-ff2e-4c68-9c8c-58b0a08f5196"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResourceData", "[", 
  RowBox[{
   RowBox[{"ResourceObject", "[", "\"\<SI Brochure Data\>\"", "]"}], ",", 
   "\"\<coherent-derived-units-whose-names-and-symbols-include-SI-coherent-\
derived-units-with-special-names-and-symbols\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8774333782515693`*^9, 3.877433445312397*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"aed2714e-3076-4dd6-b990-38dd43c9edad"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "dynamic-viscosity" -> <|
        "name-of-coherent-derived-unit" -> "pascal second", "symbol" -> 
         "Pa s", "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
       "moment-of-force" -> <|
        "name-of-coherent-derived-unit" -> "newton meter", "symbol" -> "N m", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\)"|>, 
       "surface-tension" -> <|
        "name-of-coherent-derived-unit" -> "newton per meter", "symbol" -> 
         "N \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
       "angular-velocity-or-angular-frequency" -> <|
        "name-of-coherent-derived-unit" -> "radian per second", "symbol" -> 
         "rad \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "\!\(\*SuperscriptBox[\(s\), \(-1\)]\)"|>, 
       "angular-acceleration" -> <|
        "name-of-coherent-derived-unit" -> "radian per second squared", 
         "symbol" -> "rad/\!\(\*SuperscriptBox[\(s\), \(2\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
       "heat-flux-density-or-irradiance" -> <|
        "name-of-coherent-derived-unit" -> "watt per square meter", "symbol" -> 
         "W/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
       "heat-capacity-or-entropy" -> <|
        "name-of-coherent-derived-unit" -> "joule per kelvin", "symbol" -> 
         "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
       "specific-heat-capacity-or-specific-entropy" -> <|
        "name-of-coherent-derived-unit" -> "joule per kilogram kelvin", 
         "symbol" -> 
         "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)"|>, 
       "specific-energy" -> <|
        "name-of-coherent-derived-unit" -> "joule per kilogram", "symbol" -> 
         "J \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\)"|>, 
       "thermal-conductivity" -> <|
        "name-of-coherent-derived-unit" -> "watt per meter kelvin", "symbol" -> 
         "W \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \!\(\*SuperscriptBox[\(K\), \
\(-1\)]\)", "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(K\
\), \(-1\)]\)"|>, 
       "energy-density" -> <|
        "name-of-coherent-derived-unit" -> "joule per cubic meter", "symbol" -> 
         "J \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)"|>, 
       "electric-field-strength" -> <|
        "name-of-coherent-derived-unit" -> "volt per meter", "symbol" -> 
         "V \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \!\(\*SuperscriptBox[\(A\
\), \(-1\)]\)"|>, 
       "electric-charge-density" -> <|
        "name-of-coherent-derived-unit" -> "coulomb per cubic meter", 
         "symbol" -> "C \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "A s \!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>, 
       "surface-charge-density" -> <|
        "name-of-coherent-derived-unit" -> "coulomb per square meter", 
         "symbol" -> "C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
       "electric-flux-density-or-electric-displacement" -> <|
        "name-of-coherent-derived-unit" -> "coulomb per square meter", 
         "symbol" -> "C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)"|>, 
       "permittivity" -> <|
        "name-of-coherent-derived-unit" -> "farad per meter", "symbol" -> 
         "F \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \!\(\*SuperscriptBox[\(m\), \
\(-3\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\(\*SuperscriptBox[\(A\), \
\(2\)]\)"|>, 
       "permeability" -> <|
        "name-of-coherent-derived-unit" -> "henry per meter", "symbol" -> 
         "H \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(A\
\), \(-2\)]\)"|>, 
       "molar-energy" -> <|
        "name-of-coherent-derived-unit" -> "joule per mole", "symbol" -> 
         "J \!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \(-1\)]\)"|>, 
       "molar-entropy-or-molar-heat-capacity" -> <|
        "name-of-coherent-derived-unit" -> "joule per mole kelvin", "symbol" -> 
         "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \(-1\)]\) \!\(\*SuperscriptBox[\(K\), \
\(-1\)]\)"|>, 
       "exposure(x-and-\[Gamma]-rays)" -> <|
        "name-of-coherent-derived-unit" -> "coulomb per kilogram", "symbol" -> 
         "C \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "A s \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)"|>, 
       "absorbed-dose-rate" -> <|
        "name-of-coherent-derived-unit" -> "gray per second", "symbol" -> 
         "Gy \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-3\)]\)"|>, 
       "radiant-intensity" -> <|
        "name-of-coherent-derived-unit" -> "watt per steradian", "symbol" -> 
         "W \!\(\*SuperscriptBox[\(sr\), \(-1\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \!\(\*SuperscriptBox[\(s\), \
\(-3\)]\)"|>, 
       "radiance" -> <|
        "name-of-coherent-derived-unit" -> "watt per square meter steradian", 
         "symbol" -> 
         "W \!\(\*SuperscriptBox[\(sr\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)"|>, 
       "catalytic-activity-concentration" -> <|
        "name-of-coherent-derived-unit" -> "katal per cubic meter", "symbol" -> 
         "kat \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
         "derived-unit-expressed-in-terms-of-base-units" -> 
         "mol \!\(\*SuperscriptBox[\(s\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-3\)]\)"|>|>, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[8]} -> 
        1, {All, "name-of-coherent-derived-unit"} -> 1, {All, "symbol"} -> 
        1, {All, "derived-unit-expressed-in-terms-of-base-units"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[515.2], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name-of-coherent-derived-unit" -> 
             TypeSystem`PackageScope`AtomShape[280.], "symbol" -> 
             TypeSystem`PackageScope`AtomShape[560.], 
             "derived-unit-expressed-in-terms-of-base-units" -> 
             TypeSystem`PackageScope`AtomShape[560.]|>], 
           DirectedInfinity[1], 3, {All}]]], 20, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{
        "name-of-coherent-derived-unit", "symbol", 
         "derived-unit-expressed-in-terms-of-base-units"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 24], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[8]} -> 
        1, {All, "name-of-coherent-derived-unit"} -> 1, {All, "symbol"} -> 
        1, {All, "derived-unit-expressed-in-terms-of-base-units"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[515.2], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name-of-coherent-derived-unit" -> 
             TypeSystem`PackageScope`AtomShape[280.], "symbol" -> 
             TypeSystem`PackageScope`AtomShape[560.], 
             "derived-unit-expressed-in-terms-of-base-units" -> 
             TypeSystem`PackageScope`AtomShape[560.]|>], 
           DirectedInfinity[1], 3, {All}]]], 20, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{
        "name-of-coherent-derived-unit", "symbol", 
         "derived-unit-expressed-in-terms-of-base-units"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 24], "Path" -> {}, "DisplayedRowCount" -> 
     20, "DisplayedColumnCount" -> 3, "DataRowCount" -> 24, "DataColumnCount" -> 
     3, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name-of-coherent-derived-unit", 
                  Style[
                  "name-of-coherent-derived-unit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name-of-coherent-derived-unit"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name-of-coherent-derived-unit"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["symbol", 
                  Style[
                  "symbol", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "symbol"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "symbol"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["derived-unit-expressed-in-terms-of-base-units", 
                  Style[
                  "derived-unit-expressed-in-terms-of-base-units", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "derived-unit-expressed-in-terms-of-base-units"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "derived-unit-expressed-in-terms-of-base-units"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["dynamic-viscosity", 
                  Style[
                  "dynamic-viscosity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["dynamic-viscosity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["dynamic-viscosity"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["pascal second", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["dynamic-viscosity"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Pa s", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["dynamic-viscosity"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \!\(\*SuperscriptBox[\
\(s\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["dynamic-viscosity"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["moment-of-force", 
                  Style[
                  "moment-of-force", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["moment-of-force"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["moment-of-force"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["newton meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["moment-of-force"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["N m", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["moment-of-force"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["moment-of-force"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["surface-tension", 
                  Style[
                  "surface-tension", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["surface-tension"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-tension"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["newton per meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-tension"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["N \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-tension"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["kg \!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-tension"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["angular-velocity-or-angular-frequency", 
                  Style[
                  "angular-velocity-or-angular-frequency", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["angular-velocity-or-angular-frequency"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-velocity-or-angular-frequency"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["radian per second", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-velocity-or-angular-frequency"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["rad \!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-velocity-or-angular-frequency"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\!\(\*SuperscriptBox[\(s\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-velocity-or-angular-frequency"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["angular-acceleration", 
                  Style[
                  "angular-acceleration", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["angular-acceleration"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-acceleration"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["radian per second squared", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-acceleration"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["rad/\!\(\*SuperscriptBox[\(s\), \(2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-acceleration"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["angular-acceleration"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["heat-flux-density-or-irradiance", 
                  Style[
                  "heat-flux-density-or-irradiance", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["heat-flux-density-or-irradiance"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-flux-density-or-irradiance"]}, "RowHeader", False],
                "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["watt per square meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-flux-density-or-irradiance"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["W/\!\(\*SuperscriptBox[\(m\), \(2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-flux-density-or-irradiance"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["kg \!\(\*SuperscriptBox[\(s\), \(-3\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-flux-density-or-irradiance"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["heat-capacity-or-entropy", 
                  Style[
                  "heat-capacity-or-entropy", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["heat-capacity-or-entropy"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-capacity-or-entropy"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["joule per kelvin", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-capacity-or-entropy"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["J \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-capacity-or-entropy"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["heat-capacity-or-entropy"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["specific-heat-capacity-or-specific-entropy", 
                  Style[
                  "specific-heat-capacity-or-specific-entropy", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["specific-heat-capacity-or-specific-entropy"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-heat-capacity-or-specific-entropy"]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["joule per kilogram kelvin", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-heat-capacity-or-specific-entropy"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-heat-capacity-or-specific-entropy"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-heat-capacity-or-specific-entropy"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["specific-energy", 
                  Style[
                  "specific-energy", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["specific-energy"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-energy"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["joule per kilogram", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-energy"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["J \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-energy"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["specific-energy"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["thermal-conductivity", 
                  Style[
                  "thermal-conductivity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["thermal-conductivity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["thermal-conductivity"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["watt per meter kelvin", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["thermal-conductivity"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "W \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["thermal-conductivity"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["thermal-conductivity"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["energy-density", 
                  Style[
                  "energy-density", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["energy-density"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["energy-density"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["joule per cubic meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["energy-density"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["J \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["energy-density"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg \!\(\*SuperscriptBox[\(m\), \(-1\)]\) \!\(\*SuperscriptBox[\
\(s\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["energy-density"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["electric-field-strength", 
                  Style[
                  "electric-field-strength", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-field-strength"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-field-strength"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["volt per meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-field-strength"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["V \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-field-strength"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg m \!\(\*SuperscriptBox[\(s\), \(-3\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-field-strength"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["electric-charge-density", 
                  Style[
                  "electric-charge-density", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-charge-density"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-charge-density"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["coulomb per cubic meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-charge-density"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["C \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-charge-density"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["A s \!\(\*SuperscriptBox[\(m\), \(-3\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-charge-density"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["surface-charge-density", 
                  Style[
                  "surface-charge-density", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["surface-charge-density"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-charge-density"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["coulomb per square meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-charge-density"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-charge-density"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["surface-charge-density"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["electric-flux-density-or-electric-displacement", 
                  Style[
                  "electric-flux-density-or-electric-displacement", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["electric-flux-density-or-electric-displacement"]}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-flux-density-or-electric-displacement"]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["coulomb per square meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-flux-density-or-electric-displacement"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["C \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-flux-density-or-electric-displacement"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["A s \!\(\*SuperscriptBox[\(m\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["electric-flux-density-or-electric-displacement"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["permittivity", 
                  Style[
                  "permittivity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["permittivity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permittivity"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["farad per meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permittivity"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["F \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permittivity"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "\!\(\*SuperscriptBox[\(kg\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(m\), \(-3\)]\) \!\(\*SuperscriptBox[\(s\), \(4\)]\) \!\
\(\*SuperscriptBox[\(A\), \(2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permittivity"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["permeability", 
                  Style[
                  "permeability", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["permeability"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permeability"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["henry per meter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permeability"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["H \!\(\*SuperscriptBox[\(m\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permeability"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg m \!\(\*SuperscriptBox[\(s\), \(-2\)]\) \
\!\(\*SuperscriptBox[\(A\), \(-2\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["permeability"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["molar-energy", 
                  Style[
                  "molar-energy", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["molar-energy"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-energy"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["joule per mole", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-energy"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["J \!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-energy"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \
\(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-energy"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["molar-entropy-or-molar-heat-capacity", 
                  Style[
                  "molar-entropy-or-molar-heat-capacity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["molar-entropy-or-molar-heat-capacity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-entropy-or-molar-heat-capacity"]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["joule per mole kelvin", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-entropy-or-molar-heat-capacity"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "J \!\(\*SuperscriptBox[\(K\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(mol\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-entropy-or-molar-heat-capacity"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "kg \!\(\*SuperscriptBox[\(m\), \(2\)]\) \
\!\(\*SuperscriptBox[\(s\), \(-2\)]\) \!\(\*SuperscriptBox[\(mol\), \(-1\)]\) \
\!\(\*SuperscriptBox[\(K\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["molar-entropy-or-molar-heat-capacity"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["exposure(x-and-\[Gamma]-rays)", 
                  Style[
                  "exposure(x-and-\[Gamma]-rays)", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["exposure(x-and-\[Gamma]-rays)"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["exposure(x-and-\[Gamma]-rays)"]}, "RowHeader", False], 
               "Mouse"], ImageSize -> {{515.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["coulomb per kilogram", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["exposure(x-and-\[Gamma]-rays)"], 
                 Key["name-of-coherent-derived-unit"]}, "Item", False], 
               "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["C \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["exposure(x-and-\[Gamma]-rays)"], 
                 Key["symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["A s \!\(\*SuperscriptBox[\(kg\), \(-1\)]\)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["exposure(x-and-\[Gamma]-rays)"], 
                 Key["derived-unit-expressed-in-terms-of-base-units"]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 24, 1], {1, 24 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 24, 1], {1, 24 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[24, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[24, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 24, 1], {1, 24 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 24, 1], {1, 24 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1967., {299.63403309800196`, 305.36596690199804`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1967., {299.63403309800196`, 305.36596690199804`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8774334464992743`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"c33078ba-062c-42de-ac23-8769cf341fef"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"PhysicalQuantity", "//", "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PhysicalQuantity", "[", "string_", "]"}], ":=", 
  RowBox[{"Entity", "[", 
   RowBox[{"\"\<PhysicalQuantity\>\"", ",", "string"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8774337268180075`*^9, 3.8774337503034716`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"e2745275-d0eb-459e-bb57-b6fb0ab5f3a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PhysicalQuantity", "[", "\"\<HeatCapacity\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877433751099799*^9, 3.8774337546535263`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"7ab4426d-27f3-4cc2-bcca-1c55195e5caf"],

Cell[BoxData[
 TemplateBox[{"\"heat capacity\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatCapacity\""}], "]"}], 
   "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatCapacity\\\"]\"", 
   "\"physical quantity\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.877433762293522*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"a9e247be-1385-438a-93e3-688564040b4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ud", "=", 
  RowBox[{
  "QuantityVariableDimensions", "[", "\"\<Energy\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8774338441984406`*^9, 3.8774338441984406`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"94ea93bd-8b44-4a1f-bc3e-f0aab8eb86f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"LengthUnit\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MassUnit\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"TimeUnit\"\>", ",", 
     RowBox[{"-", "2"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877433845096764*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"16715348-6bf7-4949-b4bd-b257f7168814"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pqs", "=", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<PhysicalQuantityLookup\>\"", "]"}], 
   "[", 
   RowBox[{"ud", ",", "\"\<Entity\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877433827255961*^9, 3.877433827255961*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"7642ea52-f99b-4a27-a233-033fb80795d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"acoustic energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcousticEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"atomic binding energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicBindingEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicBindingEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"atomic energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AtomicEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"binding energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BindingEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"BindingEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"biogas energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BiogasEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"BiogasEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"bond energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BondEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"BondEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"elastic energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElasticEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"electromagnetic energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectromagneticEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectromagneticEnergy\\\
\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Energy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Energy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"equivalent energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"EquivalentEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"EquivalentEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"excitation energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ExcitationEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExcitationEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Fermi energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"FermiEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"FermiEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"fundamental temperature\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"FundamentalTemperature\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FundamentalTemperature\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"geothermal energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"GeothermalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"GeothermalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"gravitational binding energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"GravitationalBindingEnergy\""}], 
       "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalBindingEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"magnetic energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"mass energy equivalent\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MassEnergyEquivalent\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MassEnergyEquivalent\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"massergy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Massergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Massergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"nuclear binding energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearBindingEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"NuclearBindingEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"ponderomotive energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PonderomotiveEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PonderomotiveEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"reaction energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ReactionEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ReactionEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"resonance energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ResonanceEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ResonanceEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"seismic energy equivalent\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SeismicEnergyEquivalent\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeismicEnergyEquivalent\
\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"separation energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SeparationEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeparationEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"solar energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SolarEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SolarEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"surface energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SurfaceEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SurfaceEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"tidal energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"TidalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"TidalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"total energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"TotalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"TotalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"vibrational energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"VibrationalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"VibrationalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"water energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"wave energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"wind energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"WindEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"zero\[Hyphen]point energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ZeroPointEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ZeroPointEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"amount of heat\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Heat\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Heat\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"heat gain\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatGain\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatGain\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"heat loss\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatLoss\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatLoss\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"power spectral density\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PowerSpectralDensity\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PowerSpectralDensity\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"active energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ActiveEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ActiveEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"adiabatic work\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticWork\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AdiabaticWork\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"alpha disintegration energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AlphaDisintegrationEnergy\""}],
        "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AlphaDisintegrationEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"applied moment of force\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AppliedMomentOfForce\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AppliedMomentOfForce\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"battery energy capacity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BatteryEnergyCapacity\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"BatteryEnergyCapacity\\\
\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"bending moment of force\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BendingMomentOfForce\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BendingMomentOfForce\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"beta disintegration energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BetaDisintegrationEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BetaDisintegrationEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"chemical energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ChemicalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ChemicalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"cogging torque\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"CoggingTorque\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"CoggingTorque\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"disintegration energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"DisintegrationEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"DisintegrationEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"elastic potential energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticPotentialEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticPotentialEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"electrical energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectricalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"electric apparent energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectricApparentEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectricApparentEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"electric potential energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectricPotentialEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricPotentialEnergy\
\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"electric reactive energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectricReactiveEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectricReactiveEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"electron affinity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectronAffinity\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectronAffinity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"enthalpy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Enthalpy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Enthalpy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"ergotropy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Ergotropy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Ergotropy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"exhange integral\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ExchangeIntegral\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExchangeIntegral\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"exergy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Exergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Exergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"factored bending moment of force\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"FactoredBendingMomentOfForce\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FactoredBendingMomentOfForce\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"first ionization energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"FirstIonizationEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"FirstIonizationEnergy\\\
\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"food energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"FoodEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"FoodEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"friction torque\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"FrictionTorque\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"FrictionTorque\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Gibbs energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"GibbsEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"GibbsEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"gravitational potential energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"GravitationalPotentialEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalPotentialEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Hamiltonian function\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HamiltonianFunction\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HamiltonianFunction\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Hamiltonian operator\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HamiltonianOperator\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HamiltonianOperator\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Helmholtz energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HelmholtzEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"HelmholtzEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"hysteresis torque\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HysteresisTorque\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"HysteresisTorque\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"internal energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"InternalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"InternalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"ionization energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"IonizationEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"IonizationEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"kinetic energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"KineticEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"KineticEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Lagrangian function\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LagrangianFunction\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"LagrangianFunction\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"latent heat\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeat\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"LatentHeat\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"latent heat of condensation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfCondensation\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfCondensation\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"latent heat of fusion\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfFusion\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"LatentHeatOfFusion\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"latent heat of phase transition\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"LatentHeatOfPhaseTransition\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfPhaseTransition\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"latent heat of solidification\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"LatentHeatOfSolidification\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfSolidification\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"latent heat of vaporization\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfVaporization\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfVaporization\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"level width\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LevelWidth\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"LevelWidth\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"load frequency shift\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LoadFrequencyShift\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"LoadFrequencyShift\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"magnetic domain wall energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticDomainWallEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MagneticDomainWallEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"maximum beta particle energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MaximumBetaParticleEnergy\""}],
        "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MaximumBetaParticleEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"mechanical energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"mechanical work\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalWork\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalWork\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"moment of force\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MomentOfForce\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"MomentOfForce\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"noise spectral density\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"NoiseSpectralDensity\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"NoiseSpectralDensity\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"nuclear energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"NuclearEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"particle width\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ParticleWidth\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ParticleWidth\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"photon energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PhotonEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PhotonEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"potential energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PotentialEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PotentialEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"pulsar luminosity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PulsarLuminosity\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PulsarLuminosity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"radiant energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RadiantEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadiantEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"radio luminosity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"relativistic kinetic energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RelativisticKineticEnergy\""}],
        "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RelativisticKineticEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"rotational energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RotationalEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"RotationalEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"second ionization energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SecondIonizationEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SecondIonizationEnergy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"sound energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SoundEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SoundEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", 
         "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"tempergy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Tempergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Tempergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"thermodynamic free energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicFreeEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThermodynamicFreeEnergy\
\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"thermodynamic work\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicWork\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThermodynamicWork\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"third ionization energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ThirdIonizationEnergy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThirdIonizationEnergy\\\
\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"torque\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"vacuum energy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"VacuumEnergy\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"VacuumEnergy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"virtual work\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"VirtualWork\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"VirtualWork\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"viscous drag torque\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ViscousDragTorque\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ViscousDragTorque\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"work\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Work\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Work\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"work function\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkFunction\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"WorkFunction\\\"]\"", 
     "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 CellChangeTimes->{{3.877433830094663*^9, 3.8774338524603405`*^9}},
 CellLabel->"Out[17]=",ExpressionUUID->"11d4809c-84d5-4599-b920-c4dce44370b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Rule", "@@@", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"pqs", ",", 
         RowBox[{"EntityValue", "[", 
          RowBox[{"pqs", ",", 
           RowBox[{"EntityProperty", "[", 
            RowBox[{
            "\"\<PhysicalQuantity\>\"", ",", "\"\<BasePhysicalQuantity\>\""}],
             "]"}]}], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
   RowBox[{"VertexLabels", "->", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8774338351172495`*^9, 3.8774338351172495`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e804e7e2-6ba6-4724-b5eb-ea07d39bc90a"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
       Entity["PhysicalQuantity", "AcousticEnergy"], 
       Entity["PhysicalQuantity", "Energy"], 
       Entity["PhysicalQuantity", "AtomicBindingEnergy"], 
       Entity["PhysicalQuantity", "AtomicEnergy"], 
       Entity["PhysicalQuantity", "BindingEnergy"], 
       Entity["PhysicalQuantity", "BiogasEnergy"], 
       Entity["PhysicalQuantity", "BondEnergy"], 
       Entity["PhysicalQuantity", "ElasticEnergy"], 
       Entity["PhysicalQuantity", "ElectromagneticEnergy"], 
       Entity["PhysicalQuantity", "EquivalentEnergy"], 
       Entity["PhysicalQuantity", "ExcitationEnergy"], 
       Entity["PhysicalQuantity", "FermiEnergy"], 
       Entity["PhysicalQuantity", "FundamentalTemperature"], 
       Entity["PhysicalQuantity", "GeothermalEnergy"], 
       Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
       Entity["PhysicalQuantity", "MagneticEnergy"], 
       Entity["PhysicalQuantity", "MassEnergyEquivalent"], 
       Entity["PhysicalQuantity", "Massergy"], 
       Entity["PhysicalQuantity", "NuclearBindingEnergy"], 
       Entity["PhysicalQuantity", "PonderomotiveEnergy"], 
       Entity["PhysicalQuantity", "ReactionEnergy"], 
       Entity["PhysicalQuantity", "ResonanceEnergy"], 
       Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
       Entity["PhysicalQuantity", "SeparationEnergy"], 
       Entity["PhysicalQuantity", "SolarEnergy"], 
       Entity["PhysicalQuantity", "SurfaceEnergy"], 
       Entity["PhysicalQuantity", "TidalEnergy"], 
       Entity["PhysicalQuantity", "TotalEnergy"], 
       Entity["PhysicalQuantity", "VibrationalEnergy"], 
       Entity["PhysicalQuantity", "WaterEnergy"], 
       Entity["PhysicalQuantity", "WaveEnergy"], 
       Entity["PhysicalQuantity", "WindEnergy"], 
       Entity["PhysicalQuantity", "ZeroPointEnergy"], 
       Entity["PhysicalQuantity", "HeatGain"], 
       Entity["PhysicalQuantity", "Heat"], 
       Entity["PhysicalQuantity", "HeatLoss"], 
       Entity["PhysicalQuantity", "AdiabaticWork"], 
       Entity["PhysicalQuantity", "Work"], 
       Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "DisintegrationEnergy"], 
       Entity["PhysicalQuantity", "AppliedMomentOfForce"], 
       Entity["PhysicalQuantity", "BendingMomentOfForce"], 
       Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "ChemicalEnergy"], 
       Entity["PhysicalQuantity", "PotentialEnergy"], 
       Entity["PhysicalQuantity", "CoggingTorque"], 
       Entity["PhysicalQuantity", "Torque"], 
       Entity["PhysicalQuantity", "ElasticPotentialEnergy"], 
       Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
       Entity["PhysicalQuantity", "Ergotropy"], 
       Entity["PhysicalQuantity", "Exergy"], 
       Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
       Entity["PhysicalQuantity", "FirstIonizationEnergy"], 
       Entity["PhysicalQuantity", "IonizationEnergy"], 
       Entity["PhysicalQuantity", "FrictionTorque"], 
       Entity["PhysicalQuantity", "GibbsEnergy"], 
       Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
       Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
       Entity["PhysicalQuantity", "HelmholtzEnergy"], 
       Entity["PhysicalQuantity", "HysteresisTorque"], 
       Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
       Entity["PhysicalQuantity", "LatentHeat"], 
       Entity["PhysicalQuantity", "LatentHeatOfFusion"], 
       Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
       Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
       Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
       Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
       Entity["PhysicalQuantity", "MechanicalWork"], 
       Entity["PhysicalQuantity", "NuclearEnergy"], 
       Entity["PhysicalQuantity", "RadioLuminosity"], 
       Entity[
       "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
       Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
       Entity["PhysicalQuantity", "KineticEnergy"], 
       Entity["PhysicalQuantity", "RotationalEnergy"], 
       Entity["PhysicalQuantity", "SecondIonizationEnergy"], 
       Entity["PhysicalQuantity", "ThermodynamicWork"], 
       Entity["PhysicalQuantity", "ThirdIonizationEnergy"], 
       Entity["PhysicalQuantity", "VacuumEnergy"], 
       Entity["PhysicalQuantity", "VirtualWork"], 
       Entity["PhysicalQuantity", "ViscousDragTorque"]}, {{{1, 2}, {3, 2}, {4,
        2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 
       2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20,
        2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}, {
       28, 2}, {29, 2}, {30, 2}, {31, 2}, {32, 2}, {33, 2}, {34, 35}, {36, 
       35}, {37, 38}, {39, 40}, {41, 42}, {43, 40}, {44, 45}, {46, 47}, {48, 
       45}, {49, 45}, {50, 38}, {51, 38}, {52, 42}, {53, 54}, {55, 47}, {56, 
       57}, {58, 45}, {59, 57}, {60, 47}, {61, 62}, {63, 62}, {64, 62}, {65, 
       62}, {66, 62}, {67, 40}, {68, 38}, {69, 45}, {70, 71}, {72, 73}, {74, 
       73}, {75, 54}, {76, 38}, {77, 54}, {78, 2}, {79, 38}, {80, 47}}, 
       Null}, {VertexLabels -> {
         Placed["Name", Tooltip]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.01849600757758165], 
        ArrowBox[CompressedData["
1:eJx1lGlQk1cUhrMgO2lkRwohwAgC0o7QSizDvdaAA2VJRelIRSglIBQrIpmg
sqggWrRlaVGnoIWQwECFOkoRB5h8IFFAylIL2KDQpiBb1GwQiATqTP3yg1t+
fD/OPPO+9573nO/S44/tY5MJBALzzUd6+4V1kKtUGAm6bk/2pcU/F3J5XYuF
OWpQNzv+JytJLXxxSfGHdEAOCvSvfcL01MPWc1ZRZbjWmgAr55pYghIywkt3
Hy8criXDxqwQZ/v2V4j/9Y9kd1w/fg0wRYpJzf/4y890yBi5CvCXDduBLRhB
9LSyyyY7Ty0CEdduKKwc1Ue5RRuyZ4iwnxoGZqqXEf34z5H8IrISTJwLOat0
ICJ6prY4WvIpAYa+f3w5vHIO0XefvF9NSNCAJB9nSh4P1ZdsedTw3GMKzBRr
6++OziJ6zxi/0Zh8AizjTcUtblGh/CAvih0wB5yDrk93zpEQf9nafUnvl2ow
+OTG07zScVQfwkiM3asA9WKvTvWv6HzNmlm3uEbzIEs7XUK+p0Z4v5PkVK0x
AXbvyvmeH4n6exgslvZ26MHVWpkqx1yDcAMDN+8xMAdS+RUjnHdWEe49cUSb
ICTDvrbiBXXhGsK/6M3uCvxcAkxPhk4ecEbzbZQ8LY7Z/xosBft7irTofmya
r+46T9AA1aOeraZWUoQnum2Kp7iS4GB3T8yKKZrv270DDctObiduLSF6r7uv
2ogXx8Bk5c75KqIMzf9063RLhR6U0q0KFprQ+cYP5uvTlC9B3rYnGsoKqp8c
+a6skUGATUy990wvovnM8a1+73WcBYYi0ytLO/5GuAo6GORSn4EPvq1viLqJ
nq8YmIhQCmwgRiP4kvgULMgyN3FPjb2utu4pD1YKaBtyP1qG2nbXPKhuCG3t
DjXGVMDQsKx+AcizzR+v/UjF0ujNVcFUI5jRdmg5TW6NddEfpxuSqNDMnt0Z
JrXF8PNvBx1ZvfeNjc4fr3nl+gGZHAvozp7a1jKN6rlF5GMZtpsh/j7sZunZ
iTRUCHOXB+k1C8K4WDF7LNsRZtoMS6/SRoVlEX2ig2/8DzMkAXeM5UKXsAix
y1fGcLuJbKl/rwzRT/dR6WpzM7ijX9nq5UHE1nN6itJnolIL2trTbWuZaP+H
k0fWzIdJkGEpkZZfoyIcz3ej/vH9w/NzK2QMTBcrAd6/MOmf5bNcR/hhQuyI
U/IK0h+e78uZqxHBqfo6f7xe9PK5GTRkCaOH+pj+7nKkf/x+G+m9Yy4omaO2
uvzXn4/Ph9/cepqyz1CXH382MI7hTsXw/APsLuwPrjJDOJ7/izRiyMNIC4Tj
9z+QxdHkbqYgfIWctfqZvwXMSq3beoiD6uNXYtPOGFHhJbELeCB9F9kvPP+R
4a/9Am+g88P9WaI9nKij6H7k97WHKgUO0D6+Iu2KwB77r7bT1fh8gj19Lz87
aqHLF6/x/Dfigy3knMhfCLr/Y/1+hAc+cE25rQUKClecSbVE7s9TpYoeNioB
3v96fVPtD0RMJgb5hTakyJ+0yPuRzvnNZy15Hnh2+hWYWKD+dYwqH5N+W5h6
4py5aQi6n/8CQM54xQ==
         "], 0.05591872795906591]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3442165927191696, -0.6994777701997106}, 
           0.05591872795906591],
          TemplateBox[{"\"acoustic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcousticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AcousticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.468394245088488, -1.4627235899521145}, 
           0.05591872795906591],
          TemplateBox[{"\"energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Energy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Energy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Energy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1132629698047325, -2.5211263566751}, 0.05591872795906591],
          TemplateBox[{"\"atomic binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AtomicBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0112253325222937, -2.446116095086225}, 
           0.05591872795906591],
          TemplateBox[{"\"atomic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.4569502654850988, -0.991834227537671}, 
           0.05591872795906591],
          TemplateBox[{"\"binding energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BindingEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7036482838482023, -2.521312798692037}, 
           0.05591872795906591],
          TemplateBox[{"\"biogas energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BiogasEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BiogasEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BiogasEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.156061115696556, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"bond energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BondEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BondEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BondEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4048376513613403, -2.5758320175072833}, 
           0.05591872795906591],
          TemplateBox[{"\"elastic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.2384739544403756, -1.6025164101311478}, 
           0.05591872795906591],
          TemplateBox[{"\"electromagnetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectromagneticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectromagneticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectromagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1883694094674335, -2.139624605261232}, 
           0.05591872795906591],
          TemplateBox[{"\"equivalent energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"EquivalentEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"EquivalentEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "EquivalentEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.039982516813014, -0.8320689079205379}, 
           0.05591872795906591],
          TemplateBox[{"\"excitation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ExcitationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExcitationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ExcitationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.6494146725668646, -2.204351530474401}, 
           0.05591872795906591],
          TemplateBox[{"\"Fermi energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FermiEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"FermiEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FermiEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.661486949386772, -0.8075826968820623}, 
           0.05591872795906591],
          TemplateBox[{"\"fundamental temperature\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FundamentalTemperature\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FundamentalTemperature\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FundamentalTemperature"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0646321119380864, -1.256582621101335}, 
           0.05591872795906591],
          TemplateBox[{"\"geothermal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GeothermalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"GeothermalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GeothermalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8201166812967008, -2.364629563796158}, 
           0.05591872795906591],
          TemplateBox[{"\"gravitational binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4618634088546933, -0.47769257111521046}, 
           0.05591872795906591],
          TemplateBox[{"\"magnetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1424249642483442, -0.7097128670200921}, 
           0.05591872795906591],
          TemplateBox[{"\"mass energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MassEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MassEnergyEquivalent\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MassEnergyEquivalent"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8449057048471232, -1.4826694201909438}, 
           0.05591872795906591],
          TemplateBox[{"\"massergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Massergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Massergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Massergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0052022552737077, -0.4738551559793618}, 
           0.05591872795906591],
          TemplateBox[{"\"nuclear binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"NuclearBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"NuclearBindingEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.594624660618952, -1.629515606686709}, 
           0.05591872795906591],
          TemplateBox[{"\"ponderomotive energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"PonderomotiveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PonderomotiveEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PonderomotiveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8202949429907854, -1.8787744887615885}, 
           0.05591872795906591],
          TemplateBox[{"\"reaction energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ReactionEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ReactionEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ReactionEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.4684543416623432, -1.9714278786084831}, 
           0.05591872795906591],
          TemplateBox[{"\"resonance energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ResonanceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ResonanceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ResonanceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.5736416661951119, -2.1417653880918177}, 
           0.05591872795906591],
          TemplateBox[{"\"seismic energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SeismicEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeismicEnergyEquivalent\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7080970438675354, -0.3592389032575336}, 
           0.05591872795906591],
          TemplateBox[{"\"separation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SeparationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeparationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeparationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.625127571226302, -0.8775692708571783}, 
           0.05591872795906591],
          TemplateBox[{"\"solar energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SolarEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"SolarEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SolarEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.267605558187756, -2.256340725632164}, 
           0.05591872795906591],
          TemplateBox[{"\"surface energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SurfaceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SurfaceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SurfaceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -1.543078568312562}, 
           0.05591872795906591],
          TemplateBox[{"\"tidal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TidalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TidalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TidalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.4301761956293031, -1.0003985584426625}, 
           0.05591872795906591],
          TemplateBox[{"\"total energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TotalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TotalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TotalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.5765245536889743, -1.294179462203938}, 
           0.05591872795906591],
          TemplateBox[{"\"vibrational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VibrationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VibrationalEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VibrationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.9671778800316242, -1.0615377234085777}, 
           0.05591872795906591],
          TemplateBox[{"\"water energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaterEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0281650242057925, -1.9707147442425539}, 
           0.05591872795906591],
          TemplateBox[{"\"wave energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7850088217939206, -0.5374720507299182}, 
           0.05591872795906591],
          TemplateBox[{"\"wind energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WindEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WindEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.45413184828522835, -1.2920748504482849}, 
           0.05591872795906591],
          TemplateBox[{"\"zero\[Hyphen]point energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ZeroPointEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ZeroPointEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ZeroPointEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"heat gain\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatGain\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatGain\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatGain"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"amount of heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Heat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Heat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Heat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"heat loss\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatLoss\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatLoss\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatLoss"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8508419831350471, -3.2874922402167654}, 
           0.05591872795906591],
          TemplateBox[{"\"adiabatic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AdiabaticWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.3541460336455176, -4.15136651802412}, 
           0.05591872795906591],
          TemplateBox[{"\"work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Work\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Work\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Work"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.13295294129437, -5.735782524380841}, 0.05591872795906591],
          TemplateBox[{"\"alpha disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AlphaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AlphaDisintegrationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.001985353599995, -6.230765378399849}, 
           0.05591872795906591],
          TemplateBox[{"\"disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"DisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"DisintegrationEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "DisintegrationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"applied moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AppliedMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AppliedMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AppliedMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BendingMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BendingMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.864716500428502, -5.726288466097039}, 
           0.05591872795906591],
          TemplateBox[{"\"beta disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BetaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BetaDisintegrationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.273881659118948, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"chemical energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ChemicalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ChemicalEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ChemicalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.244892493141436, -1.3530595934934837}, 
           0.05591872795906591],
          TemplateBox[{"\"potential energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"PotentialEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.622907248929408, -0.36130331161654494}, 
           0.05591872795906591],
          TemplateBox[{"\"cogging torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"CoggingTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"CoggingTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "CoggingTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.9124518304778535, -1.065112348212629}, 
           0.05591872795906591],
          TemplateBox[{"\"torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Torque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.3023144774866906, -1.0175313686492686}, 
           0.05591872795906591],
          TemplateBox[{"\"elastic potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElasticPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticPotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.6342604239704204, -2.145593136194088}, 
           0.05591872795906591],
          TemplateBox[{"\"electric potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectricPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricPotentialEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.851775362904512, -3.283521834375021}, 
           0.05591872795906591],
          TemplateBox[{"\"ergotropy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Ergotropy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Ergotropy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Ergotropy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3540401446636414, -4.149032307909743}, 
           0.05591872795906591],
          TemplateBox[{"\"exergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Exergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Exergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Exergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"factored bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FactoredBendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FactoredBendingMomentOfForce\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -5.735782524380841}, 
           0.05591872795906591],
          TemplateBox[{"\"first ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FirstIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FirstIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FirstIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2228773207394938, -6.230765378399849}, 
           0.05591872795906591],
          TemplateBox[{"\"ionization energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"IonizationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"IonizationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "IonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.616706757073131, -1.7756660818033771}, 
           0.05591872795906591],
          TemplateBox[{"\"friction torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FrictionTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"FrictionTorque\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FrictionTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"Gibbs energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GibbsEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"GibbsEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GibbsEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"thermodynamic free energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThermodynamicFreeEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThermodynamicFreeEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.204371157287133, -1.0723231017592156}, 
           0.05591872795906591],
          TemplateBox[{"\"gravitational potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"Helmholtz energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HelmholtzEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HelmholtzEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HelmholtzEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.210223965775453, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"hysteresis torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HysteresisTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"HysteresisTorque\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HysteresisTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.273881659118948, -3.040066687265453}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of condensation\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfCondensation\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfCondensation\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.244892493141436, -4.039281372325068}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"LatentHeat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.3023144774866906, -3.7037531474808523}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of fusion\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfFusion\""}],
               "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfFusion\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfFusion"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.6342604239704204, -4.831814915025672}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of phase transition\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfPhaseTransition\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfPhaseTransition\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.204371157287133, -3.7585448805907995}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of solidification\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfSolidification\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfSolidification\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.8089294207757085, -4.864609340754324}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of vaporization\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfVaporization\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfVaporization\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.009279018267167, -7.231225000918708}, 
           0.05591872795906591],
          TemplateBox[{"\"maximum beta particle energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MaximumBetaParticleEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MaximumBetaParticleEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -4.154560930027818}, 
           0.05591872795906591],
          TemplateBox[{"\"mechanical work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalWork\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MechanicalWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.8089294207757085, -2.17838756192274}, 
           0.05591872795906591],
          TemplateBox[{"\"nuclear energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"NuclearEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.412060927471547, -6.911706695122599}, 
           0.05591872795906591],
          TemplateBox[{"\"radio luminosity\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadioLuminosity\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RadioLuminosity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.412060927471547, -6.911706695122599}, 
           0.05591872795906591],
          
          TemplateBox[{
           "\"spectral radiant flux (with respect to frequency)\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity[
          "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"relativistic kinetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"RelativisticKineticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"RelativisticKineticEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"kinetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"KineticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"KineticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "KineticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"rotational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RotationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"RotationalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RotationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.085608467568001, -5.726288466097039}, 
           0.05591872795906591],
          TemplateBox[{"\"second ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SecondIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SecondIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SecondIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.8560582577232085, -5.016086019055125}, 
           0.05591872795906591],
          TemplateBox[{"\"thermodynamic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThermodynamicWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2301709854066663, -7.231225000918708}, 
           0.05591872795906591],
          TemplateBox[{"\"third ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThirdIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThirdIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThirdIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.42094421533931414, -1.85139752213641}, 
           0.05591872795906591],
          TemplateBox[{"\"vacuum energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VacuumEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VacuumEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VacuumEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8566890727776537, -5.0185986492292995}, 
           0.05591872795906591],
          TemplateBox[{"\"virtual work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VirtualWork\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"VirtualWork\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VirtualWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.201214606013687, -1.7680779192953322}, 
           0.05591872795906591],
          TemplateBox[{"\"viscous drag torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ViscousDragTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ViscousDragTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ViscousDragTorque"], "Tooltip"]& ]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.8774338361014223`*^9, 3.877433853806316*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"1e0bd124-9bda-4c34-ac4d-739da7c63b75"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConnectedComponents", "[", 
  RowBox[{"UndirectedGraph", "@", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"Rule", "@@@", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{"pqs", ",", 
           RowBox[{"EntityValue", "[", 
            RowBox[{"pqs", ",", 
             RowBox[{"EntityProperty", "[", 
              RowBox[{
              "\"\<PhysicalQuantity\>\"", ",", 
               "\"\<BasePhysicalQuantity\>\""}], "]"}]}], "]"}]}], "}"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"VertexLabels", "->", 
      RowBox[{"Placed", "[", 
       RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877433912077959*^9, 3.877433943569806*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"72590eef-5e9b-48b1-b5e4-0be3d57b9f94"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"acoustic energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcousticEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"Energy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"Energy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"atomic binding energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicBindingEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AtomicBindingEnergy\\\
\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"atomic energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"AtomicEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"binding energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"BindingEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"BindingEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"biogas energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"BiogasEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"BiogasEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"bond energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"BondEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"BondEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"elastic energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElasticEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"electromagnetic energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectromagneticEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectromagneticEnergy\
\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"equivalent energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"EquivalentEnergy\""}], "]"}],
        "\"Entity[\\\"PhysicalQuantity\\\", \\\"EquivalentEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"excitation energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ExcitationEnergy\""}], "]"}],
        "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExcitationEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"Fermi energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"FermiEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"FermiEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"fundamental temperature\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"FundamentalTemperature\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FundamentalTemperature\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"geothermal energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"GeothermalEnergy\""}], "]"}],
        "\"Entity[\\\"PhysicalQuantity\\\", \\\"GeothermalEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"gravitational binding energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"GravitationalBindingEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalBindingEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"magnetic energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"mass energy equivalent\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"MassEnergyEquivalent\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MassEnergyEquivalent\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"massergy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"Massergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"Massergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"nuclear binding energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearBindingEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"NuclearBindingEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"ponderomotive energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"PonderomotiveEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"PonderomotiveEnergy\\\
\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"reaction energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ReactionEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"ReactionEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"resonance energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ResonanceEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"ResonanceEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"seismic energy equivalent\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"SeismicEnergyEquivalent\""}],
          "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SeismicEnergyEquivalent\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"separation energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"SeparationEnergy\""}], "]"}],
        "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeparationEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"solar energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"SolarEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"SolarEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"surface energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"SurfaceEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"SurfaceEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"tidal energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"TidalEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"TidalEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"total energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"TotalEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"TotalEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"vibrational energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"VibrationalEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VibrationalEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"water energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"wave energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"wind energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"WindEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"zero\[Hyphen]point energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ZeroPointEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"ZeroPointEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"vacuum energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"VacuumEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"VacuumEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"adiabatic work\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticWork\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"AdiabaticWork\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"work\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"Work\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"Work\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"ergotropy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"Ergotropy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"Ergotropy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"exergy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"Exergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"Exergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"mechanical work\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalWork\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalWork\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"thermodynamic work\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicWork\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThermodynamicWork\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"virtual work\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"VirtualWork\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"VirtualWork\\\"]\"", 
       "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"latent heat of condensation\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"LatentHeatOfCondensation\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfCondensation\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"latent heat\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeat\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"LatentHeat\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"latent heat of fusion\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfFusion\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfFusion\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"latent heat of phase transition\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"LatentHeatOfPhaseTransition\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfPhaseTransition\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"latent heat of solidification\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"LatentHeatOfSolidification\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfSolidification\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"latent heat of vaporization\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"LatentHeatOfVaporization\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfVaporization\\\"]\"", "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"chemical energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ChemicalEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"ChemicalEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"potential energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"PotentialEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"PotentialEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"elastic potential energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticPotentialEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticPotentialEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"electric potential energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectricPotentialEnergy\""}],
          "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectricPotentialEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"gravitational potential energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"GravitationalPotentialEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalPotentialEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"nuclear energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"NuclearEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"cogging torque\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"CoggingTorque\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"CoggingTorque\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"torque\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"friction torque\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"FrictionTorque\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"FrictionTorque\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"hysteresis torque\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"HysteresisTorque\""}], "]"}],
        "\"Entity[\\\"PhysicalQuantity\\\", \\\"HysteresisTorque\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"viscous drag torque\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ViscousDragTorque\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ViscousDragTorque\\\"]\"", "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"first ionization energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"FirstIonizationEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"FirstIonizationEnergy\
\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"ionization energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"IonizationEnergy\""}], "]"}],
        "\"Entity[\\\"PhysicalQuantity\\\", \\\"IonizationEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"second ionization energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"SecondIonizationEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SecondIonizationEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"third ionization energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ThirdIonizationEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThirdIonizationEnergy\
\\\"]\"", "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"alpha disintegration energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"AlphaDisintegrationEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AlphaDisintegrationEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"disintegration energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"DisintegrationEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"DisintegrationEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"beta disintegration energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"BetaDisintegrationEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BetaDisintegrationEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"maximum beta particle energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"MaximumBetaParticleEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MaximumBetaParticleEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"relativistic kinetic energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"RelativisticKineticEnergy\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RelativisticKineticEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"kinetic energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"KineticEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"KineticEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"rotational energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"RotationalEnergy\""}], "]"}],
        "\"Entity[\\\"PhysicalQuantity\\\", \\\"RotationalEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"Gibbs energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"GibbsEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"GibbsEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"thermodynamic free energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicFreeEnergy\""}],
          "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThermodynamicFreeEnergy\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"Helmholtz energy\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"HelmholtzEnergy\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"HelmholtzEnergy\\\"]\"", 
       "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"applied moment of force\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"AppliedMomentOfForce\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AppliedMomentOfForce\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"bending moment of force\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"BendingMomentOfForce\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BendingMomentOfForce\\\"]\"", "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"factored bending moment of force\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"FactoredBendingMomentOfForce\""}], 
         "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FactoredBendingMomentOfForce\\\"]\"", "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"heat gain\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatGain\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatGain\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"amount of heat\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"Heat\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"Heat\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"heat loss\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatLoss\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatLoss\\\"]\"", 
       "\"physical quantity\""},
      "Entity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"radio luminosity\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
       "\"physical quantity\""},
      "Entity"], ",", 
     TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
       RowBox[{"Entity", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", 
           "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
       "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
       "\"physical quantity\""},
      "Entity"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.877433899011248*^9, 3.8774339440224724`*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"24c610bb-88dd-4787-ad71-8b2144a60aef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TakeSmallestBy", "[", 
  RowBox[{
   RowBox[{"ConnectedComponents", "[", 
    RowBox[{"UndirectedGraph", "@", 
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"Rule", "@@@", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"pqs", ",", 
             RowBox[{"EntityValue", "[", 
              RowBox[{"pqs", ",", 
               RowBox[{"EntityProperty", "[", 
                RowBox[{
                "\"\<PhysicalQuantity\>\"", ",", 
                 "\"\<BasePhysicalQuantity\>\""}], "]"}]}], "]"}]}], "}"}], 
           "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"VertexLabels", "->", 
        RowBox[{"Placed", "[", 
         RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]}], "]"}], 
   ",", "Length", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8774339523732786`*^9, 3.8774339577648654`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"d933b1c5-66e6-4149-ab67-7a79e9c63876"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    TemplateBox[{"\"radio luminosity\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
      "\"physical quantity\""},
     "Entity"], ",", 
    TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"PhysicalQuantity\"", ",", 
          "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
      "\"physical quantity\""},
     "Entity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8774339581710157`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"fdb0ad7f-a1c4-42e9-b72f-56464e09f35b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "[", "\"\<Dataset\>\"", "]"}], "&"}], ",", 
   RowBox[{"TakeSmallestBy", "[", 
    RowBox[{
     RowBox[{"ConnectedComponents", "[", 
      RowBox[{"UndirectedGraph", "@", 
       RowBox[{"Graph", "[", 
        RowBox[{
         RowBox[{"Rule", "@@@", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{"pqs", ",", 
               RowBox[{"EntityValue", "[", 
                RowBox[{"pqs", ",", 
                 RowBox[{"EntityProperty", "[", 
                  RowBox[{
                  "\"\<PhysicalQuantity\>\"", ",", 
                   "\"\<BasePhysicalQuantity\>\""}], "]"}]}], "]"}]}], "}"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"VertexLabels", "->", 
          RowBox[{"Placed", "[", 
           RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]}], 
      "]"}], ",", "Length", ",", "1"}], "]"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.8774339665652103`*^9, 3.877433982596857*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"b87f07d0-3bc5-4f21-ba11-a8773896c1a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TagBox[
      TagBox[
       DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> <|
          EntityProperty["PhysicalQuantity", "Abbreviations"] -> 
           Missing["NotAvailable"], 
           EntityProperty["PhysicalQuantity", "AlgebraicTypes"] -> {
            "positive real", "scalar"}, 
           EntityProperty["PhysicalQuantity", "AlternateNames"] -> 
           Missing["NotAvailable"], 
           EntityProperty["PhysicalQuantity", "BasePhysicalQuantity"] -> 
           Entity["PhysicalQuantity", 
             "SpectralRadiantFluxWithRespectToFrequency"], 
           EntityProperty["PhysicalQuantity", "CanonicalUnit"] -> 
           Quantity[1, "Hertz"^(-1) "Watts"], 
           EntityProperty["PhysicalQuantity", "Classes"] -> {
             EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
           EntityProperty[
            "PhysicalQuantity", "Dimensions"] -> {{"LengthUnit", 2}, {
             "MassUnit", 1}, {"TimeUnit", -2}}, 
           EntityProperty["PhysicalQuantity", "EntityClasses"] -> {
             EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
           EntityProperty["PhysicalQuantity", "Instances"] -> 
           Missing["NotApplicable"], 
           EntityProperty["PhysicalQuantity", "Name"] -> "radio luminosity", 
           EntityProperty["PhysicalQuantity", "NamedSIUnit"] -> 
           Missing["None"], 
           EntityProperty["PhysicalQuantity", "PhysicalPropertyType"] -> 
           Missing["NotAvailable"], 
           EntityProperty["PhysicalQuantity", "QuantityVariable"] -> 
           QuantityVariable[{}, "RadioLuminosity"], 
           EntityProperty["PhysicalQuantity", "SIBaseUnit"] -> 
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
           EntityProperty["PhysicalQuantity", "SIUnit"] -> 
           Quantity[1, "Hertz"^(-1) "Watts"], 
           EntityProperty["PhysicalQuantity", "StandardIdentifiers"] -> <||>, 
           EntityProperty["PhysicalQuantity", "StandardSymbols"] -> <||>, 
           EntityProperty["PhysicalQuantity", "Symbols"] -> {}|>, 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`UnknownShape[True], 
             TypeSystem`PackageScope`UnknownShape[False]]], 18, 
           DirectedInfinity[1], {}], "InitialType" -> 
         TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
         "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
         TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`UnknownShape[True], 
             TypeSystem`PackageScope`UnknownShape[False]]], 18, 
           DirectedInfinity[1], {}], "Type" -> 
         TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
         "Path" -> {}, "DisplayedRowCount" -> 18, "DisplayedColumnCount" -> 1,
          "DataRowCount" -> 18, "DataColumnCount" -> 1, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"abbreviations\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"algebraic types\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    
                    Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"alternate names\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"base physical quantity\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                   "\"spectral radiant flux (with respect to frequency)\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"canonical unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    RowBox[{"1", 
                    
                    RowBox[{
                    "\"W\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"Hz\""}]}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{75, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"classes\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                    False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"dimensions\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                    "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"entity classes\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                    4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                    "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"instances\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                     False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                     False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"name\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation["radio luminosity", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                    False], "Mouse"], 
                  ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"named SI unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"physical property type\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"quantity variable\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    TemplateBox[{
                    RowBox[{"{", "}"}], "\"RadioLuminosity\""}, 
                    "QuantityVariable", DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    RowBox[{"Quantity variable:", " radio luminosity"}], 
                    TooltipStyle -> "TextStyling"]& )], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"SI base unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{75, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"SI unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    RowBox[{"1", 
                    
                    RowBox[{
                    "\"W\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"Hz\""}]}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"standard identifiers\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"standard symbols\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"symbols\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
        DynamicWrapperBox[
         DynamicBox[ToBoxes[
           Dataset`DatasetContent[
           2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
            "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
            "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
            "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
            "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
            "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
            "BottomBar" -> 
            Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
            "OutputID" -> Hold[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
           StandardForm],
          ImageSizeCache->{426., {259.63403309800196`, 265.36596690199804`}},
          TrackedSymbols:>{
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
         MouseAnnotation[],
         ImageSizeCache->{426., {259.63403309800196`, 265.36596690199804`}}],
        BaseStyle->{LineBreakWithin -> False},
        DynamicModuleValues:>{},
        Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
         CreateUUID[]),
        UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Dataset`InterpretDataset[1],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     TagBox[
      TagBox[
       DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> <|
          EntityProperty["PhysicalQuantity", "Abbreviations"] -> 
           Missing["NotAvailable"], 
           EntityProperty["PhysicalQuantity", "AlgebraicTypes"] -> {
            "positive real", "scalar"}, 
           EntityProperty["PhysicalQuantity", "AlternateNames"] -> {
            "spectral radiant power (with respect to frequency)"}, 
           EntityProperty["PhysicalQuantity", "BasePhysicalQuantity"] -> 
           Missing["NotAvailable"], 
           EntityProperty["PhysicalQuantity", "CanonicalUnit"] -> 
           Quantity[1, "Hertz"^(-1) "Watts"], 
           EntityProperty["PhysicalQuantity", "Classes"] -> {}, 
           EntityProperty[
            "PhysicalQuantity", "Dimensions"] -> {{"LengthUnit", 2}, {
             "MassUnit", 1}, {"TimeUnit", -2}}, 
           EntityProperty["PhysicalQuantity", "EntityClasses"] -> {}, 
           EntityProperty["PhysicalQuantity", "Instances"] -> {
             Entity["PhysicalQuantity", "RadioLuminosity"]}, 
           EntityProperty["PhysicalQuantity", "Name"] -> 
           "spectral radiant flux (with respect to frequency)", 
           EntityProperty["PhysicalQuantity", "NamedSIUnit"] -> 
           Missing["None"], 
           EntityProperty["PhysicalQuantity", "PhysicalPropertyType"] -> 
           Missing["NotAvailable"], 
           EntityProperty["PhysicalQuantity", "QuantityVariable"] -> 
           QuantityVariable[
             Subscript["\[CapitalPhi]", "e", "\[Nu]"], 
             "SpectralRadiantFluxWithRespectToFrequency"], 
           EntityProperty["PhysicalQuantity", "SIBaseUnit"] -> 
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
           EntityProperty["PhysicalQuantity", "SIUnit"] -> 
           Quantity[1, "Hertz"^(-1) "Watts"], 
           EntityProperty["PhysicalQuantity", "StandardIdentifiers"] -> <|
            "Wikidata" -> "Q101460704"|>, 
           EntityProperty["PhysicalQuantity", "StandardSymbols"] -> <||>, 
           EntityProperty["PhysicalQuantity", "Symbols"] -> {}|>, 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`UnknownShape[True], 
             TypeSystem`PackageScope`UnknownShape[False]]], 18, 
           DirectedInfinity[1], {}], "InitialType" -> 
         TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
         "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
         TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`UnknownShape[True], 
             TypeSystem`PackageScope`UnknownShape[False]]], 18, 
           DirectedInfinity[1], {}], "Type" -> 
         TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
         "Path" -> {}, "DisplayedRowCount" -> 18, "DisplayedColumnCount" -> 1,
          "DataRowCount" -> 18, "DataColumnCount" -> 1, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
        DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"abbreviations\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"algebraic types\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    
                    Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"alternate names\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    
                    Style[{"spectral radiant power (with respect to \
frequency)"}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"spectral radiant power (with respect to \
frequency)"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                    4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                    "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"base physical quantity\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"canonical unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    RowBox[{"1", 
                    
                    RowBox[{
                    "\"W\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"Hz\""}]}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{75, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"classes\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"dimensions\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                    "Item", False], "Mouse"], 
                  ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"entity classes\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"instances\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                     False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Style[{
                    Entity["PhysicalQuantity", "RadioLuminosity"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    Entity["PhysicalQuantity", "RadioLuminosity"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                     False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"name\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                  "spectral radiant flux (with respect to frequency)", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                    False], "Mouse"], 
                  ImageSize -> {{548.8000000000001, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"named SI unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"physical property type\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   Style["\[LongDash]", 
                    GrayLevel[0.75]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"quantity variable\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    TemplateBox[{
                    SubscriptBox["\"\[CapitalPhi]\"", 
                    RowBox[{"\"e\"", ",", "\"\[Nu]\""}]], 
                    "\"SpectralRadiantFluxWithRespectToFrequency\""}, 
                    "QuantityVariable", DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    
                    RowBox[{
                    "Quantity variable:", 
                    " spectral radiant flux (with respect to frequency)"}], 
                    TooltipStyle -> "TextStyling"]& )], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"SI base unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{75, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"SI unit\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    RowBox[{"1", 
                    
                    RowBox[{
                    "\"W\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"Hz\""}]}]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"standard identifiers\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    
                    Style[<|"Wikidata" -> "Q101460704"|>, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[<|"Wikidata" -> "Q101460704"|>, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, 4]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, "Item", 
                    False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"standard symbols\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                    "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["\"symbols\""], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
        TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
        DynamicWrapperBox[
         DynamicBox[ToBoxes[
           Dataset`DatasetContent[
           2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
            "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
            "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
            "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
            "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
            "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
            "BottomBar" -> 
            Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
            "OutputID" -> Hold[
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
           StandardForm],
          ImageSizeCache->{626., {254.13403309800196`, 259.86596690199804`}},
          
          TrackedSymbols:>{
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
         MouseAnnotation[],
         ImageSizeCache->{626., {254.13403309800196`, 259.86596690199804`}}],
        BaseStyle->{LineBreakWithin -> False},
        DynamicModuleValues:>{},
        Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
         CreateUUID[]),
        UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Dataset`InterpretDataset[1],
      Editable->False,
      SelectWithContents->True,
      Selectable->False]}], "}"}], "[", "\<\"Dataset\"\>", "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8774339719840765`*^9, 3.8774339845761366`*^9}},
 CellLabel->"Out[26]=",ExpressionUUID->"e4b1f022-1aa4-41d4-9849-c0d8d8a75add"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "[", "\"\<Dataset\>\"", "]"}], "&"}], ",", 
   RowBox[{
    RowBox[{"SortBy", "[", 
     RowBox[{
      RowBox[{"ConnectedComponents", "[", 
       RowBox[{"UndirectedGraph", "@", 
        RowBox[{"Graph", "[", 
         RowBox[{
          RowBox[{"Rule", "@@@", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"pqs", ",", 
                RowBox[{"EntityValue", "[", 
                 RowBox[{"pqs", ",", 
                  RowBox[{"EntityProperty", "[", 
                   RowBox[{
                   "\"\<PhysicalQuantity\>\"", ",", 
                    "\"\<BasePhysicalQuantity\>\""}], "]"}]}], "]"}]}], "}"}],
               "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
          RowBox[{"VertexLabels", "->", 
           RowBox[{"Placed", "[", 
            RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]}], 
       "]"}], ",", "Length"}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8774339665652103`*^9, 3.877433992109205*^9}, {
  3.877434037795149*^9, 3.877434046222371*^9}, {3.8774340807457337`*^9, 
  3.8774340889230967`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"81b8857d-532e-4bc2-b3fe-15e1ff515cd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        EntityProperty["PhysicalQuantity", "Abbreviations"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "AlgebraicTypes"] -> {
          "positive real", "scalar", "vector"}, 
         EntityProperty["PhysicalQuantity", "AlternateNames"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "BasePhysicalQuantity"] -> 
         Entity["PhysicalQuantity", "BendingMomentOfForce"], 
         EntityProperty["PhysicalQuantity", "CanonicalUnit"] -> 
         Quantity[1, "Meters" "Newtons"], 
         EntityProperty["PhysicalQuantity", "Classes"] -> {
           EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
         EntityProperty[
          "PhysicalQuantity", "Dimensions"] -> {{"LengthUnit", 2}, {
           "MassUnit", 1}, {"TimeUnit", -2}}, 
         EntityProperty["PhysicalQuantity", "EntityClasses"] -> {
           EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
         EntityProperty["PhysicalQuantity", "Instances"] -> 
         Missing["NotApplicable"], EntityProperty["PhysicalQuantity", "Name"] -> 
         "applied moment of force", 
         EntityProperty["PhysicalQuantity", "NamedSIUnit"] -> Missing["None"],
          EntityProperty["PhysicalQuantity", "PhysicalPropertyType"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "QuantityVariable"] -> 
         QuantityVariable[{}, "AppliedMomentOfForce"], 
         EntityProperty["PhysicalQuantity", "SIBaseUnit"] -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         EntityProperty["PhysicalQuantity", "SIUnit"] -> 
         Quantity[1, "Meters" "Newtons"], 
         EntityProperty["PhysicalQuantity", "StandardIdentifiers"] -> <||>, 
         EntityProperty["PhysicalQuantity", "StandardSymbols"] -> <||>, 
         EntityProperty["PhysicalQuantity", "Symbols"] -> {}|>, 
       "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`KeyValueShape[
           TypeSystem`PackageScope`UnknownShape[True], 
           TypeSystem`PackageScope`UnknownShape[False]]], 18, 
         DirectedInfinity[1], {}], "InitialType" -> 
       TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
       "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`KeyValueShape[
           TypeSystem`PackageScope`UnknownShape[True], 
           TypeSystem`PackageScope`UnknownShape[False]]], 18, 
         DirectedInfinity[1], {}], "Type" -> 
       TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
       "Path" -> {}, "DisplayedRowCount" -> 18, "DisplayedColumnCount" -> 1, 
       "DataRowCount" -> 18, "DataColumnCount" -> 1, "SortPaths" -> {}, 
       "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"abbreviations\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"algebraic types\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"positive real", "scalar", "vector"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"positive real", "scalar", "vector"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"alternate names\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"base physical quantity\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"bending moment of force\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"canonical unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"classes\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                  False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"dimensions\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"entity classes\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"instances\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                   False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                   False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"name\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["applied moment of force", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{257.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"named SI unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"physical property type\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"quantity variable\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   TemplateBox[{
                    RowBox[{"{", "}"}], "\"AppliedMomentOfForce\""}, 
                    "QuantityVariable", DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    
                    RowBox[{
                    "Quantity variable:", " applied moment of force"}], 
                    TooltipStyle -> "TextStyling"]& )], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"SI base unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"SI unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"standard identifiers\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"standard symbols\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"symbols\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{419., {259.63403309800196`, 265.36596690199804`}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{419., {259.63403309800196`, 265.36596690199804`}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        EntityProperty["PhysicalQuantity", "Abbreviations"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "AlgebraicTypes"] -> {
          "positive real", "scalar", "vector"}, 
         EntityProperty["PhysicalQuantity", "AlternateNames"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "BasePhysicalQuantity"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "CanonicalUnit"] -> 
         Quantity[1, "Meters" "Newtons"], 
         EntityProperty["PhysicalQuantity", "Classes"] -> {}, 
         EntityProperty[
          "PhysicalQuantity", "Dimensions"] -> {{"LengthUnit", 2}, {
           "MassUnit", 1}, {"TimeUnit", -2}}, 
         EntityProperty["PhysicalQuantity", "EntityClasses"] -> {}, 
         EntityProperty["PhysicalQuantity", "Instances"] -> {
           Entity["PhysicalQuantity", "AppliedMomentOfForce"], 
           Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"]}, 
         EntityProperty["PhysicalQuantity", "Name"] -> 
         "bending moment of force", 
         EntityProperty["PhysicalQuantity", "NamedSIUnit"] -> Missing["None"],
          EntityProperty["PhysicalQuantity", "PhysicalPropertyType"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "QuantityVariable"] -> 
         QuantityVariable[
           Subscript["M", "b"], "BendingMomentOfForce"], 
         EntityProperty["PhysicalQuantity", "SIBaseUnit"] -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         EntityProperty["PhysicalQuantity", "SIUnit"] -> 
         Quantity[1, "Meters" "Newtons"], 
         EntityProperty["PhysicalQuantity", "StandardIdentifiers"] -> <|
          "ISO 80000-4:2006" -> "4-13.3", "Wikidata" -> "Q857244"|>, 
         EntityProperty["PhysicalQuantity", "StandardSymbols"] -> <|"ISO" -> {
             Subscript["M", "b"]}|>, 
         EntityProperty["PhysicalQuantity", "Symbols"] -> {
           Subscript["M", "b"]}|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`KeyValueShape[
           TypeSystem`PackageScope`UnknownShape[True], 
           TypeSystem`PackageScope`UnknownShape[False]]], 18, 
         DirectedInfinity[1], {}], "InitialType" -> 
       TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
       "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`KeyValueShape[
           TypeSystem`PackageScope`UnknownShape[True], 
           TypeSystem`PackageScope`UnknownShape[False]]], 18, 
         DirectedInfinity[1], {}], "Type" -> 
       TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
       "Path" -> {}, "DisplayedRowCount" -> 18, "DisplayedColumnCount" -> 1, 
       "DataRowCount" -> 18, "DataColumnCount" -> 1, "SortPaths" -> {}, 
       "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"abbreviations\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"algebraic types\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"positive real", "scalar", "vector"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"positive real", "scalar", "vector"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"alternate names\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"base physical quantity\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"canonical unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"classes\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"dimensions\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"entity classes\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"instances\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                   False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    Entity["PhysicalQuantity", "AppliedMomentOfForce"], 
                    Entity[
                    "PhysicalQuantity", "FactoredBendingMomentOfForce"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    Entity["PhysicalQuantity", "AppliedMomentOfForce"], 
                    Entity[
                    "PhysicalQuantity", "FactoredBendingMomentOfForce"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                   False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"name\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["bending moment of force", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{257.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"named SI unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"physical property type\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"quantity variable\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   TemplateBox[{
                    SubscriptBox["\"M\"", "\"b\""], 
                    "\"BendingMomentOfForce\""}, "QuantityVariable", 
                    DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    
                    RowBox[{
                    "Quantity variable:", " bending moment of force"}], 
                    TooltipStyle -> "TextStyling"]& )], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"SI base unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"SI unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"standard identifiers\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[<|"ISO 80000-4:2006" -> "4-13.3", "Wikidata" -> 
                    "Q857244"|>, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[<|"ISO 80000-4:2006" -> "4-13.3", "Wikidata" -> 
                    "Q857244"|>, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, "Item", 
                  False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"standard symbols\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[<|"ISO" -> {
                    Subscript["M", "b"]}|>, ShowStringCharacters -> False], 
                    Style[
                    Style[<|"ISO" -> {
                    Subscript["M", "b"]}|>, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"symbols\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    Subscript["M", "b"]}, ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    Subscript["M", "b"]}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                  False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{563., {254.13403309800196`, 259.86596690199804`}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{563., {254.13403309800196`, 259.86596690199804`}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        EntityProperty["PhysicalQuantity", "Abbreviations"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "AlgebraicTypes"] -> {
          "positive real", "scalar", "vector"}, 
         EntityProperty["PhysicalQuantity", "AlternateNames"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "BasePhysicalQuantity"] -> 
         Entity["PhysicalQuantity", "BendingMomentOfForce"], 
         EntityProperty["PhysicalQuantity", "CanonicalUnit"] -> 
         Quantity[1, "Meters" "Newtons"], 
         EntityProperty["PhysicalQuantity", "Classes"] -> {
           EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
         EntityProperty[
          "PhysicalQuantity", "Dimensions"] -> {{"LengthUnit", 2}, {
           "MassUnit", 1}, {"TimeUnit", -2}}, 
         EntityProperty["PhysicalQuantity", "EntityClasses"] -> {
           EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
         EntityProperty["PhysicalQuantity", "Instances"] -> 
         Missing["NotApplicable"], EntityProperty["PhysicalQuantity", "Name"] -> 
         "factored bending moment of force", 
         EntityProperty["PhysicalQuantity", "NamedSIUnit"] -> Missing["None"],
          EntityProperty["PhysicalQuantity", "PhysicalPropertyType"] -> 
         Missing["NotAvailable"], 
         EntityProperty["PhysicalQuantity", "QuantityVariable"] -> 
         QuantityVariable[{}, "FactoredBendingMomentOfForce"], 
         EntityProperty["PhysicalQuantity", "SIBaseUnit"] -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         EntityProperty["PhysicalQuantity", "SIUnit"] -> 
         Quantity[1, "Meters" "Newtons"], 
         EntityProperty["PhysicalQuantity", "StandardIdentifiers"] -> <||>, 
         EntityProperty["PhysicalQuantity", "StandardSymbols"] -> <||>, 
         EntityProperty["PhysicalQuantity", "Symbols"] -> {}|>, 
       "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`KeyValueShape[
           TypeSystem`PackageScope`UnknownShape[True], 
           TypeSystem`PackageScope`UnknownShape[False]]], 18, 
         DirectedInfinity[1], {}], "InitialType" -> 
       TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
       "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`ColumnShape[
          TypeSystem`PackageScope`KeyValueShape[
           TypeSystem`PackageScope`UnknownShape[True], 
           TypeSystem`PackageScope`UnknownShape[False]]], 18, 
         DirectedInfinity[1], {}], "Type" -> 
       TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 18], 
       "Path" -> {}, "DisplayedRowCount" -> 18, "DisplayedColumnCount" -> 1, 
       "DataRowCount" -> 18, "DataColumnCount" -> 1, "SortPaths" -> {}, 
       "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"abbreviations\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"algebraic types\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"positive real", "scalar", "vector"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"positive real", "scalar", "vector"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"alternate names\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"base physical quantity\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"bending moment of force\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"canonical unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"classes\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                  False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"dimensions\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"entity classes\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                    4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                  "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"instances\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                   False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Instances"]]}, "Item",
                   False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"name\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["factored bending moment of force", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                  False], "Mouse"], 
                ImageSize -> {{358.40000000000003`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"named SI unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"physical property type\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Style["\[LongDash]", 
                  GrayLevel[0.75]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"quantity variable\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   TemplateBox[{
                    RowBox[{"{", "}"}], "\"FactoredBendingMomentOfForce\""}, 
                    "QuantityVariable", DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    
                    RowBox[{
                    "Quantity variable:", 
                    " factored bending moment of force"}], TooltipStyle -> 
                    "TextStyling"]& )], FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"SI base unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"SI unit\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"standard identifiers\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty[
                    "PhysicalQuantity", "StandardIdentifiers"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"standard symbols\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                  "Item", False], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
              Item[
               Pane[
                Annotation[
                 RawBoxes["\"symbols\""], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key[
                    EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                  False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{507., {259.63403309800196`, 265.36596690199804`}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{507., {259.63403309800196`, 265.36596690199804`}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{
  3.877434046612544*^9, {3.877434086420138*^9, 3.87743409565522*^9}},
 CellLabel->"Out[31]=",ExpressionUUID->"c07a55c9-a47d-4def-9c7b-8c2814b75301"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "[", "\"\<PropertyAssociation\>\"", "]"}], "&"}], ",", 
   RowBox[{"TakeSmallestBy", "[", 
    RowBox[{
     RowBox[{"ConnectedComponents", "[", 
      RowBox[{"UndirectedGraph", "@", 
       RowBox[{"Graph", "[", 
        RowBox[{
         RowBox[{"Rule", "@@@", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{"pqs", ",", 
               RowBox[{"EntityValue", "[", 
                RowBox[{"pqs", ",", 
                 RowBox[{"EntityProperty", "[", 
                  RowBox[{
                  "\"\<PhysicalQuantity\>\"", ",", 
                   "\"\<BasePhysicalQuantity\>\""}], "]"}]}], "]"}]}], "}"}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"VertexLabels", "->", 
          RowBox[{"Placed", "[", 
           RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]}], 
      "]"}], ",", "Length", ",", "1"}], "]"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.877434240637491*^9, 
  3.8774342513218803`*^9}},ExpressionUUID->"19f65cb3-0684-47be-a9a3-\
90407b2eb13b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{
        TemplateBox[{"\"abbreviations\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Abbreviations\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Abbreviations\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"algebraic types\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"AlgebraicTypes\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlgebraicTypes\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], 
       ",", 
       RowBox[{
        TemplateBox[{"\"alternate names\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"AlternateNames\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlternateNames\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"base physical quantity\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"BasePhysicalQuantity\""}],
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"BasePhysicalQuantity\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"PhysicalQuantity\"", ",", 
              "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
          "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
          "\"physical quantity\""},
         "Entity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"canonical unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"CanonicalUnit\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"CanonicalUnit\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          
          RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
            "\"Hz\""}], "watt per hertz", 
          FractionBox["\"Watts\"", "\"Hertz\""]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"classes\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Classes\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Classes\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         TemplateBox[{"\"physical quantity instances\"", 
           RowBox[{"EntityClass", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"PhysicalQuantityInstance\""}], "]"}], 
           "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
          "EntityClass"], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"dimensions\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Dimensions\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Dimensions\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\<\"LengthUnit\"\>", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"MassUnit\"\>", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"TimeUnit\"\>", ",", 
            RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"entity classes\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityClasses\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"EntityClasses\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         TemplateBox[{"\"physical quantity instances\"", 
           RowBox[{"EntityClass", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"PhysicalQuantityInstance\""}], "]"}], 
           "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
          "EntityClass"], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"instances\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Instances\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Instances\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"NotApplicable\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"name\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Name\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Name\\\"]\""},
         "EntityProperty"], "\[Rule]", "\<\"radio luminosity\"\>"}], ",", 
       RowBox[{
        TemplateBox[{"\"named SI unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"NamedSIUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"NamedSIUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"None\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"physical property type\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"PhysicalPropertyType\""}],
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"PhysicalPropertyType\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"quantity variable\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"QuantityVariable\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"QuantityVariable\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{
          RowBox[{"{", "}"}], "\"RadioLuminosity\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
           "TextStyling"]& )]}], ",", 
       RowBox[{
        TemplateBox[{"\"SI base unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"SIBaseUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIBaseUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          RowBox[{"\"kg\"", "\[ThinSpace]", 
            SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
            "\[InvisibleSpace]", 
            SuperscriptBox["\"s\"", "2"]}], 
          "kilogram meter squared per second squared", 
          FractionBox[
           RowBox[{"\"Kilograms\"", " ", 
             SuperscriptBox["\"Meters\"", "2"]}], 
           SuperscriptBox["\"Seconds\"", "2"]]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"SI unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"SIUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          
          RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
            "\"Hz\""}], "watt per hertz", 
          FractionBox["\"Watts\"", "\"Hertz\""]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"standard identifiers\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardIdentifiers\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardIdentifiers\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"standard symbols\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardSymbols\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardSymbols\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"symbols\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Symbols\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Symbols\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{
        TemplateBox[{"\"abbreviations\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Abbreviations\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Abbreviations\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"algebraic types\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"AlgebraicTypes\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlgebraicTypes\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], 
       ",", 
       RowBox[{
        TemplateBox[{"\"alternate names\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"AlternateNames\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlternateNames\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{
        "{", "\<\"spectral radiant power (with respect to frequency)\"\>", 
         "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"base physical quantity\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"BasePhysicalQuantity\""}],
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"BasePhysicalQuantity\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"canonical unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"CanonicalUnit\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"CanonicalUnit\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          
          RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
            "\"Hz\""}], "watt per hertz", 
          FractionBox["\"Watts\"", "\"Hertz\""]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"classes\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Classes\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Classes\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"dimensions\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Dimensions\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Dimensions\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\<\"LengthUnit\"\>", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"MassUnit\"\>", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\<\"TimeUnit\"\>", ",", 
            RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"entity classes\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityClasses\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"EntityClasses\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"instances\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Instances\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Instances\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         TemplateBox[{"\"radio luminosity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\
\"]\"", "\"physical quantity\""},
          "Entity"], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"name\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Name\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Name\\\"]\""},
         "EntityProperty"], 
        "\[Rule]", "\<\"spectral radiant flux (with respect to \
frequency)\"\>"}], ",", 
       RowBox[{
        TemplateBox[{"\"named SI unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"NamedSIUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"NamedSIUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"None\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"physical property type\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"PhysicalPropertyType\""}],
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"PhysicalPropertyType\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"quantity variable\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"QuantityVariable\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"QuantityVariable\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{
          SubscriptBox["\"\[CapitalPhi]\"", 
           RowBox[{"\"e\"", ",", "\"\[Nu]\""}]], 
          "\"SpectralRadiantFluxWithRespectToFrequency\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           
           RowBox[{"Quantity variable:", 
             " spectral radiant flux (with respect to frequency)"}], 
           TooltipStyle -> "TextStyling"]& )]}], ",", 
       RowBox[{
        TemplateBox[{"\"SI base unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"SIBaseUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIBaseUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          RowBox[{"\"kg\"", "\[ThinSpace]", 
            SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
            "\[InvisibleSpace]", 
            SuperscriptBox["\"s\"", "2"]}], 
          "kilogram meter squared per second squared", 
          FractionBox[
           RowBox[{"\"Kilograms\"", " ", 
             SuperscriptBox["\"Meters\"", "2"]}], 
           SuperscriptBox["\"Seconds\"", "2"]]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"SI unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"SIUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          
          RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
            "\"Hz\""}], "watt per hertz", 
          FractionBox["\"Watts\"", "\"Hertz\""]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"standard identifiers\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardIdentifiers\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardIdentifiers\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{"\<\"Wikidata\"\>", "\[Rule]", "\<\"Q101460704\"\>"}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"standard symbols\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardSymbols\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardSymbols\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"symbols\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Symbols\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Symbols\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], "}"}], 
   "[", "\<\"PropertyAssociation\"\>", "]"}], "}"}]], "Output",
 CellChangeTimes->{3.8774342432467003`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"5d9bb4ba-e6a5-4ed2-b725-4f3ccc833484"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", "\"\<PropertyAssociation\>\"", "]"}], "&"}], "@", 
  RowBox[{"First", "@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"TakeSmallestBy", "[", 
     RowBox[{
      RowBox[{"ConnectedComponents", "[", 
       RowBox[{"UndirectedGraph", "@", 
        RowBox[{"Graph", "[", 
         RowBox[{
          RowBox[{"Rule", "@@@", 
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"pqs", ",", 
                RowBox[{"EntityValue", "[", 
                 RowBox[{"pqs", ",", 
                  RowBox[{"EntityProperty", "[", 
                   RowBox[{
                   "\"\<PhysicalQuantity\>\"", ",", 
                    "\"\<BasePhysicalQuantity\>\""}], "]"}]}], "]"}]}], "}"}],
               "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
          RowBox[{"VertexLabels", "->", 
           RowBox[{"Placed", "[", 
            RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]}], 
       "]"}], ",", "Length", ",", "1"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8774342580031323`*^9, 3.8774343494860163`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"e2ebf761-3141-4f4a-a9f7-59aa6ae1e5b4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"abbreviations\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"Abbreviations\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Abbreviations\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"algebraic types\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"AlgebraicTypes\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"AlgebraicTypes\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"alternate names\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"AlternateNames\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"AlternateNames\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"base physical quantity\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"BasePhysicalQuantity\""}], 
        "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"BasePhysicalQuantity\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"PhysicalQuantity\"", ",", 
          "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
      "\"physical quantity\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"canonical unit\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"CanonicalUnit\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"CanonicalUnit\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"classes\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"Classes\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Classes\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"dimensions\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"Dimensions\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Dimensions\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\<\"LengthUnit\"\>", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"MassUnit\"\>", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"TimeUnit\"\>", ",", 
        RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"entity classes\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityClasses\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"EntityClasses\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"instances\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"Instances\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Instances\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotApplicable\"\>", "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"name\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"Name\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Name\\\"]\""},
     "EntityProperty"], "\[Rule]", "\<\"radio luminosity\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"named SI unit\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"NamedSIUnit\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"NamedSIUnit\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"None\"\>", "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"physical property type\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"PhysicalPropertyType\""}], 
        "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"PhysicalPropertyType\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"quantity variable\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"QuantityVariable\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"QuantityVariable\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    TemplateBox[{
      RowBox[{"{", "}"}], "\"RadioLuminosity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
       "TextStyling"]& )]}], ",", 
   RowBox[{
    TemplateBox[{"\"SI base unit\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"SIBaseUnit\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIBaseUnit\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"kg\"", "\[ThinSpace]", 
        SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
        "\[InvisibleSpace]", 
        SuperscriptBox["\"s\"", "2"]}], 
      "kilogram meter squared per second squared", 
      FractionBox[
       RowBox[{"\"Kilograms\"", " ", 
         SuperscriptBox["\"Meters\"", "2"]}], 
       SuperscriptBox["\"Seconds\"", "2"]]},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"SI unit\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"SIUnit\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIUnit\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"standard identifiers\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardIdentifiers\""}], 
        "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardIdentifiers\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"standard symbols\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardSymbols\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"StandardSymbols\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"symbols\"", 
      RowBox[{"EntityProperty", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"Symbols\""}], "]"}], 
      "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Symbols\\\"]\""},
     "EntityProperty"], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8774342595196877`*^9, 3.877434349861768*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"300574cc-f947-4c45-b250-ce83728e2260"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PacletInstall", "[", "\"\<PeterBurbery/DimensionalAnalysis\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8774343547675047`*^9, 3.877434367330015*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"29ad67ba-43ca-4380-8b0f-6b698e3fff31"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PacletObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"PeterBurbery/DimensionalAnalysis\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.20.0\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"PeterBurbery/DimensionalAnalysis\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.20.0\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"C:\\\\Users\\\\burbery1\\\\AppData\\\\Roaming\\\\\
Mathematica\\\\Paclets\\\\Repository\\\\PeterBurbery__DimensionalAnalysis-1.\
20.0\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"A paclet for dimensional analysis\"", Short], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PacletObject[<|
   "Name" -> "PeterBurbery/DimensionalAnalysis", "Description" -> 
    "A paclet for dimensional analysis", "Creator" -> "Peter Cullen Burbery", 
    "License" -> "MIT", "PublisherID" -> "PeterBurbery", "Version" -> 
    "1.20.0", "WolframVersion" -> "13.1+", 
    "Extensions" -> {{
      "Kernel", "Root" -> "Kernel", 
       "Context" -> {{
         "PeterBurbery`DimensionalAnalysis`", "DimensionalAnalysis.wl"}}, 
       "Symbols" -> {
        "PeterBurbery`DimensionalAnalysis`CanonicalDimensionalProduct", 
         "PeterBurbery`DimensionalAnalysis`PhysicalQuantityLookup", 
         "PeterBurbery`DimensionalAnalysis`UnitSystemTransform"}}, {
      "Documentation", "Language" -> "English"}}, "Location" -> 
    "C:\\Users\\burbery1\\AppData\\Roaming\\Mathematica\\Paclets\\Repository\\\
PeterBurbery__DimensionalAnalysis-1.20.0"|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877434369534153*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"b3476e4e-1376-4881-83e6-b6b330285020"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PeterBurbery`DimensionalAnalysis`\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8774343718117075`*^9, 3.8774343819051356`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"06df9c6a-2714-4055-be9f-6ce6b910e7c4"],

Cell[BoxData[
 RowBox[{"CanonicalDimensionalProduct", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8774343836243687`*^9, 
  3.8774343921103816`*^9}},ExpressionUUID->"fd9af901-3562-4d22-9c9d-\
8eb8d50ef230"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TakeSmallestBy", "[", 
  RowBox[{
   RowBox[{"ConnectedComponents", "[", 
    RowBox[{"UndirectedGraph", "@", 
     RowBox[{"Graph", "[", 
      RowBox[{
       RowBox[{"Rule", "@@@", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"pqs", ",", 
             RowBox[{"EntityValue", "[", 
              RowBox[{"pqs", ",", 
               RowBox[{"EntityProperty", "[", 
                RowBox[{
                "\"\<PhysicalQuantity\>\"", ",", 
                 "\"\<BasePhysicalQuantity\>\""}], "]"}]}], "]"}]}], "}"}], 
           "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"VertexLabels", "->", 
        RowBox[{"Placed", "[", 
         RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]}], "]"}], 
   ",", "Length", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"52f41d30-5239-41c5-be20-1b21c5aa1357"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    TemplateBox[{"\"radio luminosity\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
      "\"physical quantity\""},
     "Entity"], ",", 
    TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"PhysicalQuantity\"", ",", 
          "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
      "\"physical quantity\""},
     "Entity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8774344188202214`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"6da6d501-a647-41f6-84ff-596d08b6d922"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CanonicalDimensionalProduct", "[", 
  TemplateBox[{"\"radio luminosity\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}], 
    "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
    "\"physical quantity\""},
   "Entity"], "]"}]], "Input",
 CellChangeTimes->{{3.8774344236124425`*^9, 3.877434427910836*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"7487aeed-ed0d-49b4-9d32-c7fa05585c5f"],

Cell[BoxData[
 TemplateBox[{
   TemplateBox[{"\"T\"", 
     RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox], 
   TemplateBox[{"\"L\"", "2"}, "Superscript", SyntaxForm -> SuperscriptBox], 
   TemplateBox[{"\"M\"", "1"}, "Superscript", SyntaxForm -> SuperscriptBox]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.8774344306173677`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"c3c8ce3f-7fa9-49cf-9bb0-d1c587d0d179"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyMap", "[", 
  RowBox[{"CanonicalName", ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      TemplateBox[{"\"abbreviations\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"Abbreviations\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Abbreviations\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"algebraic types\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"AlgebraicTypes\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlgebraicTypes\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<positive real\>\"", ",", "\"\<scalar\>\""}], "}"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"alternate names\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"AlternateNames\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlternateNames\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"base physical quantity\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"BasePhysicalQuantity\""}], 
          "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"BasePhysicalQuantity\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
        RowBox[{"Entity", "[", 
          
          RowBox[{"\"PhysicalQuantity\"", ",", 
            "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
        "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
        "\"physical quantity\""},
       "Entity"]}], ",", 
     RowBox[{
      TemplateBox[{"\"canonical unit\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"CanonicalUnit\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"CanonicalUnit\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{
         "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
          "\"Hz\""}], "watt per hertz", 
        FractionBox["\"Watts\"", "\"Hertz\""]},
       "Quantity"]}], ",", 
     RowBox[{
      TemplateBox[{"\"classes\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"Classes\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Classes\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"physical quantity instances\"", 
         RowBox[{"EntityClass", "[", 
           
           RowBox[{"\"PhysicalQuantity\"", ",", 
             "\"PhysicalQuantityInstance\""}], "]"}], 
         "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
        "EntityClass"], "}"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"dimensions\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"Dimensions\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Dimensions\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LengthUnit\>\"", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<MassUnit\>\"", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<TimeUnit\>\"", ",", 
          RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"entity classes\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityClasses\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"EntityClasses\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"physical quantity instances\"", 
         RowBox[{"EntityClass", "[", 
           
           RowBox[{"\"PhysicalQuantity\"", ",", 
             "\"PhysicalQuantityInstance\""}], "]"}], 
         "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
        "EntityClass"], "}"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"instances\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"Instances\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Instances\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"Missing", "[", "\"\<NotApplicable\>\"", "]"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"name\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"Name\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Name\\\"]\""},
       "EntityProperty"], "\[Rule]", "\"\<radio luminosity\>\""}], ",", 
     RowBox[{
      TemplateBox[{"\"named SI unit\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"NamedSIUnit\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"NamedSIUnit\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"Missing", "[", "\"\<None\>\"", "]"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"physical property type\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"PhysicalPropertyType\""}], 
          "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"PhysicalPropertyType\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"quantity variable\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"QuantityVariable\""}], 
          "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"QuantityVariable\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      TemplateBox[{
        RowBox[{"{", "}"}], "\"RadioLuminosity\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
         "TextStyling"]& )]}], ",", 
     RowBox[{
      TemplateBox[{"\"SI base unit\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"SIBaseUnit\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIBaseUnit\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{"\"kg\"", "\[ThinSpace]", 
          SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
          "\[InvisibleSpace]", 
          SuperscriptBox["\"s\"", "2"]}], 
        "kilogram meter squared per second squared", 
        FractionBox[
         RowBox[{"\"Kilograms\"", " ", 
           SuperscriptBox["\"Meters\"", "2"]}], 
         SuperscriptBox["\"Seconds\"", "2"]]},
       "Quantity"]}], ",", 
     RowBox[{
      TemplateBox[{"\"SI unit\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"SIUnit\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIUnit\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{
         "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
          "\"Hz\""}], "watt per hertz", 
        FractionBox["\"Watts\"", "\"Hertz\""]},
       "Quantity"]}], ",", 
     RowBox[{
      TemplateBox[{"\"standard identifiers\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardIdentifiers\""}], 
          "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardIdentifiers\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"standard symbols\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardSymbols\""}], "]"}],
         "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"StandardSymbols\\\"]\
\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
     RowBox[{
      TemplateBox[{"\"symbols\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"Symbols\""}], "]"}], 
        "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Symbols\\\"]\""},
       "EntityProperty"], "\[Rule]", 
      RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877434439923085*^9, 3.8774344719449253`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"6607b449-f7e3-4a33-93d7-228383ac61e4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Abbreviations\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"AlgebraicTypes\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"AlternateNames\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"BasePhysicalQuantity\"\>", "\[Rule]", 
    TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"PhysicalQuantity\"", ",", 
          "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
      "\"physical quantity\""},
     "Entity"]}], ",", 
   RowBox[{"\<\"CanonicalUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"Classes\"\>", "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{"\<\"Dimensions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\<\"LengthUnit\"\>", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"MassUnit\"\>", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"TimeUnit\"\>", ",", 
        RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"EntityClasses\"\>", "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{"\<\"Instances\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotApplicable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"radio luminosity\"\>"}], ",", 
   RowBox[{"\<\"NamedSIUnit\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"None\"\>", "]"}]}], ",", 
   RowBox[{"\<\"PhysicalPropertyType\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"QuantityVariable\"\>", "\[Rule]", 
    TemplateBox[{
      RowBox[{"{", "}"}], "\"RadioLuminosity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
       "TextStyling"]& )]}], ",", 
   RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"kg\"", "\[ThinSpace]", 
        SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
        "\[InvisibleSpace]", 
        SuperscriptBox["\"s\"", "2"]}], 
      "kilogram meter squared per second squared", 
      FractionBox[
       RowBox[{"\"Kilograms\"", " ", 
         SuperscriptBox["\"Meters\"", "2"]}], 
       SuperscriptBox["\"Seconds\"", "2"]]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"StandardIdentifiers\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"StandardSymbols\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Symbols\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877434461083269*^9, 3.877434472210807*^9}},
 CellLabel->"Out[49]=",ExpressionUUID->"967e585f-1510-484c-888c-b225fa1a75bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"KeyMap", "[", 
    RowBox[{"CanonicalName", ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{
        TemplateBox[{"\"abbreviations\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Abbreviations\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Abbreviations\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"algebraic types\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"AlgebraicTypes\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlgebraicTypes\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<positive real\>\"", ",", "\"\<scalar\>\""}], "}"}]}], 
       ",", 
       RowBox[{
        TemplateBox[{"\"alternate names\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"AlternateNames\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlternateNames\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"base physical quantity\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"BasePhysicalQuantity\""}],
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"BasePhysicalQuantity\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"PhysicalQuantity\"", ",", 
              "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
          "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
          "\"physical quantity\""},
         "Entity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"canonical unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"CanonicalUnit\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"CanonicalUnit\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          
          RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
            "\"Hz\""}], "watt per hertz", 
          FractionBox["\"Watts\"", "\"Hertz\""]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"classes\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Classes\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Classes\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         TemplateBox[{"\"physical quantity instances\"", 
           RowBox[{"EntityClass", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"PhysicalQuantityInstance\""}], "]"}], 
           "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
          "EntityClass"], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"dimensions\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Dimensions\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Dimensions\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<LengthUnit\>\"", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<MassUnit\>\"", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<TimeUnit\>\"", ",", 
            RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"entity classes\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityClasses\""}], "]"}],
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"EntityClasses\\\"]\
\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", 
         TemplateBox[{"\"physical quantity instances\"", 
           RowBox[{"EntityClass", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"PhysicalQuantityInstance\""}], "]"}], 
           "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
          "EntityClass"], "}"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"instances\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Instances\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Instances\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\"\<NotApplicable\>\"", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"name\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Name\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Name\\\"]\""},
         "EntityProperty"], "\[Rule]", "\"\<radio luminosity\>\""}], ",", 
       RowBox[{
        TemplateBox[{"\"named SI unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"NamedSIUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"NamedSIUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\"\<None\>\"", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"physical property type\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"PhysicalPropertyType\""}],
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"PhysicalPropertyType\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"quantity variable\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"QuantityVariable\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"QuantityVariable\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{
          RowBox[{"{", "}"}], "\"RadioLuminosity\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
           "TextStyling"]& )]}], ",", 
       RowBox[{
        TemplateBox[{"\"SI base unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"SIBaseUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIBaseUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          RowBox[{"\"kg\"", "\[ThinSpace]", 
            SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
            "\[InvisibleSpace]", 
            SuperscriptBox["\"s\"", "2"]}], 
          "kilogram meter squared per second squared", 
          FractionBox[
           RowBox[{"\"Kilograms\"", " ", 
             SuperscriptBox["\"Meters\"", "2"]}], 
           SuperscriptBox["\"Seconds\"", "2"]]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"SI unit\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"SIUnit\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIUnit\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        TemplateBox[{"1", 
          
          RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
            "\"Hz\""}], "watt per hertz", 
          FractionBox["\"Watts\"", "\"Hertz\""]},
         "Quantity"]}], ",", 
       RowBox[{
        TemplateBox[{"\"standard identifiers\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardIdentifiers\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardIdentifiers\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"standard symbols\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardSymbols\""}], 
            "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardSymbols\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
       RowBox[{
        TemplateBox[{"\"symbols\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"Symbols\""}], "]"}], 
          "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Symbols\\\"]\""},
         "EntityProperty"], "\[Rule]", 
        RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], "]"}], ",", 
   RowBox[{"<|", 
    RowBox[{"\"\<CanonicalDimensionalProduct\>\"", "->", 
     RowBox[{"CanonicalDimensionalProduct", "[", 
      TemplateBox[{"\"radio luminosity\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}],
         "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
        "\"physical quantity\""},
       "Entity"], "]"}]}], "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8774345138607645`*^9, 3.8774345429273787`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"2365a481-3e2e-41e8-8341-fe797c9a5deb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Abbreviations\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"AlgebraicTypes\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"AlternateNames\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"BasePhysicalQuantity\"\>", "\[Rule]", 
    TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"PhysicalQuantity\"", ",", 
          "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
      "\"physical quantity\""},
     "Entity"]}], ",", 
   RowBox[{"\<\"CanonicalUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"Classes\"\>", "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{"\<\"Dimensions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\<\"LengthUnit\"\>", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"MassUnit\"\>", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"TimeUnit\"\>", ",", 
        RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"EntityClasses\"\>", "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{"\<\"Instances\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotApplicable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"radio luminosity\"\>"}], ",", 
   RowBox[{"\<\"NamedSIUnit\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"None\"\>", "]"}]}], ",", 
   RowBox[{"\<\"PhysicalPropertyType\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"QuantityVariable\"\>", "\[Rule]", 
    TemplateBox[{
      RowBox[{"{", "}"}], "\"RadioLuminosity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
       "TextStyling"]& )]}], ",", 
   RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"kg\"", "\[ThinSpace]", 
        SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
        "\[InvisibleSpace]", 
        SuperscriptBox["\"s\"", "2"]}], 
      "kilogram meter squared per second squared", 
      FractionBox[
       RowBox[{"\"Kilograms\"", " ", 
         SuperscriptBox["\"Meters\"", "2"]}], 
       SuperscriptBox["\"Seconds\"", "2"]]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"StandardIdentifiers\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"StandardSymbols\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Symbols\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"\<\"CanonicalDimensionalProduct\"\>", "\[Rule]", 
    TemplateBox[{
      TemplateBox[{"\"T\"", 
        RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox], 
      TemplateBox[{"\"L\"", "2"}, "Superscript", SyntaxForm -> 
       SuperscriptBox], 
      TemplateBox[{"\"M\"", "1"}, "Superscript", SyntaxForm -> 
       SuperscriptBox]},
     "RowDefault"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877434530887062*^9, 3.8774345432550735`*^9}},
 CellLabel->"Out[52]=",ExpressionUUID->"686c507b-a4cf-4d7e-b5f0-8a58c09e5350"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"KeyMap", "[", 
     RowBox[{"CanonicalName", ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"abbreviations\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Abbreviations\""}], 
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"Abbreviations\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"algebraic types\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AlgebraicTypes\""}], 
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlgebraicTypes\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<positive real\>\"", ",", "\"\<scalar\>\""}], "}"}]}], 
        ",", 
        RowBox[{
         TemplateBox[{"\"alternate names\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AlternateNames\""}], 
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"AlternateNames\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"base physical quantity\"", 
           RowBox[{"EntityProperty", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"BasePhysicalQuantity\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"BasePhysicalQuantity\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
           "\"physical quantity\""},
          "Entity"]}], ",", 
        RowBox[{
         TemplateBox[{"\"canonical unit\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"CanonicalUnit\""}], 
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"CanonicalUnit\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         TemplateBox[{"1", 
           
           RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
              "\"Hz\""}], "watt per hertz", 
           FractionBox["\"Watts\"", "\"Hertz\""]},
          "Quantity"]}], ",", 
        RowBox[{
         TemplateBox[{"\"classes\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Classes\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Classes\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"{", 
          TemplateBox[{"\"physical quantity instances\"", 
            RowBox[{"EntityClass", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"PhysicalQuantityInstance\""}], "]"}], 
            "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
           "EntityClass"], "}"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"dimensions\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Dimensions\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Dimensions\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<LengthUnit\>\"", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<MassUnit\>\"", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<TimeUnit\>\"", ",", 
             RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"entity classes\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityClasses\""}], 
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"EntityClasses\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"{", 
          TemplateBox[{"\"physical quantity instances\"", 
            RowBox[{"EntityClass", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"PhysicalQuantityInstance\""}], "]"}], 
            "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
           "EntityClass"], "}"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"instances\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Instances\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Instances\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"Missing", "[", "\"\<NotApplicable\>\"", "]"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"name\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Name\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Name\\\"]\""},
          "EntityProperty"], "\[Rule]", "\"\<radio luminosity\>\""}], ",", 
        RowBox[{
         TemplateBox[{"\"named SI unit\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"NamedSIUnit\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"NamedSIUnit\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"Missing", "[", "\"\<None\>\"", "]"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"physical property type\"", 
           RowBox[{"EntityProperty", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"PhysicalPropertyType\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"PhysicalPropertyType\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"quantity variable\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"QuantityVariable\""}], 
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"QuantityVariable\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         TemplateBox[{
           RowBox[{"{", "}"}], "\"RadioLuminosity\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
            "TextStyling"]& )]}], ",", 
        RowBox[{
         TemplateBox[{"\"SI base unit\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"SIBaseUnit\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIBaseUnit\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         TemplateBox[{"1", 
           RowBox[{"\"kg\"", "\[ThinSpace]", 
             SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
             "\[InvisibleSpace]", 
             SuperscriptBox["\"s\"", "2"]}], 
           "kilogram meter squared per second squared", 
           FractionBox[
            RowBox[{"\"Kilograms\"", " ", 
              SuperscriptBox["\"Meters\"", "2"]}], 
            SuperscriptBox["\"Seconds\"", "2"]]},
          "Quantity"]}], ",", 
        RowBox[{
         TemplateBox[{"\"SI unit\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"SIUnit\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIUnit\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         TemplateBox[{"1", 
           RowBox[{
            "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
             "\"Hz\""}], "watt per hertz", 
           FractionBox["\"Watts\"", "\"Hertz\""]},
          "Quantity"]}], ",", 
        RowBox[{
         TemplateBox[{"\"standard identifiers\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardIdentifiers\""}],
              "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardIdentifiers\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"standard symbols\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardSymbols\""}], 
             "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardSymbols\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
        RowBox[{
         TemplateBox[{"\"symbols\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Symbols\""}], "]"}], 
           "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Symbols\\\"]\""},
          "EntityProperty"], "\[Rule]", 
         RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], "]"}], ",", 
    RowBox[{"<|", 
     RowBox[{"\"\<CanonicalDimensionalProduct\>\"", "->", 
      RowBox[{"CanonicalDimensionalProduct", "[", 
       TemplateBox[{"\"radio luminosity\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], 
           "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadioLuminosity\\\"]\"", "\"physical quantity\""},
        "Entity"], "]"}]}], "|>"}]}], "]"}], "//", "InputForm"}]], "Input",
 CellChangeTimes->{{3.8774345138607645`*^9, 3.8774345462399526`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"31b43a3e-5541-42e4-88ee-b8a777e47236"],

Cell["\<\
<|\"Abbreviations\" -> Missing[\"NotAvailable\"], 
 \"AlgebraicTypes\" -> {\"positive real\", \"scalar\"}, 
 \"AlternateNames\" -> Missing[\"NotAvailable\"], \"BasePhysicalQuantity\" -> 
  Entity[\"PhysicalQuantity\", \"SpectralRadiantFluxWithRespectToFrequency\"], 
 \"CanonicalUnit\" -> Quantity[1, \"Watts\"/\"Hertz\"], 
 \"Classes\" -> {EntityClass[\"PhysicalQuantity\", \"PhysicalQuantityInstance\
\"]}, 
 \"Dimensions\" -> {{\"LengthUnit\", 2}, {\"MassUnit\", 1}, {\"TimeUnit\", \
-2}}, 
 \"EntityClasses\" -> {EntityClass[\"PhysicalQuantity\", \
\"PhysicalQuantityInstance\"]}, 
 \"Instances\" -> Missing[\"NotApplicable\"], \"Name\" -> \"radio \
luminosity\", 
 \"NamedSIUnit\" -> Missing[\"None\"], \"PhysicalPropertyType\" -> 
  Missing[\"NotAvailable\"], \"QuantityVariable\" -> 
  QuantityVariable[{}, \"RadioLuminosity\"], 
 \"SIBaseUnit\" -> Quantity[1, (\"Kilograms\"*\"Meters\"^2)/\"Seconds\"^2], 
 \"SIUnit\" -> Quantity[1, \"Watts\"/\"Hertz\"], \"StandardIdentifiers\" -> \
<||>, 
 \"StandardSymbols\" -> <||>, \"Symbols\" -> {}, \
\"CanonicalDimensionalProduct\" -> 
  Row[{Superscript[\"T\", -2], Superscript[\"L\", 2], Superscript[\"M\", \
1]}]|>\
\>", "Output",
 CellChangeTimes->{3.8774345465520415`*^9},
 CellLabel->
  "Out[53]//InputForm=",ExpressionUUID->"9d257f9f-de58-4a83-b311-\
dfedd6e009e9"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Functions", "Section",
 CellChangeTimes->{{3.8774350021859303`*^9, 
  3.87743500379493*^9}},ExpressionUUID->"7af3fce9-ef30-4f2a-a6d4-\
7c6953893052"],

Cell[BoxData[{
 RowBox[{"PhysicalQuantityDataWithDimensionalProductAdded", "//", 
  "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "PhysicalQuantityDataWithDimensionalProductAdded", "[", "q_Entity", "]"}], ":=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"KeyMap", "[", 
     RowBox[{"CanonicalName", ",", 
      RowBox[{"q", "[", "\"\<PropertyAssociation\>\"", "]"}]}], "]"}], ",", 
    RowBox[{"<|", 
     RowBox[{"\"\<CanonicalDimensionalProduct\>\"", "->", 
      RowBox[{"CanonicalDimensionalProduct", "[", "q", "]"}]}], "|>"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8774345590431175`*^9, 3.877434610632107*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"8638ae38-85e9-4132-b4ff-72433fa34695"],

Cell[BoxData[{
 RowBox[{"SimplifiedPhysicalQuantityDataWithDimensionalProductAdded", "//", 
  "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "SimplifiedPhysicalQuantityDataWithDimensionalProductAdded", "[", 
   "q_Entity", "]"}], ":=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"AssociationThread", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<Name\>\"", ",", "\"\<SIUnit\>\"", ",", "\"\<SIBaseUnit\>\""}], 
       "}"}], "->", 
      RowBox[{"Lookup", "[", 
       RowBox[{
        RowBox[{"KeyMap", "[", 
         RowBox[{"CanonicalName", ",", 
          RowBox[{"q", "[", "\"\<PropertyAssociation\>\"", "]"}]}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Name\>\"", ",", "\"\<SIUnit\>\"", ",", "\"\<SIBaseUnit\>\""}], 
         "}"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"<|", 
     RowBox[{"\"\<CanonicalDimensionalProduct\>\"", "->", 
      RowBox[{"CanonicalDimensionalProduct", "[", "q", "]"}]}], "|>"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8774347832886496`*^9, 3.877434818971941*^9}, {
  3.8774349558043795`*^9, 3.877434959084861*^9}, {3.8774350086800857`*^9, 
  3.877435011492025*^9}, {3.8774351102751403`*^9, 3.877435112040099*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"9a622c24-81f6-4450-82a2-d243a2e2019d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PhysicalQuantityDataWithDimensionalProductAdded", "[", 
  TemplateBox[{"\"radio luminosity\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}], 
    "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
    "\"physical quantity\""},
   "Entity"], "]"}]], "Input",
 CellChangeTimes->{{3.8774346149439564`*^9, 3.8774346258577023`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"9f54ba78-ce2e-47c0-9f65-34f066b86a94"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Abbreviations\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"AlgebraicTypes\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"AlternateNames\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"BasePhysicalQuantity\"\>", "\[Rule]", 
    TemplateBox[{"\"spectral radiant flux (with respect to frequency)\"", 
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"PhysicalQuantity\"", ",", 
          "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
      "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
      "\"physical quantity\""},
     "Entity"]}], ",", 
   RowBox[{"\<\"CanonicalUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"Classes\"\>", "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{"\<\"Dimensions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\<\"LengthUnit\"\>", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"MassUnit\"\>", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"TimeUnit\"\>", ",", 
        RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"EntityClasses\"\>", "\[Rule]", 
    RowBox[{"{", 
     TemplateBox[{"\"physical quantity instances\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{
          "\"PhysicalQuantity\"", ",", "\"PhysicalQuantityInstance\""}], 
         "]"}], "\"EntityClass[\\\"PhysicalQuantity\\\", \
\\\"PhysicalQuantityInstance\\\"]\"", "\"physical quantities\""},
      "EntityClass"], "}"}]}], ",", 
   RowBox[{"\<\"Instances\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotApplicable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"radio luminosity\"\>"}], ",", 
   RowBox[{"\<\"NamedSIUnit\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"None\"\>", "]"}]}], ",", 
   RowBox[{"\<\"PhysicalPropertyType\"\>", "\[Rule]", 
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}]}], ",", 
   RowBox[{"\<\"QuantityVariable\"\>", "\[Rule]", 
    TemplateBox[{
      RowBox[{"{", "}"}], "\"RadioLuminosity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " radio luminosity"}], TooltipStyle -> 
       "TextStyling"]& )]}], ",", 
   RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"kg\"", "\[ThinSpace]", 
        SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
        "\[InvisibleSpace]", 
        SuperscriptBox["\"s\"", "2"]}], 
      "kilogram meter squared per second squared", 
      FractionBox[
       RowBox[{"\"Kilograms\"", " ", 
         SuperscriptBox["\"Meters\"", "2"]}], 
       SuperscriptBox["\"Seconds\"", "2"]]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"StandardIdentifiers\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"StandardSymbols\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Symbols\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"\<\"CanonicalDimensionalProduct\"\>", "\[Rule]", 
    TemplateBox[{
      TemplateBox[{"\"T\"", 
        RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox], 
      TemplateBox[{"\"L\"", "2"}, "Superscript", SyntaxForm -> 
       SuperscriptBox], 
      TemplateBox[{"\"M\"", "1"}, "Superscript", SyntaxForm -> 
       SuperscriptBox]},
     "RowDefault"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877434626211193*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"c9860072-1035-436b-a947-c6fb0f05fff7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", 
  RowBox[{"PhysicalQuantityDataWithDimensionalProductAdded", "[", 
   TemplateBox[{"\"radio luminosity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadioLuminosity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8774346280365243`*^9, 3.8774346293717594`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"fa979199-ec0b-4d2b-ab76-8c7abdc83da6"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "Abbreviations" -> Missing["NotAvailable"], 
       "AlgebraicTypes" -> {"positive real", "scalar"}, "AlternateNames" -> 
       Missing["NotAvailable"], "BasePhysicalQuantity" -> 
       Entity["PhysicalQuantity", 
         "SpectralRadiantFluxWithRespectToFrequency"], "CanonicalUnit" -> 
       Quantity[1, "Hertz"^(-1) "Watts"], "Classes" -> {
         EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
       "Dimensions" -> {{"LengthUnit", 2}, {"MassUnit", 1}, {"TimeUnit", -2}},
        "EntityClasses" -> {
         EntityClass["PhysicalQuantity", "PhysicalQuantityInstance"]}, 
       "Instances" -> Missing["NotApplicable"], "Name" -> "radio luminosity", 
       "NamedSIUnit" -> Missing["None"], "PhysicalPropertyType" -> 
       Missing["NotAvailable"], "QuantityVariable" -> 
       QuantityVariable[{}, "RadioLuminosity"], "SIBaseUnit" -> 
       Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], "SIUnit" -> 
       Quantity[1, "Hertz"^(-1) "Watts"], "StandardIdentifiers" -> <||>, 
       "StandardSymbols" -> <||>, "Symbols" -> {}, 
       "CanonicalDimensionalProduct" -> Row[{
          Superscript["T", -2], 
          Superscript["L", 2], 
          Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[302.40000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 19, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 19], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[302.40000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 19, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 19], "Path" -> {}, 
     "DisplayedRowCount" -> 19, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     19, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Abbreviations", 
                  Style[
                  "Abbreviations", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Abbreviations"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Abbreviations"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Abbreviations"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["AlgebraicTypes", 
                  Style[
                  "AlgebraicTypes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["AlgebraicTypes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlgebraicTypes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["AlgebraicTypes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlgebraicTypes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["AlternateNames", 
                  Style[
                  "AlternateNames", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["AlternateNames"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlternateNames"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlternateNames"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BasePhysicalQuantity", 
                  Style[
                  "BasePhysicalQuantity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BasePhysicalQuantity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BasePhysicalQuantity"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
               "\"spectral radiant flux (with respect to frequency)\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BasePhysicalQuantity"]}, "Item", False], "Mouse"], 
              ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CanonicalUnit", 
                  Style[
                  "CanonicalUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  
                  RowBox[{
                   "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                     "\"Hz\""}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Classes", 
                  Style[
                  "Classes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Classes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Classes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Classes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Classes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{"LengthUnit", 2}, {"MassUnit", 1}, {
                    "TimeUnit", -2}}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["EntityClasses", 
                  Style[
                  "EntityClasses", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["EntityClasses"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["EntityClasses"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    EntityClass[
                    "PhysicalQuantity", "PhysicalQuantityInstance"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["EntityClasses"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["EntityClasses"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Instances", 
                  Style[
                  "Instances", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Instances"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Instances"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Instances"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Name"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["radio luminosity", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NamedSIUnit", 
                  Style[
                  "NamedSIUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NamedSIUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NamedSIUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NamedSIUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PhysicalPropertyType", 
                  Style[
                  "PhysicalPropertyType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["PhysicalPropertyType"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PhysicalPropertyType"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PhysicalPropertyType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["QuantityVariable", 
                  Style[
                  "QuantityVariable", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["QuantityVariable"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantityVariable"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"{", "}"}], "\"RadioLuminosity\""}, 
                  "QuantityVariable", DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    RowBox[{"Quantity variable:", " radio luminosity"}], 
                    TooltipStyle -> "TextStyling"]& )], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantityVariable"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SIBaseUnit", 
                  Style[
                  "SIBaseUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SIUnit", 
                  Style[
                  "SIUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  
                  RowBox[{
                   "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                     "\"Hz\""}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardIdentifiers", 
                  Style[
                  "StandardIdentifiers", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["StandardIdentifiers"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["StandardIdentifiers"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardSymbols", 
                  Style[
                  "StandardSymbols", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["StandardSymbols"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["StandardSymbols"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Symbols", 
                  Style[
                  "Symbols", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Symbols"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Symbols"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CanonicalDimensionalProduct", 
                  Style[
                  "CanonicalDimensionalProduct", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Row[{
                 Superscript["T", -2], 
                 Superscript["L", 2], 
                 Superscript["M", 1]}], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalDimensionalProduct"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{598., {273.13403309800196`, 278.86596690199804`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{598., {273.13403309800196`, 278.86596690199804`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8774346297463465`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"4f3ac3e1-f9c2-4a01-8e21-eb0004558cb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", 
  RowBox[{"PhysicalQuantityDataWithDimensionalProductAdded", "[", 
   RowBox[{
   "PhysicalQuantity", "[", "\"\<QEDEulerHeisenbergLagrangianFactor\>\"", 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8774346419195423`*^9, 3.8774346759495583`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"7e5b3a81-202e-44b2-acb7-fb4c8dd780b5"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "Abbreviations" -> Missing["NotAvailable"], 
       "AlgebraicTypes" -> {"scalar"}, "AlternateNames" -> 
       Missing["NotAvailable"], "BasePhysicalQuantity" -> 
       Missing["NotAvailable"], "CanonicalUnit" -> 
       Quantity[1, "Amperes"^4 "Kilograms"^(-4) "Meters"^(-7) "Seconds"^11], 
       "Classes" -> {}, 
       "Dimensions" -> {{"ElectricCurrentUnit", 4}, {"LengthUnit", -7}, {
         "MassUnit", -4}, {"TimeUnit", 11}}, "EntityClasses" -> {}, 
       "Instances" -> Missing["NotApplicable"], "Name" -> 
       "QED Euler\[Hyphen]Heisenberg Lagrangian factor", "NamedSIUnit" -> 
       Missing["None"], "PhysicalPropertyType" -> Missing["NotAvailable"], 
       "QuantityVariable" -> 
       QuantityVariable["QEDEulerHeisenbergLagrangianFactor"], "SIBaseUnit" -> 
       Quantity[1, "Amperes"^4 "Kilograms"^(-4) "Meters"^(-7) "Seconds"^11], 
       "SIUnit" -> 
       Quantity[1, "Amperes"^4 "Kilograms"^(-4) "Meters"^(-7) "Seconds"^11], 
       "StandardIdentifiers" -> <||>, "StandardSymbols" -> <||>, 
       "Symbols" -> {}, "CanonicalDimensionalProduct" -> Row[{
          Superscript["T", 11], 
          Superscript["L", -7], 
          Superscript["M", -4], 
          Superscript["I", 4]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[302.40000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 19, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 19], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[302.40000000000003`], 
         TypeSystem`PackageScope`UnknownShape[False]]], 19, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], TypeSystem`AnyType, 19], "Path" -> {}, 
     "DisplayedRowCount" -> 19, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     19, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Abbreviations", 
                  Style[
                  "Abbreviations", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Abbreviations"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Abbreviations"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Abbreviations"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["AlgebraicTypes", 
                  Style[
                  "AlgebraicTypes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["AlgebraicTypes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlgebraicTypes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"scalar"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"scalar"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["AlgebraicTypes"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlgebraicTypes"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["AlternateNames", 
                  Style[
                  "AlternateNames", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["AlternateNames"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlternateNames"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["AlternateNames"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BasePhysicalQuantity", 
                  Style[
                  "BasePhysicalQuantity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BasePhysicalQuantity"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BasePhysicalQuantity"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BasePhysicalQuantity"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CanonicalUnit", 
                  Style[
                  "CanonicalUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{
                    SuperscriptBox["\"s\"", "11"], "\[InvisibleSpace]", 
                    SuperscriptBox["\"A\"", "4"], "\[NegativeMediumSpace]", 
                    "\"/(\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"kg\"", "4"], "\[InvisibleSpace]", 
                    SuperscriptBox["\"m\"", "7"], "\[InvisibleSpace]", 
                    "\")\""}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Classes", 
                  Style[
                  "Classes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Classes"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Classes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dimensions", 
                  Style[
                  "Dimensions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{"ElectricCurrentUnit", 4}, {"LengthUnit", -7}, {
                    "MassUnit", -4}, {"TimeUnit", 11}}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{{"ElectricCurrentUnit", 4}, {"LengthUnit", -7}, {
                    "MassUnit", -4}, {"TimeUnit", 11}}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Dimensions"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["EntityClasses", 
                  Style[
                  "EntityClasses", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["EntityClasses"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["EntityClasses"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Instances", 
                  Style[
                  "Instances", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Instances"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Instances"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Instances"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Name"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["QED Euler\[Hyphen]Heisenberg Lagrangian factor", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{425.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NamedSIUnit", 
                  Style[
                  "NamedSIUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NamedSIUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NamedSIUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NamedSIUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["PhysicalPropertyType", 
                  Style[
                  "PhysicalPropertyType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["PhysicalPropertyType"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PhysicalPropertyType"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["PhysicalPropertyType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["QuantityVariable", 
                  Style[
                  "QuantityVariable", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["QuantityVariable"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantityVariable"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 
                 TemplateBox[{"\"QEDEulerHeisenbergLagrangianFactor\""}, 
                  "QuantityVariable", DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    
                    RowBox[{
                    "Quantity variable:", 
                    " QED Euler\[Hyphen]Heisenberg Lagrangian factor"}], 
                    TooltipStyle -> "TextStyling"]& )], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["QuantityVariable"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SIBaseUnit", 
                  Style[
                  "SIBaseUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{
                    SuperscriptBox["\"s\"", "11"], "\[InvisibleSpace]", 
                    SuperscriptBox["\"A\"", "4"], "\[NegativeMediumSpace]", 
                    "\"/(\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"kg\"", "4"], "\[InvisibleSpace]", 
                    SuperscriptBox["\"m\"", "7"], "\[InvisibleSpace]", 
                    "\")\""}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SIUnit", 
                  Style[
                  "SIUnit", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{
                    SuperscriptBox["\"s\"", "11"], "\[InvisibleSpace]", 
                    SuperscriptBox["\"A\"", "4"], "\[NegativeMediumSpace]", 
                    "\"/(\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"kg\"", "4"], "\[InvisibleSpace]", 
                    SuperscriptBox["\"m\"", "7"], "\[InvisibleSpace]", 
                    "\")\""}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SIUnit"]}, "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardIdentifiers", 
                  Style[
                  "StandardIdentifiers", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["StandardIdentifiers"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["StandardIdentifiers"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["StandardSymbols", 
                  Style[
                  "StandardSymbols", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["StandardSymbols"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["StandardSymbols"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Symbols", 
                  Style[
                  "Symbols", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Symbols"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Symbols"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CanonicalDimensionalProduct", 
                  Style[
                  "CanonicalDimensionalProduct", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Row[{
                 Superscript["T", 11], 
                 Superscript["L", -7], 
                 Superscript["M", -4], 
                 Superscript["I", 4]}], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["CanonicalDimensionalProduct"]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{748., {262.13403309800196`, 267.86596690199804`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{748., {262.13403309800196`, 267.86596690199804`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.877434664474393*^9, 3.8774346770886483`*^9}},
 CellLabel->"Out[60]=",ExpressionUUID->"82899f3d-8f8c-47e1-80d3-141889f1367e"]
}, Open  ]],

Cell["This is a graph.", "Text",
 CellChangeTimes->{{3.877434840595463*^9, 
  3.87743484311141*^9}},ExpressionUUID->"7f6e5001-cffe-4a91-9143-\
3ce321ca546f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
       Entity["PhysicalQuantity", "AcousticEnergy"], 
       Entity["PhysicalQuantity", "Energy"], 
       Entity["PhysicalQuantity", "AtomicBindingEnergy"], 
       Entity["PhysicalQuantity", "AtomicEnergy"], 
       Entity["PhysicalQuantity", "BindingEnergy"], 
       Entity["PhysicalQuantity", "BiogasEnergy"], 
       Entity["PhysicalQuantity", "BondEnergy"], 
       Entity["PhysicalQuantity", "ElasticEnergy"], 
       Entity["PhysicalQuantity", "ElectromagneticEnergy"], 
       Entity["PhysicalQuantity", "EquivalentEnergy"], 
       Entity["PhysicalQuantity", "ExcitationEnergy"], 
       Entity["PhysicalQuantity", "FermiEnergy"], 
       Entity["PhysicalQuantity", "FundamentalTemperature"], 
       Entity["PhysicalQuantity", "GeothermalEnergy"], 
       Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
       Entity["PhysicalQuantity", "MagneticEnergy"], 
       Entity["PhysicalQuantity", "MassEnergyEquivalent"], 
       Entity["PhysicalQuantity", "Massergy"], 
       Entity["PhysicalQuantity", "NuclearBindingEnergy"], 
       Entity["PhysicalQuantity", "PonderomotiveEnergy"], 
       Entity["PhysicalQuantity", "ReactionEnergy"], 
       Entity["PhysicalQuantity", "ResonanceEnergy"], 
       Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
       Entity["PhysicalQuantity", "SeparationEnergy"], 
       Entity["PhysicalQuantity", "SolarEnergy"], 
       Entity["PhysicalQuantity", "SurfaceEnergy"], 
       Entity["PhysicalQuantity", "TidalEnergy"], 
       Entity["PhysicalQuantity", "TotalEnergy"], 
       Entity["PhysicalQuantity", "VibrationalEnergy"], 
       Entity["PhysicalQuantity", "WaterEnergy"], 
       Entity["PhysicalQuantity", "WaveEnergy"], 
       Entity["PhysicalQuantity", "WindEnergy"], 
       Entity["PhysicalQuantity", "ZeroPointEnergy"], 
       Entity["PhysicalQuantity", "HeatGain"], 
       Entity["PhysicalQuantity", "Heat"], 
       Entity["PhysicalQuantity", "HeatLoss"], 
       Entity["PhysicalQuantity", "AdiabaticWork"], 
       Entity["PhysicalQuantity", "Work"], 
       Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "DisintegrationEnergy"], 
       Entity["PhysicalQuantity", "AppliedMomentOfForce"], 
       Entity["PhysicalQuantity", "BendingMomentOfForce"], 
       Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "ChemicalEnergy"], 
       Entity["PhysicalQuantity", "PotentialEnergy"], 
       Entity["PhysicalQuantity", "CoggingTorque"], 
       Entity["PhysicalQuantity", "Torque"], 
       Entity["PhysicalQuantity", "ElasticPotentialEnergy"], 
       Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
       Entity["PhysicalQuantity", "Ergotropy"], 
       Entity["PhysicalQuantity", "Exergy"], 
       Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
       Entity["PhysicalQuantity", "FirstIonizationEnergy"], 
       Entity["PhysicalQuantity", "IonizationEnergy"], 
       Entity["PhysicalQuantity", "FrictionTorque"], 
       Entity["PhysicalQuantity", "GibbsEnergy"], 
       Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
       Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
       Entity["PhysicalQuantity", "HelmholtzEnergy"], 
       Entity["PhysicalQuantity", "HysteresisTorque"], 
       Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
       Entity["PhysicalQuantity", "LatentHeat"], 
       Entity["PhysicalQuantity", "LatentHeatOfFusion"], 
       Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
       Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
       Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
       Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
       Entity["PhysicalQuantity", "MechanicalWork"], 
       Entity["PhysicalQuantity", "NuclearEnergy"], 
       Entity["PhysicalQuantity", "RadioLuminosity"], 
       Entity[
       "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
       Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
       Entity["PhysicalQuantity", "KineticEnergy"], 
       Entity["PhysicalQuantity", "RotationalEnergy"], 
       Entity["PhysicalQuantity", "SecondIonizationEnergy"], 
       Entity["PhysicalQuantity", "ThermodynamicWork"], 
       Entity["PhysicalQuantity", "ThirdIonizationEnergy"], 
       Entity["PhysicalQuantity", "VacuumEnergy"], 
       Entity["PhysicalQuantity", "VirtualWork"], 
       Entity["PhysicalQuantity", "ViscousDragTorque"]}, {{{1, 2}, {3, 2}, {4,
        2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 
       2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20,
        2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}, {
       28, 2}, {29, 2}, {30, 2}, {31, 2}, {32, 2}, {33, 2}, {34, 35}, {36, 
       35}, {37, 38}, {39, 40}, {41, 42}, {43, 40}, {44, 45}, {46, 47}, {48, 
       45}, {49, 45}, {50, 38}, {51, 38}, {52, 42}, {53, 54}, {55, 47}, {56, 
       57}, {58, 45}, {59, 57}, {60, 47}, {61, 62}, {63, 62}, {64, 62}, {65, 
       62}, {66, 62}, {67, 40}, {68, 38}, {69, 45}, {70, 71}, {72, 73}, {74, 
       73}, {75, 54}, {76, 38}, {77, 54}, {78, 2}, {79, 38}, {80, 47}}, 
       Null}, {VertexLabels -> {
         Placed["Name", Tooltip]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.01849600757758165], 
        ArrowBox[CompressedData["
1:eJx1lGlQk1cUhrMgO2lkRwohwAgC0o7QSizDvdaAA2VJRelIRSglIBQrIpmg
sqggWrRlaVGnoIWQwECFOkoRB5h8IFFAylIL2KDQpiBb1GwQiATqTP3yg1t+
fD/OPPO+9573nO/S44/tY5MJBALzzUd6+4V1kKtUGAm6bk/2pcU/F3J5XYuF
OWpQNzv+JytJLXxxSfGHdEAOCvSvfcL01MPWc1ZRZbjWmgAr55pYghIywkt3
Hy8criXDxqwQZ/v2V4j/9Y9kd1w/fg0wRYpJzf/4y890yBi5CvCXDduBLRhB
9LSyyyY7Ty0CEdduKKwc1Ue5RRuyZ4iwnxoGZqqXEf34z5H8IrISTJwLOat0
ICJ6prY4WvIpAYa+f3w5vHIO0XefvF9NSNCAJB9nSh4P1ZdsedTw3GMKzBRr
6++OziJ6zxi/0Zh8AizjTcUtblGh/CAvih0wB5yDrk93zpEQf9nafUnvl2ow
+OTG07zScVQfwkiM3asA9WKvTvWv6HzNmlm3uEbzIEs7XUK+p0Z4v5PkVK0x
AXbvyvmeH4n6exgslvZ26MHVWpkqx1yDcAMDN+8xMAdS+RUjnHdWEe49cUSb
ICTDvrbiBXXhGsK/6M3uCvxcAkxPhk4ecEbzbZQ8LY7Z/xosBft7irTofmya
r+46T9AA1aOeraZWUoQnum2Kp7iS4GB3T8yKKZrv270DDctObiduLSF6r7uv
2ogXx8Bk5c75KqIMzf9063RLhR6U0q0KFprQ+cYP5uvTlC9B3rYnGsoKqp8c
+a6skUGATUy990wvovnM8a1+73WcBYYi0ytLO/5GuAo6GORSn4EPvq1viLqJ
nq8YmIhQCmwgRiP4kvgULMgyN3FPjb2utu4pD1YKaBtyP1qG2nbXPKhuCG3t
DjXGVMDQsKx+AcizzR+v/UjF0ujNVcFUI5jRdmg5TW6NddEfpxuSqNDMnt0Z
JrXF8PNvBx1ZvfeNjc4fr3nl+gGZHAvozp7a1jKN6rlF5GMZtpsh/j7sZunZ
iTRUCHOXB+k1C8K4WDF7LNsRZtoMS6/SRoVlEX2ig2/8DzMkAXeM5UKXsAix
y1fGcLuJbKl/rwzRT/dR6WpzM7ijX9nq5UHE1nN6itJnolIL2trTbWuZaP+H
k0fWzIdJkGEpkZZfoyIcz3ej/vH9w/NzK2QMTBcrAd6/MOmf5bNcR/hhQuyI
U/IK0h+e78uZqxHBqfo6f7xe9PK5GTRkCaOH+pj+7nKkf/x+G+m9Yy4omaO2
uvzXn4/Ph9/cepqyz1CXH382MI7hTsXw/APsLuwPrjJDOJ7/izRiyMNIC4Tj
9z+QxdHkbqYgfIWctfqZvwXMSq3beoiD6uNXYtPOGFHhJbELeCB9F9kvPP+R
4a/9Am+g88P9WaI9nKij6H7k97WHKgUO0D6+Iu2KwB77r7bT1fh8gj19Lz87
aqHLF6/x/Dfigy3knMhfCLr/Y/1+hAc+cE25rQUKClecSbVE7s9TpYoeNioB
3v96fVPtD0RMJgb5hTakyJ+0yPuRzvnNZy15Hnh2+hWYWKD+dYwqH5N+W5h6
4py5aQi6n/8CQM54xQ==
         "], 0.05591872795906591]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3442165927191696, -0.6994777701997106}, 
           0.05591872795906591],
          TemplateBox[{"\"acoustic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcousticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AcousticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.468394245088488, -1.4627235899521145}, 
           0.05591872795906591],
          TemplateBox[{"\"energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Energy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Energy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Energy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1132629698047325, -2.5211263566751}, 0.05591872795906591],
          TemplateBox[{"\"atomic binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AtomicBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0112253325222937, -2.446116095086225}, 
           0.05591872795906591],
          TemplateBox[{"\"atomic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.4569502654850988, -0.991834227537671}, 
           0.05591872795906591],
          TemplateBox[{"\"binding energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BindingEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7036482838482023, -2.521312798692037}, 
           0.05591872795906591],
          TemplateBox[{"\"biogas energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BiogasEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BiogasEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BiogasEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.156061115696556, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"bond energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BondEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BondEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BondEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4048376513613403, -2.5758320175072833}, 
           0.05591872795906591],
          TemplateBox[{"\"elastic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.2384739544403756, -1.6025164101311478}, 
           0.05591872795906591],
          TemplateBox[{"\"electromagnetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectromagneticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectromagneticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectromagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1883694094674335, -2.139624605261232}, 
           0.05591872795906591],
          TemplateBox[{"\"equivalent energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"EquivalentEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"EquivalentEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "EquivalentEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.039982516813014, -0.8320689079205379}, 
           0.05591872795906591],
          TemplateBox[{"\"excitation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ExcitationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExcitationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ExcitationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.6494146725668646, -2.204351530474401}, 
           0.05591872795906591],
          TemplateBox[{"\"Fermi energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FermiEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"FermiEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FermiEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.661486949386772, -0.8075826968820623}, 
           0.05591872795906591],
          TemplateBox[{"\"fundamental temperature\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FundamentalTemperature\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FundamentalTemperature\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FundamentalTemperature"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0646321119380864, -1.256582621101335}, 
           0.05591872795906591],
          TemplateBox[{"\"geothermal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GeothermalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"GeothermalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GeothermalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8201166812967008, -2.364629563796158}, 
           0.05591872795906591],
          TemplateBox[{"\"gravitational binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4618634088546933, -0.47769257111521046}, 
           0.05591872795906591],
          TemplateBox[{"\"magnetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1424249642483442, -0.7097128670200921}, 
           0.05591872795906591],
          TemplateBox[{"\"mass energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MassEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MassEnergyEquivalent\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MassEnergyEquivalent"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8449057048471232, -1.4826694201909438}, 
           0.05591872795906591],
          TemplateBox[{"\"massergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Massergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Massergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Massergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0052022552737077, -0.4738551559793618}, 
           0.05591872795906591],
          TemplateBox[{"\"nuclear binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"NuclearBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"NuclearBindingEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.594624660618952, -1.629515606686709}, 
           0.05591872795906591],
          TemplateBox[{"\"ponderomotive energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"PonderomotiveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PonderomotiveEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PonderomotiveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8202949429907854, -1.8787744887615885}, 
           0.05591872795906591],
          TemplateBox[{"\"reaction energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ReactionEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ReactionEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ReactionEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.4684543416623432, -1.9714278786084831}, 
           0.05591872795906591],
          TemplateBox[{"\"resonance energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ResonanceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ResonanceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ResonanceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.5736416661951119, -2.1417653880918177}, 
           0.05591872795906591],
          TemplateBox[{"\"seismic energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SeismicEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeismicEnergyEquivalent\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7080970438675354, -0.3592389032575336}, 
           0.05591872795906591],
          TemplateBox[{"\"separation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SeparationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeparationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeparationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.625127571226302, -0.8775692708571783}, 
           0.05591872795906591],
          TemplateBox[{"\"solar energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SolarEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"SolarEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SolarEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.267605558187756, -2.256340725632164}, 
           0.05591872795906591],
          TemplateBox[{"\"surface energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SurfaceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SurfaceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SurfaceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -1.543078568312562}, 
           0.05591872795906591],
          TemplateBox[{"\"tidal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TidalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TidalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TidalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.4301761956293031, -1.0003985584426625}, 
           0.05591872795906591],
          TemplateBox[{"\"total energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TotalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TotalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TotalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.5765245536889743, -1.294179462203938}, 
           0.05591872795906591],
          TemplateBox[{"\"vibrational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VibrationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VibrationalEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VibrationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.9671778800316242, -1.0615377234085777}, 
           0.05591872795906591],
          TemplateBox[{"\"water energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaterEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0281650242057925, -1.9707147442425539}, 
           0.05591872795906591],
          TemplateBox[{"\"wave energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7850088217939206, -0.5374720507299182}, 
           0.05591872795906591],
          TemplateBox[{"\"wind energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WindEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WindEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.45413184828522835, -1.2920748504482849}, 
           0.05591872795906591],
          TemplateBox[{"\"zero\[Hyphen]point energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ZeroPointEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ZeroPointEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ZeroPointEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"heat gain\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatGain\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatGain\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatGain"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"amount of heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Heat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Heat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Heat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"heat loss\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatLoss\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatLoss\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatLoss"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8508419831350471, -3.2874922402167654}, 
           0.05591872795906591],
          TemplateBox[{"\"adiabatic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AdiabaticWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.3541460336455176, -4.15136651802412}, 
           0.05591872795906591],
          TemplateBox[{"\"work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Work\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Work\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Work"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.13295294129437, -5.735782524380841}, 0.05591872795906591],
          TemplateBox[{"\"alpha disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AlphaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AlphaDisintegrationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.001985353599995, -6.230765378399849}, 
           0.05591872795906591],
          TemplateBox[{"\"disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"DisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"DisintegrationEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "DisintegrationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"applied moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AppliedMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AppliedMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AppliedMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BendingMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BendingMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.864716500428502, -5.726288466097039}, 
           0.05591872795906591],
          TemplateBox[{"\"beta disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BetaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BetaDisintegrationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.273881659118948, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"chemical energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ChemicalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ChemicalEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ChemicalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.244892493141436, -1.3530595934934837}, 
           0.05591872795906591],
          TemplateBox[{"\"potential energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"PotentialEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.622907248929408, -0.36130331161654494}, 
           0.05591872795906591],
          TemplateBox[{"\"cogging torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"CoggingTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"CoggingTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "CoggingTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.9124518304778535, -1.065112348212629}, 
           0.05591872795906591],
          TemplateBox[{"\"torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Torque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.3023144774866906, -1.0175313686492686}, 
           0.05591872795906591],
          TemplateBox[{"\"elastic potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElasticPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticPotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.6342604239704204, -2.145593136194088}, 
           0.05591872795906591],
          TemplateBox[{"\"electric potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectricPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricPotentialEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.851775362904512, -3.283521834375021}, 
           0.05591872795906591],
          TemplateBox[{"\"ergotropy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Ergotropy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Ergotropy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Ergotropy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3540401446636414, -4.149032307909743}, 
           0.05591872795906591],
          TemplateBox[{"\"exergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Exergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Exergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Exergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"factored bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FactoredBendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FactoredBendingMomentOfForce\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -5.735782524380841}, 
           0.05591872795906591],
          TemplateBox[{"\"first ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FirstIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FirstIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FirstIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2228773207394938, -6.230765378399849}, 
           0.05591872795906591],
          TemplateBox[{"\"ionization energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"IonizationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"IonizationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "IonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.616706757073131, -1.7756660818033771}, 
           0.05591872795906591],
          TemplateBox[{"\"friction torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FrictionTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"FrictionTorque\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FrictionTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"Gibbs energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GibbsEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"GibbsEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GibbsEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"thermodynamic free energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThermodynamicFreeEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThermodynamicFreeEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.204371157287133, -1.0723231017592156}, 
           0.05591872795906591],
          TemplateBox[{"\"gravitational potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"Helmholtz energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HelmholtzEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HelmholtzEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HelmholtzEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.210223965775453, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"hysteresis torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HysteresisTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"HysteresisTorque\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HysteresisTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.273881659118948, -3.040066687265453}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of condensation\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfCondensation\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfCondensation\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.244892493141436, -4.039281372325068}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"LatentHeat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.3023144774866906, -3.7037531474808523}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of fusion\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfFusion\""}],
               "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfFusion\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfFusion"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.6342604239704204, -4.831814915025672}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of phase transition\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfPhaseTransition\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfPhaseTransition\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.204371157287133, -3.7585448805907995}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of solidification\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfSolidification\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfSolidification\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.8089294207757085, -4.864609340754324}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of vaporization\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfVaporization\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfVaporization\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.009279018267167, -7.231225000918708}, 
           0.05591872795906591],
          TemplateBox[{"\"maximum beta particle energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MaximumBetaParticleEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MaximumBetaParticleEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -4.154560930027818}, 
           0.05591872795906591],
          TemplateBox[{"\"mechanical work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalWork\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MechanicalWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.8089294207757085, -2.17838756192274}, 
           0.05591872795906591],
          TemplateBox[{"\"nuclear energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"NuclearEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.412060927471547, -6.911706695122599}, 
           0.05591872795906591],
          TemplateBox[{"\"radio luminosity\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadioLuminosity\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RadioLuminosity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.412060927471547, -6.911706695122599}, 
           0.05591872795906591],
          
          TemplateBox[{
           "\"spectral radiant flux (with respect to frequency)\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity[
          "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"relativistic kinetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"RelativisticKineticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"RelativisticKineticEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"kinetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"KineticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"KineticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "KineticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"rotational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RotationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"RotationalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RotationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.085608467568001, -5.726288466097039}, 
           0.05591872795906591],
          TemplateBox[{"\"second ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SecondIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SecondIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SecondIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.8560582577232085, -5.016086019055125}, 
           0.05591872795906591],
          TemplateBox[{"\"thermodynamic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThermodynamicWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2301709854066663, -7.231225000918708}, 
           0.05591872795906591],
          TemplateBox[{"\"third ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThirdIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThirdIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThirdIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.42094421533931414, -1.85139752213641}, 
           0.05591872795906591],
          TemplateBox[{"\"vacuum energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VacuumEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VacuumEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VacuumEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8566890727776537, -5.0185986492292995}, 
           0.05591872795906591],
          TemplateBox[{"\"virtual work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VirtualWork\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"VirtualWork\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VirtualWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.201214606013687, -1.7680779192953322}, 
           0.05591872795906591],
          TemplateBox[{"\"viscous drag torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ViscousDragTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ViscousDragTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ViscousDragTorque"], "Tooltip"]& ]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Input",ExpressionUUID->"7f7c1eca-8c8d-4a8f-a514-\
7da6fb284b02"],

Cell[CellGroupData[{

Cell["Function Test", "Subsection",
 CellChangeTimes->{{3.8774350318585496`*^9, 
  3.8774350351558037`*^9}},ExpressionUUID->"ec4e9015-6799-4aef-a19e-\
1ed56d74037b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<Name\>\"", ",", "\"\<SIUnit\>\"", ",", "\"\<SIBaseUnit\>\""}], "}"}],
    "->", 
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"KeyMap", "[", 
      RowBox[{"CanonicalName", ",", 
       RowBox[{
        TemplateBox[{"\"radio luminosity\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], 
            "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadioLuminosity\\\"]\"", "\"physical quantity\""},
         "Entity"], "[", "\"\<PropertyAssociation\>\"", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Name\>\"", ",", "\"\<SIUnit\>\"", ",", "\"\<SIBaseUnit\>\""}], 
      "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8774348466265645`*^9, 3.877434919647767*^9}, {
  3.8774349738780785`*^9, 3.8774349838137116`*^9}, {3.877435084620248*^9, 
  3.877435092762306*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"c713c88e-02d8-407b-8f4d-1cb7c87c925f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"radio luminosity\"\>"}], ",", 
   RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"kg\"", "\[ThinSpace]", 
        SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
        "\[InvisibleSpace]", 
        SuperscriptBox["\"s\"", "2"]}], 
      "kilogram meter squared per second squared", 
      FractionBox[
       RowBox[{"\"Kilograms\"", " ", 
         SuperscriptBox["\"Meters\"", "2"]}], 
       SuperscriptBox["\"Seconds\"", "2"]]},
     "Quantity"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877434850641343*^9, 3.877434919957493*^9}, 
   3.8774349840788913`*^9, 3.8774350930598893`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"adad217b-b93b-4a6b-b3b7-507248dc6176"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["using the function", "Section",
 CellChangeTimes->{{3.8774350383269553`*^9, 
  3.8774350479687347`*^9}},ExpressionUUID->"a5a51697-36a3-409c-8883-\
606907ea93dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SimplifiedPhysicalQuantityDataWithDimensionalProductAdded", "[", 
    RowBox[{"PhysicalQuantity", "[", "#", "]"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
   "\"\<MassEnergyEquivalent\>\"", ",", "\"\<ElectricPotentialEnergy\>\"", 
    ",", "\"\<FrictionTorque\>\"", ",", "\"\<Exergy\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8774347225134*^9, 3.8774347622899055`*^9}, {
  3.8774349649590435`*^9, 3.877434966678594*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"a45654cc-283e-460b-8080-17a2f750d55b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"mass energy equivalent\"\>"}], 
     ",", 
     RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", "\"J\"", "joule", "\"Joules\""},
       "Quantity"]}], ",", 
     RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{"\"kg\"", "\[ThinSpace]", 
          SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
          "\[InvisibleSpace]", 
          SuperscriptBox["\"s\"", "2"]}], 
        "kilogram meter squared per second squared", 
        FractionBox[
         RowBox[{"\"Kilograms\"", " ", 
           SuperscriptBox["\"Meters\"", "2"]}], 
         SuperscriptBox["\"Seconds\"", "2"]]},
       "Quantity"]}], ",", 
     RowBox[{"\<\"CanonicalDimensionalProduct\"\>", "\[Rule]", 
      TemplateBox[{
        TemplateBox[{"\"T\"", 
          RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox], 
        TemplateBox[{"\"L\"", "2"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], 
        TemplateBox[{"\"M\"", "1"}, "Superscript", SyntaxForm -> 
         SuperscriptBox]},
       "RowDefault"]}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"electric potential energy\"\>"}],
      ",", 
     RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", "\"J\"", "joule", "\"Joules\""},
       "Quantity"]}], ",", 
     RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{"\"kg\"", "\[ThinSpace]", 
          SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
          "\[InvisibleSpace]", 
          SuperscriptBox["\"s\"", "2"]}], 
        "kilogram meter squared per second squared", 
        FractionBox[
         RowBox[{"\"Kilograms\"", " ", 
           SuperscriptBox["\"Meters\"", "2"]}], 
         SuperscriptBox["\"Seconds\"", "2"]]},
       "Quantity"]}], ",", 
     RowBox[{"\<\"CanonicalDimensionalProduct\"\>", "\[Rule]", 
      TemplateBox[{
        TemplateBox[{"\"T\"", 
          RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox], 
        TemplateBox[{"\"L\"", "2"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], 
        TemplateBox[{"\"M\"", "1"}, "Superscript", SyntaxForm -> 
         SuperscriptBox]},
       "RowDefault"]}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"friction torque\"\>"}], ",", 
     RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}], "meter newton", 
        RowBox[{"\"Meters\"", " ", "\"Newtons\""}]},
       "Quantity"]}], ",", 
     RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{"\"kg\"", "\[ThinSpace]", 
          SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
          "\[InvisibleSpace]", 
          SuperscriptBox["\"s\"", "2"]}], 
        "kilogram meter squared per second squared", 
        FractionBox[
         RowBox[{"\"Kilograms\"", " ", 
           SuperscriptBox["\"Meters\"", "2"]}], 
         SuperscriptBox["\"Seconds\"", "2"]]},
       "Quantity"]}], ",", 
     RowBox[{"\<\"CanonicalDimensionalProduct\"\>", "\[Rule]", 
      TemplateBox[{
        TemplateBox[{"\"T\"", 
          RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox], 
        TemplateBox[{"\"L\"", "2"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], 
        TemplateBox[{"\"M\"", "1"}, "Superscript", SyntaxForm -> 
         SuperscriptBox]},
       "RowDefault"]}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"exergy\"\>"}], ",", 
     RowBox[{"\<\"SIUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", "\"J\"", "joule", "\"Joules\""},
       "Quantity"]}], ",", 
     RowBox[{"\<\"SIBaseUnit\"\>", "\[Rule]", 
      TemplateBox[{"1", 
        RowBox[{"\"kg\"", "\[ThinSpace]", 
          SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
          "\[InvisibleSpace]", 
          SuperscriptBox["\"s\"", "2"]}], 
        "kilogram meter squared per second squared", 
        FractionBox[
         RowBox[{"\"Kilograms\"", " ", 
           SuperscriptBox["\"Meters\"", "2"]}], 
         SuperscriptBox["\"Seconds\"", "2"]]},
       "Quantity"]}], ",", 
     RowBox[{"\<\"CanonicalDimensionalProduct\"\>", "\[Rule]", 
      TemplateBox[{
        TemplateBox[{"\"T\"", 
          RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox], 
        TemplateBox[{"\"L\"", "2"}, "Superscript", SyntaxForm -> 
         SuperscriptBox], 
        TemplateBox[{"\"M\"", "1"}, "Superscript", SyntaxForm -> 
         SuperscriptBox]},
       "RowDefault"]}]}], "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8774347653047075`*^9, 3.8774349673031797`*^9, 
  3.877435018038752*^9, 3.8774351179238577`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"c489ae0b-33a6-43bc-bc7f-cb7ed7304ce9"]
}, Open  ]],

Cell["This is a graph.", "Text",
 CellChangeTimes->{{3.877434840595463*^9, 
  3.87743484311141*^9}},ExpressionUUID->"e1a67d1f-405c-4d40-84ea-\
9b8e92bcbb96"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
       Entity["PhysicalQuantity", "AcousticEnergy"], 
       Entity["PhysicalQuantity", "Energy"], 
       Entity["PhysicalQuantity", "AtomicBindingEnergy"], 
       Entity["PhysicalQuantity", "AtomicEnergy"], 
       Entity["PhysicalQuantity", "BindingEnergy"], 
       Entity["PhysicalQuantity", "BiogasEnergy"], 
       Entity["PhysicalQuantity", "BondEnergy"], 
       Entity["PhysicalQuantity", "ElasticEnergy"], 
       Entity["PhysicalQuantity", "ElectromagneticEnergy"], 
       Entity["PhysicalQuantity", "EquivalentEnergy"], 
       Entity["PhysicalQuantity", "ExcitationEnergy"], 
       Entity["PhysicalQuantity", "FermiEnergy"], 
       Entity["PhysicalQuantity", "FundamentalTemperature"], 
       Entity["PhysicalQuantity", "GeothermalEnergy"], 
       Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
       Entity["PhysicalQuantity", "MagneticEnergy"], 
       Entity["PhysicalQuantity", "MassEnergyEquivalent"], 
       Entity["PhysicalQuantity", "Massergy"], 
       Entity["PhysicalQuantity", "NuclearBindingEnergy"], 
       Entity["PhysicalQuantity", "PonderomotiveEnergy"], 
       Entity["PhysicalQuantity", "ReactionEnergy"], 
       Entity["PhysicalQuantity", "ResonanceEnergy"], 
       Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
       Entity["PhysicalQuantity", "SeparationEnergy"], 
       Entity["PhysicalQuantity", "SolarEnergy"], 
       Entity["PhysicalQuantity", "SurfaceEnergy"], 
       Entity["PhysicalQuantity", "TidalEnergy"], 
       Entity["PhysicalQuantity", "TotalEnergy"], 
       Entity["PhysicalQuantity", "VibrationalEnergy"], 
       Entity["PhysicalQuantity", "WaterEnergy"], 
       Entity["PhysicalQuantity", "WaveEnergy"], 
       Entity["PhysicalQuantity", "WindEnergy"], 
       Entity["PhysicalQuantity", "ZeroPointEnergy"], 
       Entity["PhysicalQuantity", "HeatGain"], 
       Entity["PhysicalQuantity", "Heat"], 
       Entity["PhysicalQuantity", "HeatLoss"], 
       Entity["PhysicalQuantity", "AdiabaticWork"], 
       Entity["PhysicalQuantity", "Work"], 
       Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "DisintegrationEnergy"], 
       Entity["PhysicalQuantity", "AppliedMomentOfForce"], 
       Entity["PhysicalQuantity", "BendingMomentOfForce"], 
       Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "ChemicalEnergy"], 
       Entity["PhysicalQuantity", "PotentialEnergy"], 
       Entity["PhysicalQuantity", "CoggingTorque"], 
       Entity["PhysicalQuantity", "Torque"], 
       Entity["PhysicalQuantity", "ElasticPotentialEnergy"], 
       Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
       Entity["PhysicalQuantity", "Ergotropy"], 
       Entity["PhysicalQuantity", "Exergy"], 
       Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
       Entity["PhysicalQuantity", "FirstIonizationEnergy"], 
       Entity["PhysicalQuantity", "IonizationEnergy"], 
       Entity["PhysicalQuantity", "FrictionTorque"], 
       Entity["PhysicalQuantity", "GibbsEnergy"], 
       Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
       Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
       Entity["PhysicalQuantity", "HelmholtzEnergy"], 
       Entity["PhysicalQuantity", "HysteresisTorque"], 
       Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
       Entity["PhysicalQuantity", "LatentHeat"], 
       Entity["PhysicalQuantity", "LatentHeatOfFusion"], 
       Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
       Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
       Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
       Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
       Entity["PhysicalQuantity", "MechanicalWork"], 
       Entity["PhysicalQuantity", "NuclearEnergy"], 
       Entity["PhysicalQuantity", "RadioLuminosity"], 
       Entity[
       "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
       Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
       Entity["PhysicalQuantity", "KineticEnergy"], 
       Entity["PhysicalQuantity", "RotationalEnergy"], 
       Entity["PhysicalQuantity", "SecondIonizationEnergy"], 
       Entity["PhysicalQuantity", "ThermodynamicWork"], 
       Entity["PhysicalQuantity", "ThirdIonizationEnergy"], 
       Entity["PhysicalQuantity", "VacuumEnergy"], 
       Entity["PhysicalQuantity", "VirtualWork"], 
       Entity["PhysicalQuantity", "ViscousDragTorque"]}, {{{1, 2}, {3, 2}, {4,
        2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 
       2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20,
        2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}, {
       28, 2}, {29, 2}, {30, 2}, {31, 2}, {32, 2}, {33, 2}, {34, 35}, {36, 
       35}, {37, 38}, {39, 40}, {41, 42}, {43, 40}, {44, 45}, {46, 47}, {48, 
       45}, {49, 45}, {50, 38}, {51, 38}, {52, 42}, {53, 54}, {55, 47}, {56, 
       57}, {58, 45}, {59, 57}, {60, 47}, {61, 62}, {63, 62}, {64, 62}, {65, 
       62}, {66, 62}, {67, 40}, {68, 38}, {69, 45}, {70, 71}, {72, 73}, {74, 
       73}, {75, 54}, {76, 38}, {77, 54}, {78, 2}, {79, 38}, {80, 47}}, 
       Null}, {VertexLabels -> {
         Placed["Name", Tooltip]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.01849600757758165], 
        ArrowBox[CompressedData["
1:eJx1lGlQk1cUhrMgO2lkRwohwAgC0o7QSizDvdaAA2VJRelIRSglIBQrIpmg
sqggWrRlaVGnoIWQwECFOkoRB5h8IFFAylIL2KDQpiBb1GwQiATqTP3yg1t+
fD/OPPO+9573nO/S44/tY5MJBALzzUd6+4V1kKtUGAm6bk/2pcU/F3J5XYuF
OWpQNzv+JytJLXxxSfGHdEAOCvSvfcL01MPWc1ZRZbjWmgAr55pYghIywkt3
Hy8criXDxqwQZ/v2V4j/9Y9kd1w/fg0wRYpJzf/4y890yBi5CvCXDduBLRhB
9LSyyyY7Ty0CEdduKKwc1Ue5RRuyZ4iwnxoGZqqXEf34z5H8IrISTJwLOat0
ICJ6prY4WvIpAYa+f3w5vHIO0XefvF9NSNCAJB9nSh4P1ZdsedTw3GMKzBRr
6++OziJ6zxi/0Zh8AizjTcUtblGh/CAvih0wB5yDrk93zpEQf9nafUnvl2ow
+OTG07zScVQfwkiM3asA9WKvTvWv6HzNmlm3uEbzIEs7XUK+p0Z4v5PkVK0x
AXbvyvmeH4n6exgslvZ26MHVWpkqx1yDcAMDN+8xMAdS+RUjnHdWEe49cUSb
ICTDvrbiBXXhGsK/6M3uCvxcAkxPhk4ecEbzbZQ8LY7Z/xosBft7irTofmya
r+46T9AA1aOeraZWUoQnum2Kp7iS4GB3T8yKKZrv270DDctObiduLSF6r7uv
2ogXx8Bk5c75KqIMzf9063RLhR6U0q0KFprQ+cYP5uvTlC9B3rYnGsoKqp8c
+a6skUGATUy990wvovnM8a1+73WcBYYi0ytLO/5GuAo6GORSn4EPvq1viLqJ
nq8YmIhQCmwgRiP4kvgULMgyN3FPjb2utu4pD1YKaBtyP1qG2nbXPKhuCG3t
DjXGVMDQsKx+AcizzR+v/UjF0ujNVcFUI5jRdmg5TW6NddEfpxuSqNDMnt0Z
JrXF8PNvBx1ZvfeNjc4fr3nl+gGZHAvozp7a1jKN6rlF5GMZtpsh/j7sZunZ
iTRUCHOXB+k1C8K4WDF7LNsRZtoMS6/SRoVlEX2ig2/8DzMkAXeM5UKXsAix
y1fGcLuJbKl/rwzRT/dR6WpzM7ijX9nq5UHE1nN6itJnolIL2trTbWuZaP+H
k0fWzIdJkGEpkZZfoyIcz3ej/vH9w/NzK2QMTBcrAd6/MOmf5bNcR/hhQuyI
U/IK0h+e78uZqxHBqfo6f7xe9PK5GTRkCaOH+pj+7nKkf/x+G+m9Yy4omaO2
uvzXn4/Ph9/cepqyz1CXH382MI7hTsXw/APsLuwPrjJDOJ7/izRiyMNIC4Tj
9z+QxdHkbqYgfIWctfqZvwXMSq3beoiD6uNXYtPOGFHhJbELeCB9F9kvPP+R
4a/9Am+g88P9WaI9nKij6H7k97WHKgUO0D6+Iu2KwB77r7bT1fh8gj19Lz87
aqHLF6/x/Dfigy3knMhfCLr/Y/1+hAc+cE25rQUKClecSbVE7s9TpYoeNioB
3v96fVPtD0RMJgb5hTakyJ+0yPuRzvnNZy15Hnh2+hWYWKD+dYwqH5N+W5h6
4py5aQi6n/8CQM54xQ==
         "], 0.05591872795906591]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3442165927191696, -0.6994777701997106}, 
           0.05591872795906591],
          TemplateBox[{"\"acoustic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcousticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AcousticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.468394245088488, -1.4627235899521145}, 
           0.05591872795906591],
          TemplateBox[{"\"energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Energy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Energy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Energy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1132629698047325, -2.5211263566751}, 0.05591872795906591],
          TemplateBox[{"\"atomic binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AtomicBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0112253325222937, -2.446116095086225}, 
           0.05591872795906591],
          TemplateBox[{"\"atomic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.4569502654850988, -0.991834227537671}, 
           0.05591872795906591],
          TemplateBox[{"\"binding energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BindingEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7036482838482023, -2.521312798692037}, 
           0.05591872795906591],
          TemplateBox[{"\"biogas energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BiogasEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BiogasEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BiogasEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.156061115696556, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"bond energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BondEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BondEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BondEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4048376513613403, -2.5758320175072833}, 
           0.05591872795906591],
          TemplateBox[{"\"elastic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.2384739544403756, -1.6025164101311478}, 
           0.05591872795906591],
          TemplateBox[{"\"electromagnetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectromagneticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectromagneticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectromagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1883694094674335, -2.139624605261232}, 
           0.05591872795906591],
          TemplateBox[{"\"equivalent energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"EquivalentEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"EquivalentEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "EquivalentEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.039982516813014, -0.8320689079205379}, 
           0.05591872795906591],
          TemplateBox[{"\"excitation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ExcitationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExcitationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ExcitationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.6494146725668646, -2.204351530474401}, 
           0.05591872795906591],
          TemplateBox[{"\"Fermi energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FermiEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"FermiEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FermiEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.661486949386772, -0.8075826968820623}, 
           0.05591872795906591],
          TemplateBox[{"\"fundamental temperature\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FundamentalTemperature\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FundamentalTemperature\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FundamentalTemperature"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0646321119380864, -1.256582621101335}, 
           0.05591872795906591],
          TemplateBox[{"\"geothermal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GeothermalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"GeothermalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GeothermalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8201166812967008, -2.364629563796158}, 
           0.05591872795906591],
          TemplateBox[{"\"gravitational binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4618634088546933, -0.47769257111521046}, 
           0.05591872795906591],
          TemplateBox[{"\"magnetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1424249642483442, -0.7097128670200921}, 
           0.05591872795906591],
          TemplateBox[{"\"mass energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MassEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MassEnergyEquivalent\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MassEnergyEquivalent"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8449057048471232, -1.4826694201909438}, 
           0.05591872795906591],
          TemplateBox[{"\"massergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Massergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Massergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Massergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0052022552737077, -0.4738551559793618}, 
           0.05591872795906591],
          TemplateBox[{"\"nuclear binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"NuclearBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"NuclearBindingEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.594624660618952, -1.629515606686709}, 
           0.05591872795906591],
          TemplateBox[{"\"ponderomotive energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"PonderomotiveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PonderomotiveEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PonderomotiveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8202949429907854, -1.8787744887615885}, 
           0.05591872795906591],
          TemplateBox[{"\"reaction energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ReactionEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ReactionEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ReactionEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.4684543416623432, -1.9714278786084831}, 
           0.05591872795906591],
          TemplateBox[{"\"resonance energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ResonanceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ResonanceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ResonanceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.5736416661951119, -2.1417653880918177}, 
           0.05591872795906591],
          TemplateBox[{"\"seismic energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SeismicEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeismicEnergyEquivalent\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7080970438675354, -0.3592389032575336}, 
           0.05591872795906591],
          TemplateBox[{"\"separation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SeparationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeparationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeparationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.625127571226302, -0.8775692708571783}, 
           0.05591872795906591],
          TemplateBox[{"\"solar energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SolarEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"SolarEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SolarEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.267605558187756, -2.256340725632164}, 
           0.05591872795906591],
          TemplateBox[{"\"surface energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SurfaceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SurfaceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SurfaceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -1.543078568312562}, 
           0.05591872795906591],
          TemplateBox[{"\"tidal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TidalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TidalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TidalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.4301761956293031, -1.0003985584426625}, 
           0.05591872795906591],
          TemplateBox[{"\"total energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TotalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TotalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TotalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.5765245536889743, -1.294179462203938}, 
           0.05591872795906591],
          TemplateBox[{"\"vibrational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VibrationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VibrationalEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VibrationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.9671778800316242, -1.0615377234085777}, 
           0.05591872795906591],
          TemplateBox[{"\"water energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaterEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0281650242057925, -1.9707147442425539}, 
           0.05591872795906591],
          TemplateBox[{"\"wave energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7850088217939206, -0.5374720507299182}, 
           0.05591872795906591],
          TemplateBox[{"\"wind energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WindEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WindEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.45413184828522835, -1.2920748504482849}, 
           0.05591872795906591],
          TemplateBox[{"\"zero\[Hyphen]point energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ZeroPointEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ZeroPointEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ZeroPointEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"heat gain\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatGain\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatGain\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatGain"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"amount of heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Heat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Heat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Heat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -3.8300823271310662}, 
           0.05591872795906591],
          TemplateBox[{"\"heat loss\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatLoss\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatLoss\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatLoss"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8508419831350471, -3.2874922402167654}, 
           0.05591872795906591],
          TemplateBox[{"\"adiabatic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AdiabaticWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.3541460336455176, -4.15136651802412}, 
           0.05591872795906591],
          TemplateBox[{"\"work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Work\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Work\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Work"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.13295294129437, -5.735782524380841}, 0.05591872795906591],
          TemplateBox[{"\"alpha disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AlphaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AlphaDisintegrationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.001985353599995, -6.230765378399849}, 
           0.05591872795906591],
          TemplateBox[{"\"disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"DisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"DisintegrationEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "DisintegrationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"applied moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AppliedMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AppliedMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AppliedMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BendingMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BendingMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.864716500428502, -5.726288466097039}, 
           0.05591872795906591],
          TemplateBox[{"\"beta disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BetaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BetaDisintegrationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.273881659118948, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"chemical energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ChemicalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ChemicalEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ChemicalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.244892493141436, -1.3530595934934837}, 
           0.05591872795906591],
          TemplateBox[{"\"potential energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"PotentialEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.622907248929408, -0.36130331161654494}, 
           0.05591872795906591],
          TemplateBox[{"\"cogging torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"CoggingTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"CoggingTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "CoggingTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.9124518304778535, -1.065112348212629}, 
           0.05591872795906591],
          TemplateBox[{"\"torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Torque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.3023144774866906, -1.0175313686492686}, 
           0.05591872795906591],
          TemplateBox[{"\"elastic potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElasticPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticPotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.6342604239704204, -2.145593136194088}, 
           0.05591872795906591],
          TemplateBox[{"\"electric potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectricPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricPotentialEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.851775362904512, -3.283521834375021}, 
           0.05591872795906591],
          TemplateBox[{"\"ergotropy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Ergotropy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Ergotropy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Ergotropy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3540401446636414, -4.149032307909743}, 
           0.05591872795906591],
          TemplateBox[{"\"exergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Exergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Exergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Exergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -5.884498572458755}, 
           0.05591872795906591],
          TemplateBox[{"\"factored bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FactoredBendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FactoredBendingMomentOfForce\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -5.735782524380841}, 
           0.05591872795906591],
          TemplateBox[{"\"first ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FirstIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FirstIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FirstIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2228773207394938, -6.230765378399849}, 
           0.05591872795906591],
          TemplateBox[{"\"ionization energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"IonizationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"IonizationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "IonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.616706757073131, -1.7756660818033771}, 
           0.05591872795906591],
          TemplateBox[{"\"friction torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FrictionTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"FrictionTorque\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FrictionTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"Gibbs energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GibbsEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"GibbsEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GibbsEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"thermodynamic free energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThermodynamicFreeEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThermodynamicFreeEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.204371157287133, -1.0723231017592156}, 
           0.05591872795906591],
          TemplateBox[{"\"gravitational potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -2.802874204467222}, 
           0.05591872795906591],
          TemplateBox[{"\"Helmholtz energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HelmholtzEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HelmholtzEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HelmholtzEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.210223965775453, -0.35384490843386907}, 
           0.05591872795906591],
          TemplateBox[{"\"hysteresis torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HysteresisTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"HysteresisTorque\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HysteresisTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.273881659118948, -3.040066687265453}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of condensation\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfCondensation\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfCondensation\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.244892493141436, -4.039281372325068}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"LatentHeat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.3023144774866906, -3.7037531474808523}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of fusion\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfFusion\""}],
               "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfFusion\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfFusion"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.6342604239704204, -4.831814915025672}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of phase transition\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfPhaseTransition\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfPhaseTransition\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.204371157287133, -3.7585448805907995}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of solidification\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfSolidification\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfSolidification\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.8089294207757085, -4.864609340754324}, 
           0.05591872795906591],
          TemplateBox[{"\"latent heat of vaporization\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfVaporization\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfVaporization\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.009279018267167, -7.231225000918708}, 
           0.05591872795906591],
          TemplateBox[{"\"maximum beta particle energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MaximumBetaParticleEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MaximumBetaParticleEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.35384490843386907, -4.154560930027818}, 
           0.05591872795906591],
          TemplateBox[{"\"mechanical work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalWork\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MechanicalWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.8089294207757085, -2.17838756192274}, 
           0.05591872795906591],
          TemplateBox[{"\"nuclear energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"NuclearEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.412060927471547, -6.911706695122599}, 
           0.05591872795906591],
          TemplateBox[{"\"radio luminosity\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadioLuminosity\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RadioLuminosity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.412060927471547, -6.911706695122599}, 
           0.05591872795906591],
          
          TemplateBox[{
           "\"spectral radiant flux (with respect to frequency)\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity[
          "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.912060974154871, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"relativistic kinetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"RelativisticKineticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"RelativisticKineticEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.912366487032221, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"kinetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"KineticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"KineticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "KineticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{7.912060880788223, -4.8572904497949105}, 
           0.05591872795906591],
          TemplateBox[{"\"rotational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RotationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"RotationalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RotationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.085608467568001, -5.726288466097039}, 
           0.05591872795906591],
          TemplateBox[{"\"second ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SecondIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SecondIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SecondIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.8560582577232085, -5.016086019055125}, 
           0.05591872795906591],
          TemplateBox[{"\"thermodynamic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThermodynamicWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2301709854066663, -7.231225000918708}, 
           0.05591872795906591],
          TemplateBox[{"\"third ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThirdIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThirdIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThirdIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.42094421533931414, -1.85139752213641}, 
           0.05591872795906591],
          TemplateBox[{"\"vacuum energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VacuumEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VacuumEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VacuumEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8566890727776537, -5.0185986492292995}, 
           0.05591872795906591],
          TemplateBox[{"\"virtual work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VirtualWork\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"VirtualWork\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VirtualWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{6.201214606013687, -1.7680779192953322}, 
           0.05591872795906591],
          TemplateBox[{"\"viscous drag torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ViscousDragTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ViscousDragTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ViscousDragTorque"], "Tooltip"]& ]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Input",ExpressionUUID->"32c3440a-eaf0-484a-aade-\
a5a245884482"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Dataset", "[", 
    RowBox[{"SimplifiedPhysicalQuantityDataWithDimensionalProductAdded", "[", 
     RowBox[{"PhysicalQuantity", "[", "#", "]"}], "]"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
   "\"\<MassEnergyEquivalent\>\"", ",", "\"\<ElectricPotentialEnergy\>\"", 
    ",", "\"\<FrictionTorque\>\"", ",", "\"\<Exergy\>\"", ",", 
    "\"\<LatentHeatOfVaporization\>\"", ",", "\"\<RotationalEnergy\>\"", ",", 
    "\"\<SecondIonizationEnergy\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.877435050218213*^9, 3.8774350678233414`*^9}, {
  3.8774352054552336`*^9, 3.877435237265648*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"8ffd5a64-2c84-4a2c-a3de-20f428ddf2ee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "mass energy equivalent", "SIUnit" -> Quantity[1, "Joules"],
          "SIBaseUnit" -> Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[246.40000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[246.40000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["mass energy equivalent", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{246.40000000000003`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", "\"J\""}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{443., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{443., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "electric potential energy", "SIUnit" -> 
         Quantity[1, "Joules"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[280.], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[280.], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["electric potential energy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{280., Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", "\"J\""}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{476., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{476., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "friction torque", "SIUnit" -> 
         Quantity[1, "Meters" "Newtons"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[168.00000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Meters" "Newtons"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[168.00000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Meters" "Newtons"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["friction torque", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{364., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{364., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "exergy", "SIUnit" -> Quantity[1, "Joules"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[67.2], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[67.2], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["exergy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{67.2, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", "\"J\""}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{271., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{271., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "latent heat of vaporization", "SIUnit" -> 
         Quantity[1, "Joules"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["latent heat of vaporization", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", "\"J\""}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{499., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{499., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "rotational energy", "SIUnit" -> Quantity[1, "Joules"], 
         "SIBaseUnit" -> Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[190.4], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[190.4], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["rotational energy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{190.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", "\"J\""}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{387., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{387., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "second ionization energy", "SIUnit" -> 
         Quantity[1, "Joules"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[268.8], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[268.8], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["second ionization energy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{268.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", "\"J\""}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{465., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{465., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.877435053827419*^9, 3.8774350683384953`*^9}, 
   3.877435120360757*^9, {3.8774352144381948`*^9, 3.877435238546294*^9}},
 CellLabel->"Out[88]=",ExpressionUUID->"bc5093f0-bc1c-434e-9135-f9f331ba7dac"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph that groups by unit", "Section",
 CellChangeTimes->{{3.8774352995192966`*^9, 
  3.877435303440225*^9}},ExpressionUUID->"93836ea9-a644-4450-b295-\
fd7c87f7a24d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Rule", "@@@", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"pqs", ",", 
         RowBox[{"EntityValue", "[", 
          RowBox[{"pqs", ",", 
           RowBox[{"EntityProperty", "[", 
            RowBox[{"\"\<PhysicalQuantity\>\"", ",", "\"\<SIUnit\>\""}], 
            "]"}]}], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
   RowBox[{"VertexLabels", "->", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8774352652353563`*^9, 3.877435283332694*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"642843b5-90d1-4aaa-b9f6-ad4178550f56"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
       Entity["PhysicalQuantity", "AcousticEnergy"], 
       Quantity[1, "Joules"], 
       Entity["PhysicalQuantity", "AtomicBindingEnergy"], 
       Entity["PhysicalQuantity", "AtomicEnergy"], 
       Entity["PhysicalQuantity", "BindingEnergy"], 
       Entity["PhysicalQuantity", "BiogasEnergy"], 
       Entity["PhysicalQuantity", "BondEnergy"], 
       Entity["PhysicalQuantity", "ElasticEnergy"], 
       Entity["PhysicalQuantity", "ElectromagneticEnergy"], 
       Entity["PhysicalQuantity", "Energy"], 
       Entity["PhysicalQuantity", "EquivalentEnergy"], 
       Entity["PhysicalQuantity", "ExcitationEnergy"], 
       Entity["PhysicalQuantity", "FermiEnergy"], 
       Entity["PhysicalQuantity", "FundamentalTemperature"], 
       Entity["PhysicalQuantity", "GeothermalEnergy"], 
       Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
       Entity["PhysicalQuantity", "MagneticEnergy"], 
       Entity["PhysicalQuantity", "MassEnergyEquivalent"], 
       Entity["PhysicalQuantity", "Massergy"], 
       Entity["PhysicalQuantity", "NuclearBindingEnergy"], 
       Entity["PhysicalQuantity", "PonderomotiveEnergy"], 
       Entity["PhysicalQuantity", "ReactionEnergy"], 
       Entity["PhysicalQuantity", "ResonanceEnergy"], 
       Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
       Entity["PhysicalQuantity", "SeparationEnergy"], 
       Entity["PhysicalQuantity", "SolarEnergy"], 
       Entity["PhysicalQuantity", "SurfaceEnergy"], 
       Entity["PhysicalQuantity", "TidalEnergy"], 
       Entity["PhysicalQuantity", "TotalEnergy"], 
       Entity["PhysicalQuantity", "VibrationalEnergy"], 
       Entity["PhysicalQuantity", "WaterEnergy"], 
       Entity["PhysicalQuantity", "WaveEnergy"], 
       Entity["PhysicalQuantity", "WindEnergy"], 
       Entity["PhysicalQuantity", "ZeroPointEnergy"], 
       Entity["PhysicalQuantity", "Heat"], 
       Entity["PhysicalQuantity", "HeatGain"], 
       Entity["PhysicalQuantity", "HeatLoss"], 
       Entity["PhysicalQuantity", "PowerSpectralDensity"], 
       Quantity[1, "Hertz"^(-1) "Watts"], 
       Entity["PhysicalQuantity", "ActiveEnergy"], 
       Entity["PhysicalQuantity", "AdiabaticWork"], 
       Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "AppliedMomentOfForce"], 
       Quantity[1, "Meters" "Newtons"], 
       Entity["PhysicalQuantity", "BatteryEnergyCapacity"], 
       Entity["PhysicalQuantity", "BendingMomentOfForce"], 
       Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
       Entity["PhysicalQuantity", "ChemicalEnergy"], 
       Entity["PhysicalQuantity", "CoggingTorque"], 
       Entity["PhysicalQuantity", "DisintegrationEnergy"], 
       Entity["PhysicalQuantity", "ElasticPotentialEnergy"], 
       Entity["PhysicalQuantity", "ElectricalEnergy"], 
       Quantity[1, "Seconds" "Watts"], 
       Entity["PhysicalQuantity", "ElectricApparentEnergy"], 
       Quantity[1, "Amperes" "Seconds" "Volts"], 
       Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
       Entity["PhysicalQuantity", "ElectricReactiveEnergy"], 
       Entity["PhysicalQuantity", "Enthalpy"], 
       Entity["PhysicalQuantity", "Ergotropy"], 
       Entity["PhysicalQuantity", "ExchangeIntegral"], 
       Entity["PhysicalQuantity", "Exergy"], 
       Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
       Entity["PhysicalQuantity", "FirstIonizationEnergy"], 
       Entity["PhysicalQuantity", "FoodEnergy"], 
       Entity["PhysicalQuantity", "FrictionTorque"], 
       Entity["PhysicalQuantity", "GibbsEnergy"], 
       Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
       Entity["PhysicalQuantity", "HamiltonianFunction"], 
       Entity["PhysicalQuantity", "HamiltonianOperator"], 
       Entity["PhysicalQuantity", "HelmholtzEnergy"], 
       Entity["PhysicalQuantity", "HysteresisTorque"], 
       Entity["PhysicalQuantity", "InternalEnergy"], 
       Entity["PhysicalQuantity", "IonizationEnergy"], 
       Entity["PhysicalQuantity", "KineticEnergy"], 
       Entity["PhysicalQuantity", "LagrangianFunction"], 
       Entity["PhysicalQuantity", "LatentHeat"], 
       Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
       Entity["PhysicalQuantity", "LatentHeatOfFusion"], 
       Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
       Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
       Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
       Entity["PhysicalQuantity", "LevelWidth"], 
       Entity["PhysicalQuantity", "LoadFrequencyShift"], 
       Entity["PhysicalQuantity", "MagneticDomainWallEnergy"], 
       Quantity[1, "Henries"^(-1) "Meters"^4 "Teslas"^2], 
       Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
       Entity["PhysicalQuantity", "MechanicalEnergy"], 
       Entity["PhysicalQuantity", "MechanicalWork"], 
       Entity["PhysicalQuantity", "MomentOfForce"], 
       Entity["PhysicalQuantity", "NoiseSpectralDensity"], 
       Entity["PhysicalQuantity", "NuclearEnergy"], 
       Entity["PhysicalQuantity", "ParticleWidth"], 
       Entity["PhysicalQuantity", "PhotonEnergy"], 
       Entity["PhysicalQuantity", "PotentialEnergy"], 
       Entity["PhysicalQuantity", "PulsarLuminosity"], 
       Entity["PhysicalQuantity", "RadiantEnergy"], 
       Entity["PhysicalQuantity", "RadioLuminosity"], 
       Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
       Entity["PhysicalQuantity", "RotationalEnergy"], 
       Entity["PhysicalQuantity", "SecondIonizationEnergy"], 
       Entity["PhysicalQuantity", "SoundEnergy"], 
       Entity[
       "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
       Entity["PhysicalQuantity", "Tempergy"], 
       Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
       Entity["PhysicalQuantity", "ThermodynamicWork"], 
       Entity["PhysicalQuantity", "ThirdIonizationEnergy"], 
       Entity["PhysicalQuantity", "Torque"], 
       Entity["PhysicalQuantity", "VacuumEnergy"], 
       Entity["PhysicalQuantity", "VirtualWork"], 
       Entity["PhysicalQuantity", "ViscousDragTorque"], 
       Entity["PhysicalQuantity", "Work"], 
       Entity["PhysicalQuantity", "WorkFunction"]}, {{{1, 2}, {3, 2}, {4, 
       2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {12, 
       2}, {13, 2}, {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20,
        2}, {21, 2}, {22, 2}, {23, 2}, {24, 2}, {25, 2}, {26, 2}, {27, 2}, {
       28, 2}, {29, 2}, {30, 2}, {31, 2}, {32, 2}, {33, 2}, {34, 2}, {35, 
       2}, {36, 2}, {37, 2}, {38, 39}, {40, 2}, {41, 2}, {42, 2}, {43, 44}, {
       45, 2}, {46, 44}, {47, 2}, {48, 2}, {49, 44}, {50, 2}, {51, 2}, {52, 
       53}, {54, 55}, {56, 2}, {57, 55}, {58, 2}, {59, 2}, {60, 2}, {61, 2}, {
       62, 44}, {63, 2}, {64, 2}, {65, 44}, {66, 2}, {67, 2}, {68, 2}, {69, 
       2}, {70, 2}, {71, 44}, {72, 2}, {73, 2}, {74, 2}, {75, 2}, {76, 2}, {
       77, 2}, {78, 2}, {79, 2}, {80, 2}, {81, 2}, {82, 2}, {83, 39}, {84, 
       85}, {86, 2}, {87, 2}, {88, 2}, {89, 44}, {90, 39}, {91, 2}, {92, 2}, {
       93, 53}, {94, 2}, {95, 39}, {96, 2}, {97, 39}, {98, 2}, {99, 2}, {100, 
       2}, {101, 2}, {102, 39}, {103, 2}, {104, 2}, {105, 2}, {106, 2}, {107, 
       44}, {108, 2}, {109, 2}, {110, 44}, {111, 2}, {112, 2}}, Null}, {
      VertexLabels -> {
         Placed["Name", Tooltip]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.02136445664264971], 
        ArrowBox[CompressedData["
1:eJx1lmdUFMYWx7dRjpSliHQkFKUJ6rKoEZkJgigBCwrGSBA4okgCgkBYDZYg
eaFEQFSK9BZ4yHMfJTxaZPEAClHKhqpIWfouUmQXFtyF5wfJB2/yYT7M+Z17
557/zP3f+cz7sosPmUAg+H1YpI+L3SZzJsGGjI2Sj8n/eZLMSrN5cndSJEQ5
o/FkPktYT3rLtvspfR0Z7CiJ3vGMAnhYg0dgKHsVLd2PWXS0hFyXXhdmRpXA
nO8cSjVH3tV/ynUe15hnakvgXwvD84tJ84APZvY3MQkEvEOHO6RtKwC8iE1Y
oSUI0fBcfaKWHgdwJ6VLNP37gyjuZOpAb+k64EwjwyHJZi56bH9I6MgggvpX
TKP4Bc5ilFLz5gtCJaxPQ2iRlRs3jMzODeUl3VsFXFWV02zDWUaB0g6ZblW9
gKdIKdV65xLxXseuzs5iqA/RwmNivH0eMVfztHgn/uZ+4h0iQ/eRcISQmf5H
Ig/EH9jqc63Wh4iLyJcSes9AfYIYDwx0E4WI//rhvFUjCeT3qH3WZD+9jkJo
DHkT8TiIPxXZepZcsYg83fespd2B+pTv0jspnUnANl+5uJ0Pgfr0PL/wC+Ub
MVK4+j9Wy71BwCnt0mlqSnz0dY7uFuNoCVAf3vzKMm2GjBf/TLs+NSQG8dyA
/hA3SQrmPv+1IFmOC3gTP9xUpLaE3Nco9stHpgA36NPKXXNZQFhGVd8/B+qr
J186SDEj4JCuhruN7fD9tLe2iTspM6jDY0++SfoIiF9a6ZYeCOIjT78V07Vj
fYDvLtWfSCCQ8X+OeVoUXiSA/EW0ZXaojxjNhPYbe5dBfboMXsVoZPUh2kH1
VZEPH+RnX4t6XiuYR/kax50u+8P6hxMvXwnf3YsCFp996WsvBPFuuqFNExar
SDT8Ti2FDc/PlCvo1WrhIStzdvnpndAfQvsXNE80UrGCEoqODu6t72DIlsaM
K2KiF2HvceZi/VyXeJuf1QLKptyNpeMhcH6qjo0tP5GIo5L9KQfjYP4alRhP
SbsFVJP/la+vAPKOH64XHN/8Hl2pnZflJqiwFG6Hmr9MEKBwszXJC+2KrFam
1PYpxjRyOiSZ02mzCM7fot1wdXTbPEof5E7eT4TxxdelYlvOULCStEjX8RHU
t8Gn8cuGEg5y/0NyVI44A/Lnku945ReRsEZBpspTdUWQ/8io7AEncwn8LaFX
8XND+D7oIu05geskMliZyesfnwD5/+uhUVncKoOrk5ia3gEKrJLgkqCCD/pv
7De45WL3wBds6b/4xv4eeVp2L2UcabndabXKgeeHG7Wcch1X+cf4qVTrmmS7
9+jjOwP1iX4b1KbGEvCL0jWdTX1QH1uTbPsQn2kkfdZafZfqLOD15dmpEi9J
eKpZcVvCqzHA25IYOqKVQfSCNCQ/w1YG+oZPOOAx/Tnke3PYYFMl1O9kz/6l
mFAR2mmMv/OKg/yxWOm81ct1pHKVk6LEkAP55coT8ySp71B62iR9ahr611ZX
+bSRvGV00Xjpd1471NfSk73zX+rz6LhfUsm52QUQbxfgFNwYuYBsz9LfBLbC
/k0Imw+6GyxGssvDGRkUOF+GpwIGODcFqKIpjr4nSwbUr5EyVn2jWwKr8qLZ
7m9FIP9RnrNe1dd8ZLBVrcz/MJwvLaajflaXSTizypVhsglyI0/nXUFqQ8hV
LVhzqBnOl7Xg0v3nf6RgIy5N2z4UzpfkJMOWigOrqLGjLuvo6t/4/859zB5/
Am4bk+VLU6G+NfEt2b69RMxJborVH4D3o2uWoVDhzUNh6sHVC7RlwAOpEVnf
V46jQ6/lbu0/A+OvxYhn6Z3LSP82MRoJ4f25H5Sy1h5VxgMf++NTf+Sa8k67
jivjPhr/cF7wZlbX6R5mcSv1r71DBt+2BpHxVUahUPUE1K9yr9SFN5MjSHnx
XGfaLPSnR++pmpxLfPTc8KCL+y34f9iYD/aRKXZtn0F/isgQzAZ86H+9Gpss
VsEiqP9avUx7epMIWepbHRiJgPqXnjgqcji0jD5/rRxg/gDOlw1/+Sf/Siqq
r/p9iYSL2k0aAwvh/MsLafgx7IO/JbGCXvrUwfq+15vT0RNJYLuWsp+vTMP/
5/bV/cKbk8o40qXF5OFTAuvT+FhR2KXwsUnkElzV27IHvs+8cDnV7jckLJdn
+W+6xgr8vx7uiNY/NYqeMKtrnXbD+VPwRBRcaUzAUaHuhj9bD8D/k4X0I8cO
KhZUOUXUP4P1hczuar7j1YcWfonq626A/Wt37MaNxjoBKrY6YpEqgP7Q42y9
+q3uFPrNd7/JN1zYv6KZp7n3LlKwc9X2dSmJJZD/weTbfVqMCXTBq7tU4zb0
x7gfkMGwgIDzl9z5U/vg+arlTO9u2gw6bDRZEXYW/u+zB2xf9VcTsQPvVp/z
C+jvvHhDnz6xBC4bvl9Hp0P95Qrj1x9SOcjfeQttWxms//8k/JcB
         "], 0.04368261888403377]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[
         TooltipBox[
          DiskBox[{2.405548759148453, -2.415929900936039}, 
           0.04368261888403377],
          TemplateBox[{"\"acoustic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcousticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AcousticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.5617442792026057, -1.547107709802937}, 
           0.04368261888403377],
          
          TemplateBox[{"1", "\"J\"", "joule", "\"Joules\""}, "Quantity", 
           SyntaxForm -> Mod]],
         Annotation[#, 
          Quantity[1, "Joules"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.9757130325731969, -2.597254825179009}, 
           0.04368261888403377],
          TemplateBox[{"\"atomic binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AtomicBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.6763815297564102, -2.5255335833231767}, 
           0.04368261888403377],
          TemplateBox[{"\"atomic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AtomicEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AtomicEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AtomicEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.6324090341864945, -1.179958050247301}, 
           0.04368261888403377],
          TemplateBox[{"\"binding energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BindingEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.639461865493799, -1.0006510186453652}, 
           0.04368261888403377],
          TemplateBox[{"\"biogas energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BiogasEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BiogasEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BiogasEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.000335260108712, -1.3286417719517758}, 
           0.04368261888403377],
          TemplateBox[{"\"bond energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"BondEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BondEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BondEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.5352058149993955, -0.566664015408147}, 
           0.04368261888403377],
          TemplateBox[{"\"elastic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.47779159565496765, -1.9809187523980856}, 
           0.04368261888403377],
          TemplateBox[{"\"electromagnetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectromagneticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectromagneticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectromagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8366731985381842, -2.183736743588006}, 
           0.04368261888403377],
          TemplateBox[{"\"energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Energy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Energy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Energy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.8314570953395999, -1.0444338391204493}, 
           0.04368261888403377],
          TemplateBox[{"\"equivalent energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"EquivalentEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"EquivalentEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "EquivalentEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.5174115285042291, -1.6610323334952666}, 
           0.04368261888403377],
          TemplateBox[{"\"excitation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ExcitationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExcitationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ExcitationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4927356499551416, -0.3706261201551859}, 
           0.04368261888403377],
          TemplateBox[{"\"Fermi energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FermiEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"FermiEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FermiEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.2042898764493195, -1.1667040058570262}, 
           0.04368261888403377],
          TemplateBox[{"\"fundamental temperature\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FundamentalTemperature\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FundamentalTemperature\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FundamentalTemperature"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0507563589807776, -2.4149992215673914}, 
           0.04368261888403377],
          TemplateBox[{"\"geothermal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GeothermalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"GeothermalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GeothermalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.278056176599308, -0.8616693554211141}, 
           0.04368261888403377],
          TemplateBox[{"\"gravitational binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalBindingEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalBindingEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.174673992358207, -0.5734670467864946}, 
           0.04368261888403377],
          TemplateBox[{"\"magnetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MagneticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.5356751851136574, -2.345807914472511}, 
           0.04368261888403377],
          TemplateBox[{"\"mass energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MassEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MassEnergyEquivalent\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MassEnergyEquivalent"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.9944513059415026, -0.6871538431747539}, 
           0.04368261888403377],
          TemplateBox[{"\"massergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Massergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Massergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Massergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2314485154713752, -1.034572594673385}, 
           0.04368261888403377],
          TemplateBox[{"\"nuclear binding energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"NuclearBindingEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"NuclearBindingEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearBindingEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0771643156824324, -1.6534160015048793}, 
           0.04368261888403377],
          TemplateBox[{"\"ponderomotive energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"PonderomotiveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PonderomotiveEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PonderomotiveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.835209415858619, -0.47777026958455426}, 
           0.04368261888403377],
          TemplateBox[{"\"reaction energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ReactionEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ReactionEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ReactionEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2544179969817728, -2.6919728974063846}, 
           0.04368261888403377],
          TemplateBox[{"\"resonance energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ResonanceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ResonanceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ResonanceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.490530407815214, -1.8671650797452883}, 
           0.04368261888403377],
          TemplateBox[{"\"seismic energy equivalent\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SeismicEnergyEquivalent\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeismicEnergyEquivalent\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeismicEnergyEquivalent"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.503094590077912, -0.8141592250233576}, 
           0.04368261888403377],
          TemplateBox[{"\"separation energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SeparationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"SeparationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SeparationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.3810998629335682, -0.7590290401494246}, 
           0.04368261888403377],
          TemplateBox[{"\"solar energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SolarEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"SolarEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SolarEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0827623684431353, -0.8634553609229911}, 
           0.04368261888403377],
          TemplateBox[{"\"surface energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SurfaceEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SurfaceEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SurfaceEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0214936635764085, -2.22644914505741}, 
           0.04368261888403377],
          TemplateBox[{"\"tidal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TidalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TidalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TidalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8755884129698986, -0.5503133017873214}, 
           0.04368261888403377],
          TemplateBox[{"\"total energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"TotalEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"TotalEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "TotalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2777977318906983, -0.3798823766170809}, 
           0.04368261888403377],
          TemplateBox[{"\"vibrational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VibrationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VibrationalEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VibrationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.375276372875441, -2.0506118489519936}, 
           0.04368261888403377],
          TemplateBox[{"\"water energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaterEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.8372705689282416, -2.7121012944687575}, 
           0.04368261888403377],
          TemplateBox[{"\"wave energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WaveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.3847109180429247, -1.2748994607429267}, 
           0.04368261888403377],
          TemplateBox[{"\"wind energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WindEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WindEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0599935372662697, -2.1784349405237027}, 
           0.04368261888403377],
          TemplateBox[{"\"zero\[Hyphen]point energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ZeroPointEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ZeroPointEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ZeroPointEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.36245642829298497, -1.5169451675603471}, 
           0.04368261888403377],
          TemplateBox[{"\"amount of heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Heat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Heat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Heat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.6366946900543744, -2.7278291653748266}, 
           0.04368261888403377],
          TemplateBox[{"\"heat gain\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatGain\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatGain\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatGain"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8682998859225568, -2.5236047791020395}, 
           0.04368261888403377],
          TemplateBox[{"\"heat loss\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HeatLoss\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"HeatLoss\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HeatLoss"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.970857828443679, -0.366426834134729}, 
           0.04368261888403377],
          TemplateBox[{"\"power spectral density\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"PowerSpectralDensity\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"PowerSpectralDensity\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PowerSpectralDensity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.474161878954149, -1.2303011119420832}, 
           0.04368261888403377],
          TemplateBox[{"1", 
            
            RowBox[{"\"W\"", "\[InvisibleSpace]", "\"/\"", 
              "\[InvisibleSpace]", "\"Hz\""}], "watt per hertz", 
            FractionBox["\"Watts\"", "\"Hertz\""]}, "Quantity", SyntaxForm -> 
           Mod]],
         Annotation[#, 
          Quantity[1, "Hertz"^(-1) "Watts"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0757848284823088, -0.4882940161661029}, 
           0.04368261888403377],
          TemplateBox[{"\"active energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ActiveEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ActiveEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ActiveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.1967549491126417, -2.5694637628502655}, 
           0.04368261888403377],
          TemplateBox[{"\"adiabatic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AdiabaticWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0791076441831664, -2.619828047948059}, 
           0.04368261888403377],
          TemplateBox[{"\"alpha disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AlphaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AlphaDisintegrationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AlphaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.692459722944239, -5.391517831986549}, 
           0.04368261888403377],
          TemplateBox[{"\"applied moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"AppliedMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AppliedMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "AppliedMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.3478519263082411, -4.452537640822921}, 
           0.04368261888403377],
          TemplateBox[{"1", 
            RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}], "meter newton", 
            RowBox[{"\"Meters\"", " ", "\"Newtons\""}]}, "Quantity", 
           SyntaxForm -> Mod]],
         Annotation[#, 
          Quantity[1, "Meters" "Newtons"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7960091364197919, -1.2028366365451744}, 
           0.04368261888403377],
          TemplateBox[{"\"battery energy capacity\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BatteryEnergyCapacity\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BatteryEnergyCapacity\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BatteryEnergyCapacity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0094942813901233, -5.3931461560347564}, 
           0.04368261888403377],
          TemplateBox[{"\"bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"BendingMomentOfForce\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BendingMomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.5438414441739114, -2.20863748330249}, 
           0.04368261888403377],
          TemplateBox[{"\"beta disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"BetaDisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"BetaDisintegrationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "BetaDisintegrationEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.5835882644488991, -0.8751286920654411}, 
           0.04368261888403377],
          TemplateBox[{"\"chemical energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ChemicalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ChemicalEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ChemicalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3323447819861522, -4.2751544359282665}, 
           0.04368261888403377],
          TemplateBox[{"\"cogging torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"CoggingTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"CoggingTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "CoggingTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.6476063508565955, -2.0181771653879443}, 
           0.04368261888403377],
          TemplateBox[{"\"disintegration energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"DisintegrationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"DisintegrationEnergy\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "DisintegrationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7292432470566214, -0.7155578805611964}, 
           0.04368261888403377],
          TemplateBox[{"\"elastic potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElasticPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElasticPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElasticPotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.473958418540711, -4.1077961278839945}, 
           0.04368261888403377],
          TemplateBox[{"\"electrical energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectricalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectricalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.4742639314180614, -4.1077961278839945}, 
           0.04368261888403377],
          TemplateBox[{"1", 
            RowBox[{"\"s\"", "\[ThinSpace]", "\"W\""}], "second watt", 
            RowBox[{"\"Seconds\"", " ", "\"Watts\""}]}, "Quantity", 
           SyntaxForm -> Mod]],
         Annotation[#, 
          Quantity[1, "Seconds" "Watts"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.473958418540711, -3.102664685515629}, 
           0.04368261888403377],
          TemplateBox[{"\"electric apparent energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectricApparentEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectricApparentEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectricApparentEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.4742639314180614, -3.102664685515629}, 
           0.04368261888403377],
          TemplateBox[{"1", 
            
            RowBox[{"\"s\"", "\[ThinSpace]", "\"A\"", "\[ThinSpace]", 
              "\"V\""}], "second ampere volt", 
            RowBox[{"\"Amperes\"", " ", "\"Seconds\"", " ", "\"Volts\""}]}, 
           "Quantity", SyntaxForm -> Mod]],
         Annotation[#, 
          Quantity[1, "Amperes" "Seconds" "Volts"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.6567650081780009, -2.078717787206882}, 
           0.04368261888403377],
          TemplateBox[{"\"electric potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectricPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricPotentialEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectricPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.473958325174063, -3.102664685515629}, 
           0.04368261888403377],
          TemplateBox[{"\"electric reactive energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ElectricReactiveEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectricReactiveEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ElectricReactiveEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7042462611076363, -0.36245642829298497}, 
           0.04368261888403377],
          TemplateBox[{"\"enthalpy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Enthalpy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Enthalpy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Enthalpy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.067899926528069, -0.901372013604083}, 
           0.04368261888403377],
          TemplateBox[{"\"ergotropy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Ergotropy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Ergotropy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Ergotropy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7936345443607211, -0.9403310292135254}, 
           0.04368261888403377],
          TemplateBox[{"\"exhange integral\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ExchangeIntegral\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ExchangeIntegral\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ExchangeIntegral"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.350108337609043, -0.6516800635856415}, 
           0.04368261888403377],
          TemplateBox[{"\"exergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Exergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Exergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Exergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.48400786376656135, -4.9559786151518885}, 
           0.04368261888403377],
          TemplateBox[{"\"factored bending moment of force\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FactoredBendingMomentOfForce\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FactoredBendingMomentOfForce\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FactoredBendingMomentOfForce"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.9731312995420036, -0.709721633935243}, 
           0.04368261888403377],
          TemplateBox[{"\"first ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"FirstIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"FirstIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FirstIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7786969774728234, -0.7048804392118537}, 
           0.04368261888403377],
          TemplateBox[{"\"food energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FoodEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"FoodEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FoodEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.9876006993434703, -3.6836292213548725}, 
           0.04368261888403377],
          TemplateBox[{"\"friction torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"FrictionTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"FrictionTorque\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "FrictionTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.1286684407779746, -1.8696062188771299}, 
           0.04368261888403377],
          TemplateBox[{"\"Gibbs energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"GibbsEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"GibbsEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GibbsEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.477510076224753, -2.101523861002693}, 
           0.04368261888403377],
          TemplateBox[{"\"gravitational potential energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"GravitationalPotentialEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GravitationalPotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "GravitationalPotentialEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0062314898587035, -1.1206967107488204}, 
           0.04368261888403377],
          TemplateBox[{"\"Hamiltonian function\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"HamiltonianFunction\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HamiltonianFunction\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HamiltonianFunction"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.0949139121866134, -1.5494240418390324}, 
           0.04368261888403377],
          TemplateBox[{"\"Hamiltonian operator\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"HamiltonianOperator\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HamiltonianOperator\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HamiltonianOperator"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.8407148791079386, -2.3772537550238493}, 
           0.04368261888403377],
          TemplateBox[{"\"Helmholtz energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HelmholtzEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HelmholtzEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HelmholtzEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.3437222109483216, -3.4527420219607965}, 
           0.04368261888403377],
          TemplateBox[{"\"hysteresis torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"HysteresisTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"HysteresisTorque\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "HysteresisTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.72924561718811, -1.8079498504800477}, 
           0.04368261888403377],
          TemplateBox[{"\"internal energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"InternalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"InternalEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "InternalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.272148260117962, -2.285365477906355}, 
           0.04368261888403377],
          TemplateBox[{"\"ionization energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"IonizationEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"IonizationEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "IonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.3043030119492625, -2.254963817707064}, 
           0.04368261888403377],
          TemplateBox[{"\"kinetic energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"KineticEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"KineticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "KineticEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.48586683096573546, -1.04855261538025}, 
           0.04368261888403377],
          TemplateBox[{"\"Lagrangian function\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LagrangianFunction\""}],
               "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LagrangianFunction\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LagrangianFunction"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.5631794608621012, -1.6536303654417086}, 
           0.04368261888403377],
          TemplateBox[{"\"latent heat\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeat\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"LatentHeat\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeat"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.640064988832284, -0.8430550689577321}, 
           0.04368261888403377],
          TemplateBox[{"\"latent heat of condensation\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfCondensation\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfCondensation\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfCondensation"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.053632134373489, -2.007341295855986}, 
           0.04368261888403377],
          TemplateBox[{"\"latent heat of fusion\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LatentHeatOfFusion\""}],
               "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfFusion\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfFusion"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.2301800309669177, -1.8662448367917865}, 
           0.04368261888403377],
          TemplateBox[{"\"latent heat of phase transition\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfPhaseTransition\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfPhaseTransition\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfPhaseTransition"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8557987522593784, -1.4501816982388769}, 
           0.04368261888403377],
          TemplateBox[{"\"latent heat of solidification\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfSolidification\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfSolidification\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfSolidification"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.67852336076656, -1.8342852594484653}, 
           0.04368261888403377],
          TemplateBox[{"\"latent heat of vaporization\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"LatentHeatOfVaporization\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatentHeatOfVaporization\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LatentHeatOfVaporization"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.4885768256723666, -1.1231074668687107}, 
           0.04368261888403377],
          TemplateBox[{"\"level width\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LevelWidth\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"LevelWidth\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LevelWidth"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.971791208213144, -0.36245642829298474}, 
           0.04368261888403377],
          TemplateBox[{"\"load frequency shift\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"LoadFrequencyShift\""}],
               "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LoadFrequencyShift\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "LoadFrequencyShift"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.973958371857387, -5.11292757025236}, 0.04368261888403377],
          TemplateBox[{"\"magnetic domain wall energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MagneticDomainWallEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MagneticDomainWallEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MagneticDomainWallEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.973958371857387, -5.11292757025236}, 0.04368261888403377],
          TemplateBox[{"1", 
            RowBox[{
              SuperscriptBox["\"m\"", "4"], "\[InvisibleSpace]", 
              SuperscriptBox["\"T\"", "2"], "\[NegativeMediumSpace]", "\"/\"",
               "\[InvisibleSpace]", "\"H\""}], 
            "meter to the fourth tesla squared per henry", 
            FractionBox[
             RowBox[{
               SuperscriptBox["\"Meters\"", "4"], " ", 
               SuperscriptBox["\"Teslas\"", "2"]}], "\"Henries\""]}, 
           "Quantity", SyntaxForm -> Mod]],
         Annotation[#, 
          Quantity[1, "Henries"^(-1) "Meters"^4 "Teslas"^2], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.4061169844532375, -1.0197982514432893}, 
           0.04368261888403377],
          TemplateBox[{"\"maximum beta particle energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"MaximumBetaParticleEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"MaximumBetaParticleEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MaximumBetaParticleEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.5595538132418116, -2.241508136501929}, 
           0.04368261888403377],
          TemplateBox[{"\"mechanical energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MechanicalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.2758503968359303, -0.5781690222440199}, 
           0.04368261888403377],
          TemplateBox[{"\"mechanical work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MechanicalWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"MechanicalWork\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MechanicalWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.36245642829298497, -4.283013412293319}, 
           0.04368261888403377],
          TemplateBox[{"\"moment of force\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"MomentOfForce\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MomentOfForce\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "MomentOfForce"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.474055989972273, -1.2279669018277066}, 
           0.04368261888403377],
          TemplateBox[{"\"noise spectral density\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"NoiseSpectralDensity\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"NoiseSpectralDensity\\\"]\
\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NoiseSpectralDensity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.7982452476244064, -2.063906172003408}, 
           0.04368261888403377],
          TemplateBox[{"\"nuclear energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"NuclearEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"NuclearEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "NuclearEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.454658494539313, -2.697842464428871}, 
           0.04368261888403377],
          TemplateBox[{"\"particle width\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ParticleWidth\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ParticleWidth\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ParticleWidth"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{5.473958325174063, -4.1077961278839945}, 
           0.04368261888403377],
          TemplateBox[{"\"photon energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"PhotonEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PhotonEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PhotonEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.370479052876429, -1.2908790266783203}, 
           0.04368261888403377],
          TemplateBox[{"\"potential energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"PotentialEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"PotentialEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PotentialEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.473860753742501, -1.2334955239457819}, 
           0.04368261888403377],
          TemplateBox[{"\"pulsar luminosity\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"PulsarLuminosity\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"PulsarLuminosity\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "PulsarLuminosity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.7481119553306668, -1.3694939900129421}, 
           0.04368261888403377],
          TemplateBox[{"\"radiant energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RadiantEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadiantEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RadiantEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{4.9760741030318405, -2.095020612973089}, 
           0.04368261888403377],
          TemplateBox[{"\"radio luminosity\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RadioLuminosity\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadioLuminosity\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RadioLuminosity"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7466413555083745, -1.6386202265341194}, 
           0.04368261888403377],
          TemplateBox[{"\"relativistic kinetic energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"RelativisticKineticEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"RelativisticKineticEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RelativisticKineticEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.358316593264662, -1.568898831328798}, 
           0.04368261888403377],
          TemplateBox[{"\"rotational energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"RotationalEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"RotationalEnergy\
\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "RotationalEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.6040208522483765, -1.1997802098294268}, 
           0.04368261888403377],
          TemplateBox[{"\"second ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SecondIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SecondIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SecondIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.0203675328737796, -0.44119433067847824}, 
           0.04368261888403377],
          TemplateBox[{"\"sound energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"SoundEnergy\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"SoundEnergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "SoundEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{3.976704918086286, -2.097533243147263}, 
           0.04368261888403377],
          
          TemplateBox[{
           "\"spectral radiant flux (with respect to frequency)\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"SpectralRadiantFluxWithRespectToFrequency\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SpectralRadiantFluxWithRespectToFrequency\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity[
          "PhysicalQuantity", "SpectralRadiantFluxWithRespectToFrequency"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.3809542117594227, -1.797323079904171}, 
           0.04368261888403377],
          TemplateBox[{"\"tempergy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Tempergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Tempergy\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Tempergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{1.3585858288906403, -2.4949210828989026}, 
           0.04368261888403377],
          TemplateBox[{"\"thermodynamic free energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThermodynamicFreeEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThermodynamicFreeEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicFreeEnergy"], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7539577376759847, -2.3644355105762664}, 
           0.04368261888403377],
          TemplateBox[{"\"thermodynamic work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermodynamicWork\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThermodynamicWork\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThermodynamicWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.5505745616661653, -1.376228329372242}, 
           0.04368261888403377],
          TemplateBox[{"\"third ionization energy\"", 
            RowBox[{"Entity", "[", 
              
              RowBox[{"\"PhysicalQuantity\"", ",", 
                "\"ThirdIonizationEnergy\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThirdIonizationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ThirdIonizationEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.7021618968421871, -3.6890157597774076}, 
           0.04368261888403377],
          TemplateBox[{"\"torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Torque\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Torque\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Torque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.1200564224122393, -2.4032763567800703}, 
           0.04368261888403377],
          TemplateBox[{"\"vacuum energy\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VacuumEnergy\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VacuumEnergy\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VacuumEnergy"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.8813273360698045, -1.9598309580346882}, 
           0.04368261888403377],
          TemplateBox[{"\"virtual work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"VirtualWork\""}], "]"}],
             "\"Entity[\\\"PhysicalQuantity\\\", \\\"VirtualWork\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "VirtualWork"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.2157475520758254, -4.9495157078443475}, 
           0.04368261888403377],
          TemplateBox[{"\"viscous drag torque\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"ViscousDragTorque\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ViscousDragTorque\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "ViscousDragTorque"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{2.748947897156531, -1.5754907003848015}, 
           0.04368261888403377],
          TemplateBox[{"\"work\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"Work\""}], "]"}], 
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Work\\\"]\"", 
            "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "Work"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          DiskBox[{0.5644049636295861, -1.418493461188372}, 
           0.04368261888403377],
          TemplateBox[{"\"work function\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkFunction\""}], 
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WorkFunction\\\"]\"", "\"physical quantity\""}, "Entity"]],
         Annotation[#, 
          Entity["PhysicalQuantity", "WorkFunction"], "Tooltip"]& ]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.8774352850054584`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"9c4bd79e-3bcd-492f-9df8-b5ddfdeca857"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Dataset", "[", 
    RowBox[{"SimplifiedPhysicalQuantityDataWithDimensionalProductAdded", "[", 
     RowBox[{"PhysicalQuantity", "[", "#", "]"}], "]"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
   "\"\<LevelWidth\>\"", ",", "\"\<PulsarLuminosity\>\"", ",", 
    "\"\<FrictionTorque\>\"", ",", "\"\<ElectricReactiveEnergy\>\"", ",", 
    "\"\<PhotonEnergy\>\"", ",", "\"\<MagneticDomainWallEnergy\>\""}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.877435307845462*^9, 3.8774353712145967`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"d7949183-4621-4a99-b6f6-4e0582b29113"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "level width", "SIUnit" -> Quantity[1, "Joules"], 
         "SIBaseUnit" -> Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[123.20000000000002`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[123.20000000000002`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Joules"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["level width", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", "\"J\""}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{320., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{320., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "pulsar luminosity", "SIUnit" -> 
         Quantity[1, "Hertz"^(-1) "Watts"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[190.4], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Hertz"^(-1) "Watts"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[190.4], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Hertz"^(-1) "Watts"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["pulsar luminosity", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{190.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    
                    RowBox[{
                    "\"W\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"Hz\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{387., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{387., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "friction torque", "SIUnit" -> 
         Quantity[1, "Meters" "Newtons"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[168.00000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Meters" "Newtons"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[168.00000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Meters" "Newtons"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["friction torque", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    With[{
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{364., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{364., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "electric reactive energy", "SIUnit" -> 
         Quantity[1, "Amperes" "Seconds" "Volts"], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[268.8], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Amperes" "Seconds" "Volts"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[268.8], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Amperes" "Seconds" "Volts"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["electric reactive energy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{268.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    
                    RowBox[{
                    "\"s\"", "\[ThinSpace]", "\"A\"", "\[ThinSpace]", 
                    "\"V\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{465., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{465., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "photon energy", "SIUnit" -> Quantity[1, "Seconds" "Watts"],
          "SIBaseUnit" -> Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[145.60000000000002`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Seconds" "Watts"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[145.60000000000002`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Seconds" "Watts"]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["photon energy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"s\"", "\[ThinSpace]", "\"W\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{342., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{342., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "Name" -> "magnetic domain wall energy", "SIUnit" -> 
         Quantity[1, "Henries"^(-1) "Meters"^4 "Teslas"^2], "SIBaseUnit" -> 
         Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)], 
         "CanonicalDimensionalProduct" -> Row[{
            Superscript["T", -2], 
            Superscript["L", 2], 
            Superscript["M", 1]}]|>, "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Henries"^(-1) "Meters"^4 "Teslas"^2]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"Name"} -> 
          TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"SIUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {"SIBaseUnit"} -> 
          TypeSystem`PackageScope`AtomShape[75], {
           "CanonicalDimensionalProduct"} -> 
          TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
       TypeSystem`Struct[{
         "Name", "SIUnit", "SIBaseUnit", "CanonicalDimensionalProduct"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[
           Quantity[1, "Henries"^(-1) "Meters"^4 "Teslas"^2]], 
          TypeSystem`Atom[
           Quantity[1, "Kilograms" "Meters"^2 "Seconds"^(-2)]], 
          TypeSystem`AnyType}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["magnetic domain wall energy", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIUnit", 
                    Style[
                    "SIUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{
                    SuperscriptBox["\"m\"", "4"], "\[InvisibleSpace]", 
                    SuperscriptBox["\"T\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", "\"H\""}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["SIBaseUnit", 
                    Style[
                    "SIBaseUnit", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SIBaseUnit"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes[
                  RowBox[{"1", 
                    RowBox[{"\"kg\"", "\[ThinSpace]", 
                    SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"s\"", "2"]}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["SIBaseUnit"]}, "Item", False], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["CanonicalDimensionalProduct", 
                    Style[
                    "CanonicalDimensionalProduct", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["CanonicalDimensionalProduct"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 Row[{
                   Superscript["T", -2], 
                   Superscript["L", 2], 
                   Superscript["M", 1]}], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["CanonicalDimensionalProduct"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{499., {59.634033098001964`, 65.36596690199804}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{499., {59.634033098001964`, 65.36596690199804}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.877435312375723*^9, 3.8774353724953327`*^9}},
 CellLabel->"Out[95]=",ExpressionUUID->"e0d1244c-dda9-487f-b08b-0c1627fb1ff9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Find a unique ID", "Subsection",
 CellChangeTimes->{{3.877435382119619*^9, 
  3.8774354038379965`*^9}},ExpressionUUID->"f03dc1de-fcbb-4b15-9635-\
339b415bfc6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SimplifiedPhysicalQuantityDataWithDimensionalProductAdded", "[", 
     RowBox[{"PhysicalQuantity", "[", "#", "]"}], "]"}], "[", 
    "\"\<SIUnit\>\"", "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
   "\"\<LevelWidth\>\"", ",", "\"\<PulsarLuminosity\>\"", ",", 
    "\"\<FrictionTorque\>\"", ",", "\"\<ElectricReactiveEnergy\>\"", ",", 
    "\"\<PhotonEnergy\>\"", ",", "\"\<MagneticDomainWallEnergy\>\""}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.877435307845462*^9, 3.877435417321086*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"7b596674-f80a-4798-b70d-9dc387d83366"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"1", "\"J\"", "joule", "\"Joules\""},
    "Quantity"], ",", 
   TemplateBox[{"1", 
     RowBox[{
      "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}], 
     "watt per hertz", 
     FractionBox["\"Watts\"", "\"Hertz\""]},
    "Quantity"], ",", 
   TemplateBox[{"1", 
     RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}], "meter newton", 
     RowBox[{"\"Meters\"", " ", "\"Newtons\""}]},
    "Quantity"], ",", 
   TemplateBox[{"1", 
     RowBox[{"\"s\"", "\[ThinSpace]", "\"A\"", "\[ThinSpace]", "\"V\""}], 
     "second ampere volt", 
     RowBox[{"\"Amperes\"", " ", "\"Seconds\"", " ", "\"Volts\""}]},
    "Quantity"], ",", 
   TemplateBox[{"1", 
     RowBox[{"\"s\"", "\[ThinSpace]", "\"W\""}], "second watt", 
     RowBox[{"\"Seconds\"", " ", "\"Watts\""}]},
    "Quantity"], ",", 
   TemplateBox[{"1", 
     RowBox[{
       SuperscriptBox["\"m\"", "4"], "\[InvisibleSpace]", 
       SuperscriptBox["\"T\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
       "\[InvisibleSpace]", "\"H\""}], 
     "meter to the fourth tesla squared per henry", 
     FractionBox[
      RowBox[{
        SuperscriptBox["\"Meters\"", "4"], " ", 
        SuperscriptBox["\"Teslas\"", "2"]}], "\"Henries\""]},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{{3.877435394337143*^9, 3.8774354182423954`*^9}},
 CellLabel->"Out[97]=",ExpressionUUID->"0086b321-a02b-4a31-93d3-e71324260393"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<LevelWidth\>\"", ",", "\"\<PulsarLuminosity\>\"", ",", 
     "\"\<FrictionTorque\>\"", ",", "\"\<ElectricReactiveEnergy\>\"", ",", 
     "\"\<PhotonEnergy\>\"", ",", "\"\<MagneticDomainWallEnergy\>\""}], "}"}],
    "->", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
       "SimplifiedPhysicalQuantityDataWithDimensionalProductAdded", "[", 
        RowBox[{"PhysicalQuantity", "[", "#", "]"}], "]"}], "[", 
       "\"\<SIUnit\>\"", "]"}], "&"}], "/@", 
     RowBox[{"{", 
      RowBox[{
      "\"\<LevelWidth\>\"", ",", "\"\<PulsarLuminosity\>\"", ",", 
       "\"\<FrictionTorque\>\"", ",", "\"\<ElectricReactiveEnergy\>\"", ",", 
       "\"\<PhotonEnergy\>\"", ",", "\"\<MagneticDomainWallEnergy\>\""}], 
      "}"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8774354222570744`*^9, 3.877435434269273*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"4889e0b6-683f-4691-a3dc-19e20152f742"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"LevelWidth\"\>", "\[Rule]", 
    TemplateBox[{"1", "\"J\"", "joule", "\"Joules\""},
     "Quantity"]}], ",", 
   RowBox[{"\<\"PulsarLuminosity\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
       "\"W\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"Hz\""}],
       "watt per hertz", 
      FractionBox["\"Watts\"", "\"Hertz\""]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"FrictionTorque\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"m\"", "\[ThinSpace]", "\"N\""}], "meter newton", 
      RowBox[{"\"Meters\"", " ", "\"Newtons\""}]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"ElectricReactiveEnergy\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"s\"", "\[ThinSpace]", "\"A\"", "\[ThinSpace]", "\"V\""}], 
      "second ampere volt", 
      RowBox[{"\"Amperes\"", " ", "\"Seconds\"", " ", "\"Volts\""}]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"PhotonEnergy\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{"\"s\"", "\[ThinSpace]", "\"W\""}], "second watt", 
      RowBox[{"\"Seconds\"", " ", "\"Watts\""}]},
     "Quantity"]}], ",", 
   RowBox[{"\<\"MagneticDomainWallEnergy\"\>", "\[Rule]", 
    TemplateBox[{"1", 
      RowBox[{
        SuperscriptBox["\"m\"", "4"], "\[InvisibleSpace]", 
        SuperscriptBox["\"T\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
        "\[InvisibleSpace]", "\"H\""}], 
      "meter to the fourth tesla squared per henry", 
      FractionBox[
       RowBox[{
         SuperscriptBox["\"Meters\"", "4"], " ", 
         SuperscriptBox["\"Teslas\"", "2"]}], "\"Henries\""]},
     "Quantity"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8774354348160467`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"43004496-265e-49ad-be42-105f8abf7985"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Rule", "@@@", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"PhysicalQuantityData", "[", "]"}], ",", 
         RowBox[{"EntityValue", "[", 
          RowBox[{
           RowBox[{"PhysicalQuantityData", "[", "]"}], ",", 
           RowBox[{"EntityProperty", "[", 
            RowBox[{"\"\<PhysicalQuantity\>\"", ",", "\"\<SIUnit\>\""}], 
            "]"}]}], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_Missing"}], "}"}]}], "]"}]}], ",", 
   RowBox[{"VertexLabels", "->", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877435519148658*^9, 3.8774355218691397`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"0d32d9c9-02b9-49b1-8613-04578edc5734"],

Cell[BoxData[
 DynamicModuleBox[{Progress`ProgressDump`forceRedraw$$ = {{}, {}}, 
  Progress`ProgressDump`open$$ = True, Progress`ProgressDump`clock$$ = 2, 
  Progress`ProgressDump`maxTime$$ = DirectedInfinity[1]}, 
  OverlayBox[{
   AnimatorBox[Dynamic[Progress`ProgressDump`clock$$], {2., 
     DirectedInfinity[1], 0.4},
    AnimationRate->1,
    AnimationRunTime->0.,
    AppearanceElements->None,
    ImageSize->{1, 1}], 
   DynamicWrapperBox[
    DynamicBox[ToBoxes[
      Progress`GenerateProgressPanel[<|
       "ItemAction" :> "Downloading", "ItemCurrent" :> 
        EntityFramework`BatchDownload`Private`next$490746, "ItemName" :> 
        "values", "ItemTotal" :> 2938|>, <|{
        "DelayedTask" -> ScheduledTaskObject[324, 
           HoldForm[AppendTo[Progress`ProgressDump`this$state$490748, 
              Progress`ProgressDump`CreateProgressState[
              Progress`ProgressDump`parameters$490748, 
               Progress`ProgressDump`info$490748]]; 
            Progress`ProgressDump`ProgressInit[
             Progress`ProgressDump`this$state$490748]; Null], {2, 1}, 
           Automatic, True, "AutoRemove" -> False, "EpilogFunction" :> Null, 
           "TaskGroup" -> "Global`"], "State" :> 
         Progress`ProgressDump`this$state$490748, "Title" -> "Computing...", 
         "Type" -> "Panel", "Environment" -> "Notebook", 
         "Parameters" -> <|
          "ItemAction" :> "Downloading", "ItemCurrent" :> 
           EntityFramework`BatchDownload`Private`next$490746, "ItemName" :> 
           "values", "ItemTotal" :> 2938|>, "PreemptibleQ" -> True, 
         "ConsoleQ" -> True, "Evaluator" -> "Local", "EvaluationCell" -> 
         CellObject[
          "0d32d9c9-02b9-49b1-8613-04578edc5734", 
           "aea2e395-bad5-4248-9e9a-d2c1a2423fba"], "TimeStart" -> 
         3.8774175232021531`17.341117557837947*^9, "TimeStartLocal" -> 
         3.8774175232021531`17.341117557837947*^9, "InitialTimeEstimate" -> 
         Indeterminate, "UpdateInterval" -> 0.4, "OuterUpdateInterval" -> 0.4,
          "Buttons" -> None, "Optional" -> {}, "ContainerQ" -> False, 
         "CreateContainerQ" -> False, "CurrentContainer" -> None, 
         "PreviousContainer" -> None, "ContainerName" -> None, "Cell" -> 
         Hold[Progress`ProgressDump`cell$492014], "Clock" :> 
         Dynamic[Progress`ProgressDump`clock$$], "Redraw" -> 
         Progress`ProgressDump`forceRedraw$$, "Open" :> 
         Dynamic[Progress`ProgressDump`open$$]}|>], StandardForm],
     ImageSizeCache->{352., {12.900390625, 19.099609375}},
     TrackedSymbols:>{Progress`ProgressDump`forceRedraw$$}], Refresh[
    Progress`ProgressDump`forceRedraw$$ = 
     With[{Progress`ProgressDump`values = Quiet[
          
          Values[<|"ItemAction" :> "Downloading", "ItemCurrent" :> 
            EntityFramework`BatchDownload`Private`next$490746, "ItemName" :> 
            "values", "ItemTotal" :> 2938|>]]}, 
       Map[
       Position[Progress`ProgressDump`values, #, Infinity]& , {
        None, Automatic}]], UpdateInterval -> 
     Lookup[<|"DelayedTask" -> ScheduledTaskObject[324, 
          HoldForm[AppendTo[Progress`ProgressDump`this$state$490748, 
             Progress`ProgressDump`CreateProgressState[
             Progress`ProgressDump`parameters$490748, 
              Progress`ProgressDump`info$490748]]; 
           Progress`ProgressDump`ProgressInit[
            Progress`ProgressDump`this$state$490748]; Null], {2, 1}, 
          Automatic, True, "AutoRemove" -> False, "EpilogFunction" :> Null, 
          "TaskGroup" -> "Global`"], "State" :> 
        Progress`ProgressDump`this$state$490748, "Title" -> "Computing...", 
        "Type" -> "Panel", "Environment" -> "Notebook", 
        "Parameters" -> <|
         "ItemAction" :> "Downloading", "ItemCurrent" :> 
          EntityFramework`BatchDownload`Private`next$490746, "ItemName" :> 
          "values", "ItemTotal" :> 2938|>, "PreemptibleQ" -> True, "ConsoleQ" -> 
        True, "Evaluator" -> "Local", "EvaluationCell" -> 
        CellObject[
         "0d32d9c9-02b9-49b1-8613-04578edc5734", 
          "aea2e395-bad5-4248-9e9a-d2c1a2423fba"], "TimeStart" -> 
        3.8774175232021531`17.341117557837947*^9, "TimeStartLocal" -> 
        3.8774175232021531`17.341117557837947*^9, "InitialTimeEstimate" -> 
        Indeterminate, "UpdateInterval" -> 0.4, "OuterUpdateInterval" -> 0.4, 
        "Buttons" -> None, "Optional" -> {}, "ContainerQ" -> False, 
        "CreateContainerQ" -> False, "CurrentContainer" -> None, 
        "PreviousContainer" -> None, "ContainerName" -> None, "Cell" -> 
        Hold[Progress`ProgressDump`cell$492014], "Clock" -> Dynamic[None]|>, 
       "OuterUpdateInterval"], TrackedSymbols :> {}],
    ImageSizeCache->{352., {12.900390625, 19.099609375}}]}, All, 2],
  DynamicModuleValues:>{}]], "PrintTemporary",
 ShowCellLabel->True,
 CellChangeTimes->{3.8774355253433704`*^9},
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"1106d4ed-a93a-4334-92d6-03639c3c7c3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PersistResourceFunction", "[", "\"\<PhysicalQuantityData\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8774354904958663`*^9, 3.8774355046529655`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"74044fa6-876a-4cc3-add7-dabfd451a6af"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Success",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Successfully stored PhysicalQuantityData as an \
initialization symbol.\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"PersistenceLocation\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["PersistenceLocation", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Base: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"file:///C:/Users/burbery1/AppData/Roaming/Wolfram/\
Objects/Persistence\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   PersistenceLocation[
                   "Local", 
                    "file:///C:/Users/burbery1/AppData/Roaming/Wolfram/\
Objects/Persistence", 
                    Hold[Persistence`Data`a21601305118826773211$7]], 
                   Selectable -> False, Editable -> False, SelectWithContents -> 
                   True], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Successfully stored PhysicalQuantityData as an \
initialization symbol.\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"PersistenceLocation\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["PersistenceLocation", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Base: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"file:///C:/Users/burbery1/AppData/Roaming/Wolfram/\
Objects/Persistence\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   PersistenceLocation[
                   "Local", 
                    "file:///C:/Users/burbery1/AppData/Roaming/Wolfram/\
Objects/Persistence", 
                    Hold[Persistence`Data`a21601305118826773211$7]], 
                   Selectable -> False, Editable -> False, SelectWithContents -> 
                   True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"InstalledResourceFunction\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Success[
  "InstalledResourceFunction", <|
   "MessageTemplate" :> 
    "Successfully stored `symName` as an initialization symbol.", 
    "MessageParameters" -> <|"symName" -> "PhysicalQuantityData"|>, 
    "PersistenceLocation" -> 
    PersistenceLocation[
     "Local", "file:///C:/Users/burbery1/AppData/Roaming/Wolfram/Objects/\
Persistence", 
      Hold[Persistence`Data`a21601305118826773211$7]]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877435506514265*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"df14673b-e438-478f-b598-0b161ddba99b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PhysicalQuantityData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8774355080403595`*^9, 3.877435511606221*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"e8a7ee0a-5f6d-4744-a7e8-8340fc7c8955"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
         TemplateBox[{"\"Abbe number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbbeNumber\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AbbeNumber\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absackle\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Absackle\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Absackle\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"abseleration\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Abseleration\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Abseleration\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absement\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Absement\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Absement\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"abserk\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Abserk\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Abserk\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Absity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Absity\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absnap\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Absnap\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Absnap\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute altitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteAltitude\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteAltitude\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute bearing\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteBearing\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AbsoluteBearing\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute chemical activity\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsoluteChemicalActivity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AbsoluteChemicalActivity\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute elongation\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteElongation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteElongation\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute global warming potential\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsoluteGlobalWarmingPotential\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteGlobalWarmingPotential\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"absolute humidity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteHumidity\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteHumidity\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteMagnitude\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AbsoluteMagnitude\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute magnitude H\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteMagnitudeH\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteMagnitudeH\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute magnitude M\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteMagnitudeM\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteMagnitudeM\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute magnitude M_B\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteMagnitudeMB\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteMagnitudeMB\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute bolometric magnitude M_bol\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsoluteMagnitudeMBolometric\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteMagnitudeMBolometric\\\"]\"", "\"physical quantity\""}, "Entity"],
          ",", 
         TemplateBox[{"\"absolute visual magnitude M_V\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteMagnitudeMV\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteMagnitudeMV\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute mass\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteMass\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AbsoluteMass\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute pressure\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsolutePressure\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsolutePressure\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute vorticity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteVorticity\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AbsoluteVorticity\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absolute vorticity vertical component\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsoluteVorticityVerticalComponent\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsoluteVorticityVerticalComponent\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"absop\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Absop\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Absop\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absorbance\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Absorbance\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Absorbance\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absorbed dose of ionizing radiation\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsorbedDoseOfIonizingRadiation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsorbedDoseOfIonizingRadiation\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"absorbed dose rate of ionizing radiation\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsorbedDoseRateOfIonizingRadiation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsorbedDoseRateOfIonizingRadiation\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"absorptance\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Absorptance\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Absorptance\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absorption cross section\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsorptionCrossSection\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsorptionCrossSection\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absorption number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsorptionNumber\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsorptionNumber\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"absorptivity temperature coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AbsorptivityTemperatureCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbsorptivityTemperatureCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"abundance ratio\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AbundanceRatio\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AbundanceRatio\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"accelerating frequency\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AcceleratingFrequency\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcceleratingFrequency\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acceleration\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Acceleration\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"Acceleration\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acceleration gradient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AccelerationGradient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AccelerationGradient\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acceleration number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AccelerationNumber\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AccelerationNumber\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acceleration spectral density\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AccelerationSpectralDensity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AccelerationSpectralDensity\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"acceptor density\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AcceptorDensity\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcceptorDensity\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acentric factor\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AcentricFactor\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcentricFactor\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"achieved availability\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AchievedAvailability\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AchievedAvailability\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acoustic absorption coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AcousticAbsorptionCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcousticAbsorptionCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"acoustic attenuation coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AcousticAttenutationCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcousticAttenutationCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"acoustic dissipation coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AcousticDissipationCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcousticDissipationCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"acoustic energy\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticEnergy\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcousticEnergy\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acoustic impedance\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AcousticImpedance\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AcousticImpedance\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"acoustic reflection coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AcousticReflectionCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcousticReflectionCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"acoustic transmission coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AcousticTransmissionCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcousticTransmissionCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"acousto\[Hyphen]optical figure of merit\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AcoustoOpticalFigureOfMerit\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AcoustoOpticalFigureOfMerit\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"actinic dose\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ActinicDose\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"ActinicDose\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"action\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Action\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Action\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"activation energy\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ActivationEnergy\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ActivationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"active energy\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ActiveEnergy\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ActiveEnergy\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"active power\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ActivePower\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"ActivePower\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"activity coefficient\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ActivityCoefficient\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ActivityCoefficient\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"activity factor\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ActivityFactor\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ActivityFactor\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"actual exhaust speed\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ActualExhaustSpeed\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ActualExhaustSpeed\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"adiabatic bulk modulus\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AdiabaticBulkModulus\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticBulkModulus\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"adiabatic compressibility\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AdiabaticCompressibility\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AdiabaticCompressibility\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"adiabatic heat capacity\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AdiabaticHeatCapacity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AdiabaticHeatCapacity\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"adiabatic lapse rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticLapseRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticLapseRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"adiabatic linear compressibility\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AdiabaticLinearCompressibility\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticLinearCompressibility\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"adiabatic molar heat capacity\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AdiabaticMolarHeatCapacity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AdiabaticMolarHeatCapacity\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"adiabatic specific heat capacity\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AdiabaticSpecificHeatCapacity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticSpecificHeatCapacity\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"adiabatic work\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AdiabaticWork\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AdiabaticWork\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"aerodynamic force\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AerodynamicForce\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AerodynamicForce\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"age\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Age\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Age\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"agricultural yield\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AgriculturalYield\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AgriculturalYield\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"agricultural yield rate\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AgriculturalYieldRate\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AgriculturalYieldRate\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"air change rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AirChangeRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AirChangeRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"airflow permeability\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AirflowPermeability\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AirflowPermeability\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"air pressure\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AirPressure\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AirPressure\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"airspeed\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Airspeed\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Airspeed\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"air temperature\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AirTemperature\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AirTemperature\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"albedo\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Albedo\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Albedo\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"alcohol by volume\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AlcoholByVolume\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AlcoholByVolume\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Alfv\[EAcute]n number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AlfvenNumber\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AlfvenNumber\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Almansi strain\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AlmansiStrain\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AlmansiStrain\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"alpha disintegration energy\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AlphaDisintegrationEnergy\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AlphaDisintegrationEnergy\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"alternating current voltage\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AlternatingCurrentVoltage\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AlternatingCurrentVoltage\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"altitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Altitude\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Altitude\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"altitude angle\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AltitudeAngle\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AltitudeAngle\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"ambient pressure\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmbientPressure\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AmbientPressure\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"ambient temperature\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmbientTemperature\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AmbientTemperature\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"amount of substance\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Amount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Amount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"amount concentration\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmountConcentration\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AmountConcentration\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"amount fraction\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmountFraction\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AmountFraction\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"amount of light\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmountOfLight\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AmountOfLight\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"amount ratio\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmountRatio\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AmountRatio\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Amp\[EGrave]re number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmpereNumber\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"AmpereNumber\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"amplifier current frequency sensitivity\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AmplifierCurrentFrequencySensitivity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AmplifierCurrentFrequencySensitivity\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"amplifier noise slope\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AmplifierNoiseSlope\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AmplifierNoiseSlope\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"plane angle\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Angle\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Angle\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle gradient\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleGradient\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleGradient\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"anglement\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Anglement\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Anglement\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of attack\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfAttack\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfAttack\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of deviation\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfDeviation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfDeviation\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of incidence\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfIncidence\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfIncidence\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of optical rotation\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AngleOfOpticalRotation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfOpticalRotation\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of reflection\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfReflection\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfReflection\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of refraction\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfRefraction\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfRefraction\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of repose\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfRepose\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfRepose\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle of vanishing stability\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AngleOfVanishingStability\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfVanishingStability\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"angle per distance\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AnglePerDistance\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AnglePerDistance\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angle per time magnetic flux density\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AnglePerTimeMagneticFluxDensity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AnglePerTimeMagneticFluxDensity\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"angular acceleration\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularAcceleration\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularAcceleration\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular aperture\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularAperture\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularAperture\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular curvature\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularCurvature\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularCurvature\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular diameter\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularDiameter\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularDiameter\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular diameter distance\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AngularDiameterDistance\""}], "]"}], 
           
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularDiameterDistance\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular displacement\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularDisplacement\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularDisplacement\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular eccentricity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularEccentricity\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularEccentricity\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular elongation\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularElongation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularElongation\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular frequency\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularFrequency\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularFrequency\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular impulse\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularImpulse\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularImpulse\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular jerk\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularJerk\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularJerk\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular momentum\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularMomentum\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularMomentum\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular momentum quantum number\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AngularMomentumQuantumNumber\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularMomentumQuantumNumber\\\"]\"", "\"physical quantity\""}, "Entity"],
          ",", 
         TemplateBox[{"\"angular radius\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularRadius\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularRadius\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular radius of curvature\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AngularRadiusOfCurvature\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularRadiusOfCurvature\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular reciprocal lattice vector\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AngularReciprocalLatticeVector\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularReciprocalLatticeVector\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"angular resolution\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularResolution\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularResolution\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular resolving power\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AngularResolvingPower\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularResolvingPower\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular torque\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularTorque\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularTorque\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular velocity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularVelocity\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularVelocity\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular wavelength\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularWavelength\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularWavelength\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"angular wavenumber\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularWavenumber\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularWavenumber\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"anharmonicity constant\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AnharmonicityConstant\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AnharmonicityConstant\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"annual fuel utilization efficiency\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AnnualFuelUtilizationEfficiency\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AnnualFuelUtilizationEfficiency\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"antenna efficiency\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AntennaEfficiency\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AntennaEfficiency\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"anthropomass number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"AnthropomassNumber\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AnthropomassNumber\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Antoine equation constant A\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AntoineEquationConstantA\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AntoineEquationConstantA\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Antoine equation constant B\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AntoineEquationConstantB\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AntoineEquationConstantB\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Antoine equation constant C\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"AntoineEquationConstantC\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"AntoineEquationConstantC\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"aperture\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Aperture\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Aperture\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"aperture efficiency\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApertureEfficiency\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApertureEfficiency\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"apoapsis distance\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApoapsisDistance\""}], 
             "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"ApoapsisDistance\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitude\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ApparentMagnitude\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"B\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeB\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeB\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"bolometric apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"ApparentMagnitudeBolometric\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeBolometric\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"G\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeG\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeG\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"H\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeH\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeH\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"I\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeI\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeI\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"J\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeJ\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeJ\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"K\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeK\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeK\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"K_s\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeKs\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeKs\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"L\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeL\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeL\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"M\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeM\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeM\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"N\[Hyphen]band apparent magnitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ApparentMagnitudeN\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ApparentMagnitudeN\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"2751"}, "OutputSizeLimit`Skeleton"], ",", 
         TemplateBox[{"\"viscous force\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ViscousForce\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"ViscousForce\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"visit count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VisitCount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VisitCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"visit rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VisitRate\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VisitRate\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"visual acuity number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VisualAcuityNumber\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VisualAcuityNumber\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"visual angle\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VisualAngle\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VisualAngle\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"visual distance modulus\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VisualDistanceModulus\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VisualDistanceModulus\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"visual geometric albedo\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VisualGeometricAlbedo\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VisualGeometricAlbedo\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"void ratio\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VoidRatio\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VoidRatio\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"voltage\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Voltage\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Voltage\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"voltage phasor\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VoltagePhasor\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VoltagePhasor\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"voltage responsivity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VoltageResponsivity\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VoltageResponsivity\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"voltage to frequency ratio\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VoltageToFrequencyRatio\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VoltageToFrequencyRatio\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"voltmeter impedance change\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VoltmeterImpedanceChange\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VoltmeterImpedanceChange\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"voltmeter rating\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VoltMeterRating\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"VoltMeterRating\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"voltmeter resistance change\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VoltmeterResistanceChange\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VoltmeterResistanceChange\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"volume\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Volume\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Volume\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume change per temperature difference\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeChangePerTemperatureDifference\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeChangePerTemperatureDifference\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volume change rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeChangeRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeChangeRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume cross section\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeCrossSection\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeCrossSection\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume density rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeDensityRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumeDensityRate\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume erosion rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeErosionRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumeErosionRate\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume flow per person\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeFlowPerPerson\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeFlowPerPerson\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume flow rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeFlowRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeFlowRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume flow rate per time\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeFlowRatePerTime\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumeFlowRatePerTime\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume fraction\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeFraction\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeFraction\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume gain rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeGainRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeGainRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume gradient\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeGradient\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeGradient\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume growth rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeGrowthRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeGrowthRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume loss rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeLossRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeLossRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume per money\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumePerMoney\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumePerMoney\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume per person\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumePerPerson\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumePerPerson\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume per volume\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumePerVolume\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumePerVolume\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume ratio\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeRatio\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumeRatio\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume scattering coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeScatteringCoefficient\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"volume scattering emission coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringEmissionCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeScatteringEmissionCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volume scattering function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringFunction\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumeScatteringFunction\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"normalized volume scattering function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringFunctionNormalized\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeScatteringFunctionNormalized\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volume scattering phase function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringPhaseFunction\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeScatteringPhaseFunction\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volume scattering reflection function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringReflectionFunction\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeScatteringReflectionFunction\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volume scattering source function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringSourceFunction\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeScatteringSourceFunction\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volume scattering transmission function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumeScatteringTransmissionFunction\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeScatteringTransmissionFunction\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volume spread rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeSpreadRate\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeSpreadRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume synthesis rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeSynthesisRate\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumeSynthesisRate\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volume time\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumeTime\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumeTime\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volumetric airflow\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumetricAirflow\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumetricAirflow\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volumetric flux\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumetricFlux\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumetricFlux\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volumetric heat capacity\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumetricHeatCapacity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumetricHeatCapacity\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volumetric radioactive activity density\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumetricRadioactiveActivityDensity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumetricRadioactiveActivityDensity\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volumetric radius\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VolumetricRadius\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumetricRadius\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"volumetric thermal expansion coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumetricThermalExpansionCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VolumetricThermalExpansionCoefficient\\\"]\"", "\"physical quantity\""}, 
          "Entity"], ",", 
         TemplateBox[{"\"volumic total cross section\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"VolumicTotalCrossSection\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"VolumicTotalCrossSection\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"vorticity\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Vorticity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Vorticity\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"vorticity advection\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"VorticityAdvection\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"VorticityAdvection\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wafer count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaferCount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaferCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wafer rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaferRate\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaferRate\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"waffle count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaffleCount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaffleCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"longitudinal wake field\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WakeFieldLongitudinal\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WakeFieldLongitudinal\\\"]\
\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"longitudinal wake potential\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WakePotentialLongitudinal\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WakePotentialLongitudinal\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"transversal wake potential\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WakePotentialTransversal\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WakePotentialTransversal\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"walking speed\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WalkingSpeed\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WalkingSpeed\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"warping constant\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WarpingConstant\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WarpingConstant\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"water energy\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterEnergy\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterEnergy\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"water number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterNumber\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaterNumber\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"water potential\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaterPotential\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaterPotential\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wave amplitude\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveAmplitude\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveAmplitude\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wave attenuation coefficient\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveAttenuationCoefficient\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveAttenuationCoefficient\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wave coherence length\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveCoherenceLength\""}],
              "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveCoherenceLength\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wave energy\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveEnergy\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveEnergy\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"1\[Hyphen]dimensional bound state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState1DMomentumRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState1DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"1\[Hyphen]dimensional bound state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState1DPositionRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState1DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"2\[Hyphen]dimensional bound state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState2DMomentumRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState2DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"2\[Hyphen]dimensional bound state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState2DPositionRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState2DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"3\[Hyphen]dimensional bound state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState3DMomentumRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState3DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"3\[Hyphen]dimensional bound state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState3DPositionRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState3DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"4\[Hyphen]dimensional bound state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState4DMomentumRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState4DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"4\[Hyphen]dimensional bound state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionBoundState4DPositionRepresentation\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionBoundState4DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"1\[Hyphen]dimensional scattering state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState1DMomentumRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState1DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"1\[Hyphen]dimensional scattering state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState1DPositionRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState1DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"2\[Hyphen]dimensional scattering state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState2DMomentumRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState2DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"2\[Hyphen]dimensional scattering state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState2DPositionRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState2DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"3\[Hyphen]dimensional scattering state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState3DMomentumRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState3DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"3\[Hyphen]dimensional scattering state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState3DPositionRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState3DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"4\[Hyphen]dimensional scattering state momentum space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState4DMomentumRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState4DMomentumRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{
          "\"4\[Hyphen]dimensional scattering state position space wave \
function\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WaveFunctionScatteringState4DPositionRepresentation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WaveFunctionScatteringState4DPositionRepresentation\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wavelength\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Wavelength\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Wavelength\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wavelength temperature product\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WavelengthTemperatureProduct\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WavelengthTemperatureProduct\\\"]\"", "\"physical quantity\""}, "Entity"],
          ",", 
         TemplateBox[{"\"wave mass\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveMass\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveMass\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wavenumber\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Wavenumber\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Wavenumber\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wave power\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WavePower\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WavePower\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wave speed\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveSpeed\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveSpeed\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wave vector\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WaveVector\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WaveVector\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"weak coupling\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WeakCoupling\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WeakCoupling\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"weak mixing angle\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WeakMixingAngle\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WeakMixingAngle\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wear factor\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WearFactor\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WearFactor\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wear rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WearRate\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WearRate\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Weber number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WeberNumber\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WeberNumber\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wedge count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WedgeCount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WedgeCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"weight\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Weight\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Weight\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Weiss constant\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WeissConstant\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WeissConstant\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Weissenberg number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WeissenbergNumber\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WeissenbergNumber\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wet biomass\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WetBiomass\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WetBiomass\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wet bulb globe temperature\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WetBulbGlobeTemperature\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WetBulbGlobeTemperature\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wet\[Hyphen]bulb temperature\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WetBulbTemperature\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WetBulbTemperature\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wet mass\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WetMass\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WetMass\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wetted perimeter\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WettedPerimeter\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WettedPerimeter\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"width\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Width\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Width\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Wiedemann\[Hyphen]Franz law ratio\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WiedemannFranzLawRatio\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WiedemannFranzLawRatio\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wilting point\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WiltingPoint\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WiltingPoint\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wind energy\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WindEnergy\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindEnergy\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"winding count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WindingCount\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindingCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wind power\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WindPower\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindPower\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wind speed\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WindSpeed\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WindSpeed\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wing area\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WingArea\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WingArea\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wing count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WingCount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WingCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wing loading\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WingLoading\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WingLoading\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wingspan\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Wingspan\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Wingspan\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"current\[Hyphen]carrying capacity of a wire\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"WireCurrentCarryingCapacity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WireCurrentCarryingCapacity\\\"]\"", "\"physical quantity\""}, "Entity"], 
         ",", 
         TemplateBox[{"\"Wolfram credit count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WolframCreditCount\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WolframCreditCount\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Womersley number\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WomersleyNumber\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WomersleyNumber\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"word correct count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WordCorrectCount\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WordCorrectCount\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"word count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WordCount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WordCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"word per page\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WordPerPage\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WordPerPage\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"word rate\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WordRate\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WordRate\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"word size\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WordSize\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WordSize\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"work\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Work\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Work\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"work function\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkFunction\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"WorkFunction\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"working tension\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkingTension\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WorkingTension\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"working time\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkingTime\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WorkingTime\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"work per weight\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkPerWeight\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WorkPerWeight\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"work to elastic limit\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkToElasticLimit\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"WorkToElasticLimit\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"work to maximum load\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WorkToMaximumLoad\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WorkToMaximumLoad\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"world population\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WorldPopulation\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WorldPopulation\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wrap count\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WrapCount\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"WrapCount\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"wrap linear density\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"WrapLinearDensity\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"WrapLinearDensity\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"X\[Hyphen]ray brilliance\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"XRayBrilliance\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"XRayBrilliance\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"X\[Hyphen]ray detector sensitivity\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"XRayDetectorSensitivity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"XRayDetectorSensitivity\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"yarn yield\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"YardYield\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"YardYield\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"yarn inverse linear density\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"YarnInverseLinearDensity\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"YarnInverseLinearDensity\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"yarn linear density\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"YarnLinearDensity\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"YarnLinearDensity\
\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"yaw\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Yaw\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Yaw\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"yield strength\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"YieldStrength\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"YieldStrength\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Young modulus\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"YoungModulus\""}], "]"}],
            "\"Entity[\\\"PhysicalQuantity\\\", \\\"YoungModulus\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"Yukawa coupling\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"YukawaCoupling\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"YukawaCoupling\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"zenith angle\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ZenithAngle\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"ZenithAngle\\\"]\"", 
           "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"zero\[Hyphen]point energy\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"ZeroPointEnergy\""}], 
             "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ZeroPointEnergy\\\
\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"zeroth\[Hyphen]order rate constant\"", 
           RowBox[{"Entity", "[", 
             
             RowBox[{"\"PhysicalQuantity\"", ",", 
               "\"ZerothOrderRateConstant\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ZerothOrderRateConstant\\\"]\"", "\"physical quantity\""}, "Entity"], ",", 
         TemplateBox[{"\"zoomass\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PhysicalQuantity\"", ",", "\"Zoomass\""}], "]"}], 
           "\"Entity[\\\"PhysicalQuantity\\\", \\\"Zoomass\\\"]\"", 
           "\"physical quantity\""}, "Entity"]}], "}"}], Short[#, 5]& ], 
   "line" -> 100, "sessionID" -> 21601305118826773211, "byteCount" -> 487336, 
   "size" -> 5, "stored" -> False, "expr" -> Missing["NotStored"], "wrap" -> 
   OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.8774355132236366`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"a38cefac-de80-4c37-b472-f8d1e3a2faf9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 741.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"dd54287f-90c7-4667-b1f6-00fae24d5ab9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 275, 5, 28, "Input",ExpressionUUID->"43737183-6aec-4e82-9722-13c34d408f06"],
Cell[858, 29, 417, 8, 32, "Output",ExpressionUUID->"283cf7dd-f699-42ab-92ec-e859be79dd35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1312, 42, 263, 4, 28, "Input",ExpressionUUID->"82c46a48-f0a3-4d0b-b303-db4662159e20"],
Cell[1578, 48, 368, 8, 43, "Output",ExpressionUUID->"e73baa35-4de5-49c6-a870-3a59ed916fe9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1983, 61, 442, 9, 39, "Input",ExpressionUUID->"1d4cee03-75de-442a-ab5b-029d5e5797da"],
Cell[2428, 72, 53938, 1017, 535, "Output",ExpressionUUID->"c7fca097-ed56-42f8-85f1-c82939f19da6"]
}, Open  ]],
Cell[56381, 1092, 210, 4, 28, "Input",ExpressionUUID->"c674e0f9-ceba-4b9a-8de6-5c5f373853a6"],
Cell[CellGroupData[{
Cell[56616, 1100, 165, 3, 67, "Section",ExpressionUUID->"317c07db-5daf-47a9-8d35-6cfc80d3d6e3"],
Cell[CellGroupData[{
Cell[56806, 1107, 235, 3, 28, "Input",ExpressionUUID->"a1ddf5e6-7c43-4e84-b514-3f7835f621f8"],
Cell[57044, 1112, 50704, 902, 228, "Output",ExpressionUUID->"0feef5a7-4fe6-4286-8da8-b948027a523d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107785, 2019, 305, 6, 28, "Input",ExpressionUUID->"0a2b98a3-c456-4db9-99d3-dbfd05845e32"],
Cell[108093, 2027, 615471, 11031, 2820, "Output",ExpressionUUID->"cf7be869-ff2e-4c68-9c8c-58b0a08f5196"]
}, Open  ]],
Cell[CellGroupData[{
Cell[723601, 13063, 423, 7, 28, "Input",ExpressionUUID->"aed2714e-3076-4dd6-b990-38dd43c9edad"],
Cell[724027, 13072, 122025, 2258, 624, "Output",ExpressionUUID->"c33078ba-062c-42de-ac23-8769cf341fef"]
}, Open  ]],
Cell[846067, 15333, 408, 7, 48, "Input",ExpressionUUID->"e2745275-d0eb-459e-bb57-b6fb0ab5f3a4"],
Cell[CellGroupData[{
Cell[846500, 15344, 235, 3, 28, "Input",ExpressionUUID->"7ab4426d-27f3-4cc2-bcca-1c55195e5caf"],
Cell[846738, 15349, 388, 8, 43, "Output",ExpressionUUID->"a9e247be-1385-438a-93e3-688564040b4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[847163, 15362, 268, 5, 28, "Input",ExpressionUUID->"94ea93bd-8b44-4a1f-bc3e-f0aab8eb86f5"],
Cell[847434, 15369, 419, 11, 32, "Output",ExpressionUUID->"16715348-6bf7-4949-b4bd-b257f7168814"]
}, Open  ]],
Cell[CellGroupData[{
Cell[847890, 15385, 339, 7, 28, "Input",ExpressionUUID->"7642ea52-f99b-4a27-a233-033fb80795d5"],
Cell[848232, 15394, 29501, 655, 824, "Output",ExpressionUUID->"11d4809c-84d5-4599-b920-c4dce44370b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[877770, 16054, 837, 21, 143, "Input",ExpressionUUID->"e804e7e2-6ba6-4724-b5eb-ea07d39bc90a"],
Cell[878610, 16077, 50551, 1089, 368, "Output",ExpressionUUID->"1e0bd124-9bda-4c34-ac4d-739da7c63b75"]
}, Open  ]],
Cell[CellGroupData[{
Cell[929198, 17171, 967, 25, 181, "Input",ExpressionUUID->"72590eef-5e9b-48b1-b5e4-0be3d57b9f94"],
Cell[930168, 17198, 23611, 522, 716, "Output",ExpressionUUID->"24c610bb-88dd-4787-ad71-8b2144a60aef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[953816, 17725, 1094, 27, 200, "Input",ExpressionUUID->"d933b1c5-66e6-4149-ab67-7a79e9c63876"],
Cell[954913, 17754, 860, 20, 43, "Output",ExpressionUUID->"fdb0ad7f-a1c4-42e9-b72f-56464e09f35b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[955810, 17779, 1268, 31, 219, "Input",ExpressionUUID->"b87f07d0-3bc5-4f21-ba11-a8773896c1a5"],
Cell[957081, 17812, 103656, 1903, 544, "Output",ExpressionUUID->"e4b1f022-1aa4-41d4-9849-c0d8d8a75add"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1060774, 19720, 1431, 35, 162, "Input",ExpressionUUID->"81b8857d-532e-4bc2-b3fe-15e1ff515cd6"],
Cell[1062208, 19757, 153196, 2859, 1643, "Output",ExpressionUUID->"c07a55c9-a47d-4def-9c7b-8c2814b75301"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1215441, 22621, 1261, 32, 219, "Input",ExpressionUUID->"19f65cb3-0684-47be-a9a3-90407b2eb13b"],
Cell[1216705, 22655, 18006, 397, 296, "Output",ExpressionUUID->"5d9bb4ba-e6a5-4ed2-b725-4f3ccc833484"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1234748, 23057, 1322, 32, 124, "Input",ExpressionUUID->"e2ebf761-3141-4f4a-a9f7-59aa6ae1e5b4"],
Cell[1236073, 23091, 8488, 191, 170, "Output",ExpressionUUID->"300574cc-f947-4c45-b250-ce83728e2260"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1244598, 23287, 255, 4, 28, "Input",ExpressionUUID->"29ad67ba-43ca-4380-8b0f-6b698e3fff31"],
Cell[1244856, 23293, 22929, 403, 64, "Output",ExpressionUUID->"b3476e4e-1376-4881-83e6-b6b330285020"]
}, Open  ]],
Cell[1267800, 23699, 250, 4, 28, "Input",ExpressionUUID->"06df9c6a-2714-4055-be9f-6ce6b910e7c4"],
Cell[1268053, 23705, 205, 4, 28, "Input",ExpressionUUID->"fd9af901-3562-4d22-9c9d-8eb8d50ef230"],
Cell[CellGroupData[{
Cell[1268283, 23713, 1024, 26, 67, "Input",ExpressionUUID->"52f41d30-5239-41c5-be20-1b21c5aa1357"],
Cell[1269310, 23741, 860, 20, 43, "Output",ExpressionUUID->"6da6d501-a647-41f6-84ff-596d08b6d922"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1270207, 23766, 481, 9, 39, "Input",ExpressionUUID->"7487aeed-ed0d-49b4-9d32-c7fa05585c5f"],
Cell[1270691, 23777, 434, 8, 32, "Output",ExpressionUUID->"c3c8ce3f-7fa9-49cf-9bb0-d1c587d0d179"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1271162, 23790, 8951, 198, 171, "Input",ExpressionUUID->"6607b449-f7e3-4a33-93d7-228383ac61e4"],
Cell[1280116, 23990, 4324, 97, 128, "Output",ExpressionUUID->"967e585f-1510-484c-888c-b225fa1a75bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1284477, 24092, 9829, 214, 203, "Input",ExpressionUUID->"2365a481-3e2e-41e8-8341-fe797c9a5deb"],
Cell[1294309, 24308, 4717, 106, 128, "Output",ExpressionUUID->"686c507b-a4cf-4d7e-b5f0-8a58c09e5350"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1299063, 24419, 10118, 220, 203, "Input",ExpressionUUID->"31b43a3e-5541-42e4-88ee-b8a777e47236"],
Cell[1309184, 24641, 1332, 28, 302, "Output",ExpressionUUID->"9d257f9f-de58-4a83-b311-dfedd6e009e9"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1310565, 24675, 155, 3, 53, "Section",ExpressionUUID->"7af3fce9-ef30-4f2a-a6d4-7c6953893052"],
Cell[1310723, 24680, 726, 16, 48, "Input",ExpressionUUID->"8638ae38-85e9-4132-b4ff-72433fa34695"],
Cell[1311452, 24698, 1311, 32, 116, "Input",ExpressionUUID->"9a622c24-81f6-4450-82a2-d243a2e2019d"],
Cell[CellGroupData[{
Cell[1312788, 24734, 503, 9, 39, "Input",ExpressionUUID->"9f54ba78-ce2e-47c0-9f65-34f066b86a94"],
Cell[1313294, 24745, 4691, 106, 128, "Output",ExpressionUUID->"c9860072-1035-436b-a947-c6fb0f05fff7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1318022, 24856, 543, 10, 39, "Input",ExpressionUUID->"fa979199-ec0b-4d2b-ab76-8c7abdc83da6"],
Cell[1318568, 24868, 68620, 1263, 571, "Output",ExpressionUUID->"4f3ac3e1-f9c2-4a01-8e21-eb0004558cb9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1387225, 26136, 377, 7, 28, "Input",ExpressionUUID->"7e5b3a81-202e-44b2-acb7-fb4c8dd780b5"],
Cell[1387605, 26145, 65865, 1207, 549, "Output",ExpressionUUID->"82899f3d-8f8c-47e1-80d3-141889f1367e"]
}, Open  ]],
Cell[1453485, 27355, 157, 3, 35, "Text",ExpressionUUID->"7f6e5001-cffe-4a91-9143-3ce321ca546f"],
Cell[1453645, 27360, 50460, 1088, 341, "Input",ExpressionUUID->"7f7c1eca-8c8d-4a8f-a514-7da6fb284b02"],
Cell[CellGroupData[{
Cell[1504130, 28452, 165, 3, 54, "Subsection",ExpressionUUID->"ec4e9015-6799-4aef-a19e-1ed56d74037b"],
Cell[CellGroupData[{
Cell[1504320, 28459, 1046, 25, 39, "Input",ExpressionUUID->"c713c88e-02d8-407b-8f4d-1cb7c87c925f"],
Cell[1505369, 28486, 1096, 25, 46, "Output",ExpressionUUID->"adad217b-b93b-4a6b-b3b7-507248dc6176"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1506526, 28518, 167, 3, 67, "Section",ExpressionUUID->"a5a51697-36a3-409c-8883-606907ea93dd"],
Cell[CellGroupData[{
Cell[1506718, 28525, 561, 11, 28, "Input",ExpressionUUID->"a45654cc-283e-460b-8080-17a2f750d55b"],
Cell[1507282, 28538, 5123, 117, 147, "Output",ExpressionUUID->"c489ae0b-33a6-43bc-bc7f-cb7ed7304ce9"]
}, Open  ]],
Cell[1512420, 28658, 157, 3, 35, "Text",ExpressionUUID->"e1a67d1f-405c-4d40-84ea-9b8e92bcbb96"],
Cell[1512580, 28663, 50460, 1088, 341, "Input",ExpressionUUID->"32c3440a-eaf0-484a-aade-a5a245884482"],
Cell[CellGroupData[{
Cell[1563065, 29755, 723, 14, 48, "Input",ExpressionUUID->"8ffd5a64-2c84-4a2c-a3de-20f428ddf2ee"],
Cell[1563791, 29771, 212717, 3769, 454, "Output",ExpressionUUID->"bc5093f0-bc1c-434e-9135-f9f331ba7dac"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1776557, 33546, 172, 3, 67, "Section",ExpressionUUID->"93836ea9-a644-4450-b295-fd7c87f7a24d"],
Cell[CellGroupData[{
Cell[1776754, 33553, 808, 20, 28, "Input",ExpressionUUID->"642843b5-90d1-4aaa-b9f6-ad4178550f56"],
Cell[1777565, 33575, 70172, 1513, 371, "Output",ExpressionUUID->"9c4bd79e-3bcd-492f-9df8-b5ddfdeca857"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1847774, 35093, 627, 13, 48, "Input",ExpressionUUID->"d7949183-4621-4a99-b6f6-4e0582b29113"],
Cell[1848404, 35108, 183106, 3242, 921, "Output",ExpressionUUID->"e0d1244c-dda9-487f-b08b-0c1627fb1ff9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2031547, 38355, 166, 3, 54, "Subsection",ExpressionUUID->"f03dc1de-fcbb-4b15-9635-339b415bfc6c"],
Cell[CellGroupData[{
Cell[2031738, 38362, 637, 14, 67, "Input",ExpressionUUID->"7b596674-f80a-4798-b70d-9dc387d83366"],
Cell[2032378, 38378, 1449, 36, 44, "Output",ExpressionUUID->"0086b321-a02b-4a31-93d3-e71324260393"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2033864, 38419, 1024, 24, 67, "Input",ExpressionUUID->"4889e0b6-683f-4691-a3dc-19e20152f742"],
Cell[2034891, 38445, 1812, 42, 46, "Output",ExpressionUUID->"43004496-265e-49ad-be42-105f8abf7985"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2036740, 38492, 908, 23, 48, "Input",ExpressionUUID->"0d32d9c9-02b9-49b1-8613-04578edc5734"],
Cell[2037651, 38517, 5003, 90, 57, "PrintTemporary",ExpressionUUID->"1106d4ed-a93a-4334-92d6-03639c3c7c3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2042691, 38612, 255, 4, 28, "Input",ExpressionUUID->"74044fa6-876a-4cc3-add7-dabfd451a6af"],
Cell[2042949, 38618, 21964, 430, 96, "Output",ExpressionUUID->"df14673b-e438-478f-b598-0b161ddba99b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2064950, 39053, 219, 4, 28, "Input",ExpressionUUID->"e8a7ee0a-5f6d-4744-a7e8-8340fc7c8955"],
Cell[2065172, 39059, 93197, 1750, 1232, "Output",ExpressionUUID->"a38cefac-de80-4c37-b472-f8d1e3a2faf9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

